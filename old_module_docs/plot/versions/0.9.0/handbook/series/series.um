@section Series

  Multiple kinds of series can added to a single axis. Certain series kinds will naturally group together when plotted on the same axis, such as bar series. Series should be created using the addSeries method on Axis.

  @css
    .docs-graph {
      height: 200px;
      max-width: 500px;
      margin-left: auto;
      margin-right: auto;
    }

  @section Line Series

    @example

      @html
        <div id='line-series' class='docs-graph'></div>
      @js
        var graph = new hx.Graph('#line-series');
        var axis = graph.addAxis();
        axis.yScalePaddingMax = 0.1;

        var series = axis.addSeries('line', 'Line Series');

        series.setData(hx.range(50).map(function(d){ return {x: d, y: Math.cos(d/20)}}));
        graph.render();


    The data a line series expects is an array of objects with x and y properties:

    @@codeblock json
      [
        {x: 0, y: 10},
        {x: 1, y: 11},
        {x: 2, y: 16},
        {x: 3, y: 12}
      ]

  @section Bar Series

    @example
      @html
        <div id='bar-series' class='docs-graph'></div>
      @js
        var graph = new hx.Graph('#bar-series')
        var axis = graph.addAxis('discrete', 'linear');
        axis.yScalePaddingMax = 0.1
        axis.yMin = 0
        var series = axis.addSeries('bar', 'Bar Series');
        series.setData(hx.range(7).map(function(d){
          return {
            x: d,
            y: Math.cos(d/10),
            color: hx.theme.plot.colors[d]
          }
        }));
        graph.render();

    The data a bar series expects is an array of objects with x and y properties:

    @@codeblock json
      [
        {x: 0, y: 10},
        {x: 1, y: 11},
        {x: 2, y: 16},
        {x: 3, y: 12}
      ]

    The optional color property can be set per data point for bar series. If set, it should be a css color string.

  @section Stacked Area and Stacked Bar charts

    Bar series can be stacked by setting the group property to be the same for all series that you want to stack together. The same also is true of line series.

    Stacked Area/Line example:

    @example
      @html
        <div id='stacked-line-example' class='docs-graph'></div>
      @js
        var graph = new hx.Graph('#stacked-line-example');

        var axis = graph.addAxis();
        axis.yScalePaddingMax = 0.1;

        var series1 = axis.addSeries('line', 'Line Series 1')
        var series2 = axis.addSeries('line', 'Line Series 2')

        series1.setData(hx.range(200).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}}))
        series2.setData(hx.range(200).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}}))

        series1.group = 'group1'
        series1.fill = true
        series1.color = hx.theme.plot.colors[0]
        series2.group = 'group1'
        series2.fill = true
        series2.color = hx.theme.plot.colors[1]

        graph.render()

    Stacked Bar example:

    @example

      @html
        <div id='stacked-bar-example' class='docs-graph'></div>
      @js
        var graph = new hx.Graph('#stacked-bar-example');

        var axis = graph.addAxis('discrete', 'linear');
        axis.yScalePaddingMax = 0.1;

        var series1 = axis.addSeries('bar', 'Bar Series 1')
        var series2 = axis.addSeries('bar', 'Bar Series 2')

        series1.setData(hx.range(20).map(function(d){ return {x: d, y: (1 - Math.sin(d/10))}}))
        series2.setData(hx.range(20).map(function(d){ return {x: d, y: (1 - Math.sin(d/10))}}))

        series1.group = 'group1'
        series1.fill = true
        series1.color = hx.theme.plot.colors[2]
        series2.group = 'group1'
        series2.fill = true
        series2.color = hx.theme.plot.colors[3]

        graph.render()


  @section Band Series

    @example
      @html
        <div id='band-series' class='docs-graph'></div>
      @js
        var graph = new hx.Graph('#band-series')
        var axis = graph.addAxis();
        axis.yScalePaddingMin = 0.1;
        axis.yScalePaddingMax = 0.1;
        var series = axis.addSeries('band', 'Band Series');
        series.setData(hx.range(200).map(function(d){
          return {
            x: d,
            y1: (1 - Math.sin(d/20)),
            y2: (3.5+Math.sin(d/20))
          }
        }));
        graph.render();

    The data a band series expects is an array of objects with x and y1 and y2 properties. y1 is expected to be smaller than y2:

    @@codeblock json
      [
        {x: 0, y1: 10, y2: 16},
        {x: 1, y1: 11, y2: 17},
        {x: 2, y1: 16, y2: 16},
        {x: 3, y1: 12, y2: 14}
      ]

  @section Scatter Series

    @example
      @html
        <div id='scatter-series' class='docs-graph'></div>
      @js
        var graph = new hx.Graph('#scatter-series')
        var axis = graph.addAxis();
        axis.xScalePaddingMax = 0.1
        axis.xScalePaddingMin = 0.1
        axis.yScalePaddingMax = 0.1
        axis.yScalePaddingMin = 0.1
        var series = axis.addSeries('scatter', 'Scatter Series');
        series.setData(hx.range(100).map(function(d){
          return {
            x: d/10 + Math.random()*2,
            y: d*d/10 + Math.random()*2,
            color: hx.cycle(hx.theme.plot.colors, d)
          }
        }));
        graph.render();

    @@codeblock js
      series = axis.addSeries('scatter', 'Series Name')
      series.setData(...)

    The data a scatter series expects is an array of objects with x and y properties:

    @@codeblock json
      [
        {x: 0, y: 10},
        {x: 1, y: 11},
        {x: 2, y: 16},
        {x: 3, y: 12}
      ]

    Other optional properties that can be set alongside the x any y values for each point are 'color' and 'size'. color should be a css color string, and size should be the radius of the point in pixels (the default is 3).

  @section Straight Line Series
    @example
      @html
        <div id='straight-series' class='docs-graph'></div>
      @js
        var graph = new hx.Graph('#straight-series')
        var axis = graph.addAxis();
        axis.xMin = 0
        axis.xMax = 5
        axis.yMin = 0
        axis.yMax = 5
        var series = axis.addSeries('straight-line', 'Straight Line Series');
        series.setData({x: 0, y: 2, dx: 1, dy: 0.5});
        graph.render();

    The data a line series expects is an object which has the properties x, y, dx and dy.

    @@codeblock json
      {x: 50, y: 20, dx: 1, dy: 2}

    You can also specify just an x value or a y value to draw lines aligned with the axes.

    Vertical line:
    @@codeblock json
      {x: 50}

    Horizontal line:
    @@codeblock json
      {y: 70}
