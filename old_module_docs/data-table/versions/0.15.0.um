@version 0.15.0

  @description
    Tables for displaying data with sorting, filtering, selection and pagination.

  @examples
    @example
      @html
        <div id="example"></div>
      @js
        var table = new hx.DataTable('#example')
        table.feed(hx.dataTable.objectFeed({
          headers: [
            { name: 'Name', id: 'name' },
            { name: 'Age', id: 'age' },
            { name: 'Profession', id: 'profession' }
          ],
          rows: [
            {
              id: 0, // hidden details can go here (not in the cells object)
              cells: { 'name': 'Bob', 'age': 25, 'profession': 'Developer' }
            },
            {
              id: 1,
              cells: { 'name': 'Jan', 'age': 41, 'profession': 'Artist' }
            },
            {
              id: 2,
              cells: { 'name': 'Dan', 'age': 41, 'profession': 'Builder' }
            }
          ]
        }))

  @api Data Table
    @prototype hx.DataTable
      @extends EventEmitter
      @added: Added a new module for creating data tables to replace the Extended Table module.


      @description: A component to allow tables to be created dynamically using Javascript that contains features such as filtering, sorting and pagination.

      @constructor
        @description: Creates a table object using a selector and some options.
        @arg selector [String/HTMLElement]: A CSS selector string which uniquely identifies the element to create the table in, or the Element to create the table in.
        @arg? options [Object]: The options to use when creating the data table

          @property allowHeaderWrap [Boolean]: A boolean to determine whether table headers should be allowed to wrap onto multiple lines.
            @default: false

          @property cellRenderer [Function]: A function for rendering body cells.
            @default
              @@codeblock js
                function (element, cell, row) {
                  hx.select(element).text(cell);
                }
            @arg element [HTMLElement]: The element that is being populated.
            @arg cell [Object]: The data for the cell.
            @arg row [Object]: The entire row object.

          @property collapsibleRenderer [Function]: A function for rendering collapsibles. For rows to be collapsible, this function must be provided.
            @arg element [HTMLElement]: The collapsible content that is being populated.
            @arg row [Object]: The entire row object

          @property columns [Object]
            @description
              An object that allows the setting of column specific renderers as well as the ability to disable sorting for a specific column.
              To set a one of the options for a column, an object can be defined:
              @@codeblock js
                {
                  "columnid": {
                    sortEnabled: true,
                    cellRenderer: function (element, cell, row) {
                      hx.select(element).text(cell);
                    }
                  }
                }
              Columns will use the default options if a column specific value is not provided.
            @property allowHeaderWrap [Boolean]: Column specific version of the allowHeaderWrap option
            @property sortEnabled [Boolean]: Column specific version of the sortEnabled option
            @property cellRenderer [Function]: Column specific version of the cellRenderer option
              @arg element [HTMLElement]: The element that is being populated.
              @arg cell [Object]: The data for the cell.
              @arg row [Object]: The entire row object.
            @property headerCellRenderer [Function]: Column specific version of the headerCellRenderer option
              @arg element [HTMLElement]: The element that is being populated.
              @arg cell [Object]: The data for the cell.
              @arg headers [Object]: The entire headers object.

          @property compact [String/Boolean]
            @description
              A value to determine whether compact mode should be enabled.
              There are three possible values:
              @ul
                @li: 'auto': Detect the size of the window and switch between compact and standard modes automatically.
                @li: true: Always use compact mode
                @li: false: Always use standard mode.
            @default: 'auto'

          @property displayMode [String]:
            @description
              A string to determine what display mode the table should use.
              There are currently two possible values:
              @ul
                @li: 'paginate': show a single page at a time with a pagination option.
                @li: 'all': Show all the rows on a single page.
            @default: 'paginate'

          @property feed [Feed]
            @description: The feed to use when creating the table. See the @code[Feed] and @code[hx.dataTable] objects for information on feeds.

          @property filter [String]: The filter to apply when creating the table

          @property filterEnabled [Boolean]: A boolean to determine whether filtering should be enabled.
            @default: true

          @property headerCellRenderer [Function]: A function for rendering header cells.
            @arg element [HTMLElement]: The element that is being populated.
            @arg cell [Object]: The data for the cell.
            @arg headers [Object]: The entire headers object.
            @default
              @@codeblock js
                function (element, cell, headers) {
                  hx.select(element).text(cell.name);
                }

          @property noDataMessage [String]: A string that is displayed when there is no data in the table.
            @default: ['No Data']

          @property pageSize [Number]: A number to determine how many rows should be shown on a page.
            @default: 15

          @property pageSizeOptions [Array[Number]]
            @description
              An array of numbers to determine the page sizes that can be selected by the user.
              If a value is provided, a dropdown is shown to allow the user to change the rows displayed on a page.

          @property retainHorizontalScrollOnRender [Boolean]: A boolean to determine whether the horizontal scroll should be retained when re-rendering the current page of data.
            @default: true

          @property retainVerticalScrollOnRender [Boolean]: A boolean to determine whether the vertical scroll should be retained when re-rendering the current page of data.
            @default: false

          @property rowCollapsibleLookup [Function]: A function for determining whether a row has a collapsible.
            @default
              @@codeblock js
                function (row) {
                  return false;
                }
            @arg row [Object]: The data for the current row.
            @returns Boolean: Whether the row should have a collapsible

          @property rowEnabledLookup [Function]: A function for determining whether a row should be visually disabled and prevented from being selected.
            @default
              @@codeblock js
                function (row) {
                  return !row.disabled;
                }
            @arg row [Object]: The data for the current row.
            @returns Boolean: Whether the row should be disabled. True means that the row should be enabled, false means it should be disabled.

          @property rowIDLookup [Function]: Gets the unique id for a row.
            @default
              @@codeblock js
                function (row) {
                  return row.id;
                }
              This could be changed to use one of the column values as the id (providing it is unique across all the data in the table)
            @arg row [Object]: The data for the current row.
            @returns String: The id of the row provided

          @property rowSelectableLookup [Function]: A function for determining whether a row can be selected at the time it is clicked.
            @default
              @@codeblock js
                function (row) {
                  return true;
                }
            @arg row [Object]: The data for the current row.
            @returns Boolean: Whether the row can be selected.

          @property selectEnabled [Boolean]: A boolean to determine whether the selection of rows should be enabled.
            @default: false

          @property singleSelection [Boolean]
            @description
              A boolean to determine whether the table should be in single select mode.
              This mode only allows one row to be selected at a time.
              @code[selectEnabled] must also be true for this to take effect.
            @default: false

          @property sort [Object]: The sort to apply when creating the table. No sorting is applied by default
            @property column [String]: The column id to sort on
            @property direction [String]
              @description: The sort direction. Can be either @code['asc'] or @code['desc']

          @property sortEnabled [Boolean]
            @description: A boolean to determine whether sorting should be enabled. This can also be set on a per-column basis using the @code[columns] option.
            @default: true


      # Methods for changing the options
      # --------------------------------

      @group Options
        @description
          These methods are for getting/setting the value of the options available on data tables.
          For more information about what each option controls and the values they can be set to, see the options parameter of the DataTable constructor.

        @method collapsibleRenderer
          @description: Gets the collapsibleRenderer option
          @returns Function: The collapsibleRenderer option

        @method collapsibleRenderer
          @description: Sets the collapsibleRenderer option
          @arg value [Function]: The value for the collapsibleRenderer option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method compact
          @description: Gets the compact option
          @returns Boolean: The compact option

        @method compact
          @description: Sets the compact option
          @arg value [Boolean]: The value for the compact option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method displayMode
          @description: Gets the displayMode option
          @returns String: The displayMode option

        @method displayMode
          @description: Sets the displayMode option
          @arg value [String]: The value for the displayMode option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method feed
          @description: Gets the feed option
          @returns Object: The feed option

        @method feed
          @description: Sets the feed option
          @arg value [Object]: The value for the feed option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method filter
          @description: Gets the filter option
          @returns String: The filter option

        @method filter
          @description: Sets the filter option
          @arg value [String]: The value for the filter option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method filterEnabled
          @description: Gets the filterEnabled option
          @returns Boolean: The filterEnabled option

        @method filterEnabled
          @description: Sets the filterEnabled option
          @arg value [Boolean]: The value for the filterEnabled option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method noDataMessage
          @description: Gets the noDataMessage option
          @returns String: The noDataMessage option

        @method noDataMessage
          @description: Sets the noDataMessage option
          @arg value [String]: The value for the noDataMessage option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method pageSize
          @description: Gets the pageSize option
          @returns Number: The pageSize option

        @method pageSize
          @description: Sets the pageSize option
          @arg value [Number]: The value for the pageSize option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method pageSizeOptions
          @description: Gets the pageSizeOptions option
          @returns [Array[Number]]: The pageSizeOptions option

        @method pageSizeOptions
          @description: Sets the pageSizeOptions option
          @arg value [Array[Number]]: The value for the pageSizeOptions option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method retainHorizontalScrollOnRender
          @description: Gets the retainHorizontalScrollOnRender option
          @returns Boolean: The retainHorizontalScrollOnRender option

        @method retainHorizontalScrollOnRender
          @description: Sets the retainHorizontalScrollOnRender option
          @arg value [Boolean]: The value for the retainHorizontalScrollOnRender option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method retainVerticalScrollOnRender
          @description: Gets the retainVerticalScrollOnRender option
          @returns Boolean: The retainVerticalScrollOnRender option

        @method retainVerticalScrollOnRender
          @description: Sets the retainVerticalScrollOnRender option
          @arg value [Boolean]: The value for the retainVerticalScrollOnRender option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method rowCollapsibleLookup
          @description: Gets the rowCollapsibleLookup option
          @returns Function: The rowCollapsibleLookup option

        @method rowCollapsibleLookup
          @description: Sets the rowCollapsibleLookup option
          @arg value [Function]: The value for the rowCollapsibleLookup option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method rowEnabledLookup
          @description: Gets the rowEnabledLookup option
          @returns Function: The rowEnabledLookup option

        @method rowEnabledLookup
          @description: Sets the rowEnabledLookup option
          @arg value [Function]: The value for the rowEnabledLookup option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method rowIDLookup
          @description: Gets the rowIDLookup option
          @returns Function: The rowIDLookup option

        @method rowIDLookup
          @description: Sets the rowIDLookup option
          @arg value [Function]: The value for the rowIDLookup option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method rowSelectableLookup
          @description: Gets the rowSelectableLookup option
          @returns Function: The rowSelectableLookup option

        @method rowSelectableLookup
          @description: Sets the rowSelectableLookup option
          @arg value [Function]: The value for the rowSelectableLookup option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method selectEnabled
          @description: Gets the selectEnabled option
          @returns Boolean: The selectEnabled option

        @method selectEnabled
          @description: Sets the selectEnabled option
          @arg value [Boolean]: The value for the selectEnabled option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method singleSelection
          @description: Gets the singleSelection option
          @returns Boolean: The singleSelection option

        @method singleSelection
          @description: Sets the singleSelection option
          @arg value [Boolean]: The value for the singleSelection option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


        @method sort
          @description: Gets the sort option
          @returns Object: The sort option

        @method sort
          @description: Sets the sort option
          @arg value [Object]: The value for the sort option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable

        @method allowHeaderWrap
          @description: Gets the allowHeaderWrap option
          @returns Boolean: The allowHeaderWrap option

        @method allowHeaderWrap
          @description: Sets the allowHeaderWrap option
          @arg value [Boolean]: The value for the allowHeaderWrap option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable

        @method allowHeaderWrap
          @description: Gets the allowHeaderWrap value for a column of the table if one has been set.
          @arg column [String]: The id of the column to get the allowHeaderWrap value for
          @returns Boolean: The allowHeaderWrap option for the column

        @method allowHeaderWrap
          @description: Sets the allowHeaderWrap value for a column of the table
          @arg column [String]: The id of the column to set the allowHeaderWrap value for
          @arg value [Boolean]: The value to set
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable

        @method cellRenderer
          @description: Gets the cellRenderer option
          @returns Function: The cellRenderer option

        @method cellRenderer
          @description: Sets the cellRenderer option
          @arg value [Function]: The value for the cellRenderer option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable

        @method cellRenderer
          @description: Gets the cellRenderer value for a column of the table if one has been set.
          @arg column [String]: The id of the column to get the cellRenderer value for
          @returns Function: The cellRenderer option for the column

        @method cellRenderer
          @description: Sets the cellRenderer value for a column of the table
          @arg column [String]: The id of the column to set the cellRenderer value for
          @arg value [Function]: The value to set
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable

        @method headerCellRenderer
          @description: Gets the headerCellRenderer option
          @returns Function: The headerCellRenderer option

        @method headerCellRenderer
          @description: Sets the headerCellRenderer option
          @arg value [Function]: The value for the headerCellRenderer option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable

        @method headerCellRenderer
          @description: Gets the headerCellRenderer value for a column of the table if one has been set.
          @arg column [String]: The id of the column to get the headerCellRenderer value for
          @returns Function: The headerCellRenderer option for the column

        @method headerCellRenderer
          @description: Sets the headerCellRenderer value for a column of the table
          @arg column [String]: The id of the column to set the headerCellRenderer value for
          @arg value [Function]: The value to set
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable

        @method sortEnabled
          @description: Gets the sortEnabled option
          @returns Boolean: The sortEnabled option

        @method sortEnabled
          @description: Sets the sortEnabled option
          @arg value [Boolean]: The value for the sortEnabled option
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable

        @method sortEnabled
          @description: Gets the sortEnabled value for a column of the table if one has been set.
          @arg column [String]: The id of the column to get the sortEnabled value for
          @returns Boolean: The sortEnabled option for the column

        @method sortEnabled
          @description: Sets the sortEnabled value for a column of the table
          @arg column [String]: The id of the column to set the sortEnabled value for
          @arg value [Boolean]: The value to set
          @arg? callback [Function]: The function to call once rendering is complete
          @returns DataTable: This DataTable


      # Methods for changing the state of the table
      # -------------------------------------------

      @method page
        @description: Gets the current page
        @returns Number: The currently selected page

      @method page
        @description: Sets the current page
        @arg value [Number]: The current page to set
        @arg? callback [Function]: The function to call once rendering is complete
        @returns DataTable: This DataTable


      @method selectedRows
        @description: Gets the selected rows
        @returns value [Array[String]]: The array of selected row ids

      @method selectedRows
        @description: Sets the selected rows
        @arg value [Array[String]]: The array of row ids to set as selected
        @arg? callback [Function]: The function to call once rendering is complete
        @returns DataTable: This DataTable


      @method expandedRows
        @description: Gets the expanded rows
        @returns value [Array[String]]: The array of expanded row ids

      @method expandedRows
        @description: Sets the expanded rows
        @arg value [Array[String]]: The array of row ids to set as expanded
        @arg? callback [Function]: The function to call once rendering is complete
        @returns DataTable: This DataTable


      @method rowsForIds
        @description: Converts row ids to row objects using the table's data feed.
        @arg ids [Array[String]]: The array of row ids to get from the data
        @arg callback [Function]: The function to call once the rows have been retrieved
          @arg rows [Array[Object]]: The array of row objects returned from the feed



      # Methods that perform an action on the table
      # -------------------------------------------

      @method suppressRender
        @description: Gets the suppressed state of the table.
        @returns Boolean: Whether the table is suppressed

      @method suppressRender
        @description: A method for preventing the render from changing anything until unsuppressed.
        @arg suppress [Boolean]: Whether to suppress the render.
        @returns DataTable: This DataTable


      @method render
        @description: Renders the table.
        @arg? callback [Function]: The function to call once rendering is complete
        @returns DataTable: This DataTable

      @method on
        @description: Register a function that should be called every time an event of the given name happens.
        @arg name [String]: The event type to listen out for
        @arg callback [Function]
          @description: The function to call when an event occurs.
          @arg data [Any]: The data sent along with the event (if any)

        @event selectedrowschange [Object]
          @description: Emitted when a row is selected or deselected.
          @property value [Array[String]]: The selected rows (a list of ids).
          @property? row [Object]: The row that was selected (if this event was caused by the user clicking on the row check)
          @property? rowValue [Boolean]: Whether or not the row that was clicked on is now selected (if this event was caused by the user clicking on the row check)
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event selectedrowsclear
          @description: Emitted when the row selection is cleared by clicking on the 'clear selection' text.

        @event expandedrowschange [Object]
          @description: Emitted when a row is expanded or collapsed
          @property value [Array[String]]: The expanded rows (a list of ids).
          @property? row [Object]: The row that was expanded or collapsed (if this event was caused by the user clicking on the expand toggle)
          @property? rowValue [Boolean]: Whether or not the row that was clicked on is now expanded  (if this event was caused by the user clicking on the expand toggle)
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event rowclick [Object]
          @description: Emitted when a row is clicked. The data sent with the event is the row object for the row that was clicked

        @event render
          @description: Emitted when the table is rendered.

        @event pagechange [Object]
          @description: Emitted when the page is changed
          @property value [Any]: The selected page number, starting from 1.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means a call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event collapsiblerendererchange [Object]
          @description: Emitted when the collapsibleRenderer option is changed
          @property value [Any]: The value of the collapsibleRenderer option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event compactchange [Object]
          @description: Emitted when the compact option is changed
          @property value [Any]: The value of the compact option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting
          @property? mode [Boolean]: If the cause is 'user', and the value is 'auto', this value will contain the actual compact mode (it will be true for compact, false for desktop)

        @event displaymodechange [Object]
          @description: Emitted when the displayMode option is changed
          @property value [Any]: The value of the displayMode option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event feedchange [Object]
          @description: Emitted when the feed option is changed
          @property value [Any]: The value of the feed option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event filterchange [Object]
          @description: Emitted when the filter option is changed
          @property value [Any]: The value of the filter option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event filterenabledchange [Object]
          @description: Emitted when the filterEnabled option is changed
          @property value [Any]: The value of the filterEnabled option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event nodatamessagechange [Object]
          @description: Emitted when the noDataMessage option is changed
          @property value [Any]: The value of the noDataMessage option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event pagesizechange [Object]
          @description: Emitted when the pageSize option is changed
          @property value [Any]: The value of the pageSize option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event pagesizeoptionschange [Object]
          @description: Emitted when the pageSizeOptions option is changed
          @property value [Any]: The value of the pageSizeOptions option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event retainhorizontalscrollonrenderchange [Object]
          @description: Emitted when the retainHorizontalScrollOnRender option is changed
          @property value [Any]: The value of the retainHorizontalScrollOnRender option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event retainverticalscrollonrenderchange [Object]
          @description: Emitted when the retainVerticalScrollOnRender option is changed
          @property value [Any]: The value of the retainVerticalScrollOnRender option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event rowcollapsiblelookupchange [Object]
          @description: Emitted when the rowCollapsibleLookup option is changed
          @property value [Any]: The value of the rowCollapsibleLookup option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event rowenabledlookupchange [Object]
          @description: Emitted when the rowEnabledLookup option is changed
          @property value [Any]: The value of the rowEnabledLookup option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event rowidlookupchange [Object]
          @description: Emitted when the rowIDLookup option is changed
          @property value [Any]: The value of the rowIDLookup option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event rowselectablelookupchange [Object]
          @description: Emitted when the rowSelectableLookup option is changed
          @property value [Any]: The value of the rowSelectableLookup option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event selectenabledchange [Object]
          @description: Emitted when the selectEnabled option is changed
          @property value [Any]: The value of the selectEnabled option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event singleselectionchange [Object]
          @description: Emitted when the singleSelection option is changed
          @property value [Any]: The value of the singleSelection option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event sortchange [Object]
          @description: Emitted when the sort option is changed
          @property value [Any]: The value of the sort option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event allowheaderwrapchange [Object]
          @description: Emitted when the allowHeaderWrap option is changed
          @property value [Any]: The value of the allowHeaderWrap option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event cellrendererchange [Object]
          @description: Emitted when the cellRenderer option is changed
          @property value [Any]: The value of the cellRenderer option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event headercellrendererchange [Object]
          @description: Emitted when the headerCellRenderer option is changed
          @property value [Any]: The value of the headerCellRenderer option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event sortenabledchange [Object]
          @description: Emitted when the sortEnabled option is changed
          @property value [Any]: The value of the sortEnabled option.
          @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @returns DataTable: This DataTable


    # Data / Feed related docs
    # ------------------------

    @object Feed
      @description
        A feed is the type of object used by a data table to get the data for display.
        A feed should be an object with the following functions:
        @@codeblock js
          {
            headers: function (cb) { ... }
            totalCount: function (cb) { ... }
            rows: function (range, cb) { ... }
            rowsForIds: function (ids, cb) { ... }
          }
        There are predefined feeds for objects and urls in the @code[hx.dataTable] object.
        A data table expects data to be returned in the callback of each function with a specific value.
        If a custom feed is created, it must return the values expected by the table.

      @function headers: A function to get a list of header objects
        @arg callback [Function]: The function to call once the data has been retrieved.
          @arg data [Array[Object]]
            @description
              The headers for a data set. The data is expected in the following format:
              @@codeblock js
                [
                  {
                    name: 'columnName', // The name for the heading to display in the table
                    id: 'columnID' // The unique ID for the column
                  },
                  ... // Additional headers
                ]

      @function totalCount: A function to get the total number of rows in the data set.
        @arg callback [Function]: The function to call once the data has been retrieved.
          @arg data [Number]: The total number of rows. This can be undefined if you don't know the total number of rows in the data set.

      @function rows: A function to get the row data for the range object specified along with the filtered count
        @arg range [Object]
          @description
            The range to get the rows for. An example object can be seen below:
            @@codeblock js
              {
                start: 0,
                end: 14,
                filter: "",
                sort: {
                  column: 'name'
                  direction: 'desc'
                }
              }
            The above example would be expected to return the first 15 rows of data, sorted by the 'name' column in descending order.
          @property start [Number]: The start of the range. Might be undefined if the all displayMode is used.
          @property end [Number]: The end of the range. Might be undefined if the all displayMode is used.
          @property sort [Object]: The sort being used.
            @property column [String]: The column being sorted. Can be a column id or @code[undefined] indicating no sort.
            @property direction [String]: The sort direction. Can be "asc", "desc" or undefined.
          @property filter [String]: The filter being used.

        @arg callback [Function]: The function to call once the data has been retrieved.
          @arg data [Object]
            @property filteredCount [Number]: The number of filtered rows
            @property rows [Array[Object]]
              @description
                The rows for a range of the data set. The data is expected in the following format:
                @@codeblock js
                  [
                    {
                      id: 0, // The ID for a row
                      // hidden details can be specified here (not in the cells object)
                      cells: {
                        'columnID': 'value' // The cell values for a row in columnID/value pairs
                      }
                    },
                    ... // Additional rows
                  ]
                A cell value must be provided for each column id for every row

      @function rowsForIds
        @description
          Gets the rows for an array of id's in the data.
          This is used when @code[DataTable::rowsForIds] is called.
        @arg ids [Array[String]]: The array of row id's to lookup.
        @arg lookupRow [Function]: The row id lookup function for the table
        @arg callback [Function]: The function to call once the data has been retrieved.
          @arg data [Array[Object]]: The array of row data retrieved from the id lookup



    @object hx.dataTable
      @description
        An object containing the default Feed object constructors.
        See the Using Feeds section for more information about using and creating Feeds.

      @function objectFeed
        @description:
          The default feed object for using object based data

        @arg data [Object]
          @description
            The data to use in the feed.
            The data is expected in the following format:

            @@codeblock js
              {
                headers: [
                  { name: 'Name', id: 'name' },
                  ... // Additional Headers
                ],
                rows: [
                  {
                    // hidden details can go here (not in the cells object)
                    id: 0,
                    cells: {
                      'name': 'Bob',
                      ... // Additional cell data (each header should have linked cell data for each row)
                    }
                  },
                  ... // Additional Rows
                ]
              }

        @arg? options [Object]: The options to use in the feed.
          @property filter [Function]
            @description
              Determines if the row should be included in the filtered data set.
              The default filter function just checks for inclusion of the search term in any of the cell's text.
            @arg term [String]: The search term
            @arg row [Object]: The row data
            @default
              @@codeblock js
                function (term, row) {
                  var rowSearchTerm = Object.keys(row.cells).map(function (key) { return row.cells[key]}).join(' ').toLowerCase()
                  term = term.toLowerCase.split(' ');
                  for (var i in term) {
                    var part = term[i];
                    if (rowSearchTerm.indexOf(part) === -1) {
                      return false
                    }
                  }
                  return false
                }

          @property compare [Function]
            @description: The compare function used to sort the rows.
            @arg cell1 [String]: The first cell value to compare
            @arg cell2 [String]: The second cell value to compare
            @default
              @@codeblock js
                function (cell1, cell2) {
                  return (cell1 > cell2 ? 1 : -1)
                }
            @returns Number: -1 if cell1 should be ordered before cell2, 0 if it is the same, +1 if it should be ordered after cell2

        @returns Feed: A feed object. See the @code[Feed] object for more information on what a feed contains.


      @function urlFeed
        @description
          Creates a url fee using the provided url. The feed will then make requests to retrieve the various chunks of data as they are required.

        @arg url [String]: The url to use in the feed.
        @arg? options [Object]: The options to use in the feed.
          @property extra [Any]: Extra information to pass through to the requests made for data. This can be useful for identifying the table, or providing extra options when requesting data from the server.
          @property cache [Boolean]: Whether or not to cache values in memory - if you always want fresh data, this should be set to false.
            @default: false

        @returns Feed: A feed object. See the @code[Feed] object for more information on what a feed contains.



  @extra
    @h1 .docs-module-section: Using Feeds

    Data tables contain multiple options for displaying the data, as well as flexibility in how the data is provided.
    There are two functions that are available for creating feeds, however custom feeds can also be created.

    @section Using hx.dataTable.objectFeed
      An object feed expects the data to be provided as a whole when the feed is created.
      The below code shows a basic use of the object feed.
      @@codeblock js
        var tableData = {
          headers: [
            { name: 'Name', id: 'name' },
            { name: 'Age', id: 'age' },
            { name: 'Profession', id: 'profession' }
          ],
          rows: [
            {
              id: 0,
              cells: { 'name': 'Bob', 'age': 25, 'profession': 'Developer' }
            },
            {
              id: 1,
              cells: { 'name': 'Jan', 'age': 41, 'profession': 'Artist' }
            },
            {
              id: 2,
              cells: { 'name': 'Dan', 'age': 41, 'profession': 'Builder' }
            }
          ]
        }
        var table = new hx.DataTable('#selector')
        table.feed(hx.dataTable.objectFeed(tableData))

      Alternatively, if the data is returned from a URL request, it can be set as follows:
      @@codeblock js
        hx.json('path_to_your_request.file', function(err, data){
          if (!err) table.feed(hx.dataTable.objectFeed(tableData));
        })

      The object feed handles the sorting and filtering of the data internally making it the preferred choice for small or static data sets.


    @section Using hx.dataTable.urlFeed
      A url feed expects a single url to handle multiple requests and return different types of data.
      They can be created using:
      @@codeblock js
        hx.dataTable.urlFeed('request_url', {
          cache: true, // Whether to attempt caching of data
          extra: // Any extra data to be sent with every request
        })
      There are four different request types made by the url feed, all of which will be @code[POST] requests:

      @h4: headers
      @@codeblock js
        {
          type: 'headers',
          extra: // As defined in the options
        }
      The data returned should be in the following format:
      @@codeblock js
        [
          {
            "name": "columnName", // The name for the heading to display in the table
            "id": "columnID" // The unique ID for the column
          },
          ... // Additional headers
        ]

      @h4: totalCount
      @@codeblock js
        {
          type: 'totalCount',
          extra: // As defined in the options
        }
      The data returned should be in the following format:
      @@codeblock js
        {
          "count": 123 // The total number of rows in the data set
        }
      If the total is unknown, this can return undefined.

      @h4: rows
      The URL feed expects the server to perform any sorting/filtering as part of the 'rows' request.
      @@codeblock js
        {
          type: 'rows',
          range: {
            start: 0, // The start index to get
            end: 14, // The end index to get
            sort: {
              column: undefined, // the sort column
              direction: undefined // The sort direction
            },
            filter: undefined // The current filter.
          }
          extra: // As defined in the options
        }
      The data returned should be in the following format:
      @@codeblock js
        {
          "filteredCount": 10, // The number of rows in the filtered set
          "rows": [
            {
              "id": 0, // The ID for a row
              // hidden details can be specified here (not in the cells object)
              "cells": {
                "columnID": "value" // The cell values for a row in columnID/value pairs
              }
            },
            ... // Additional rows
          ]
        }

      @h4: rowsForIds
      @@codeblock js
        {
          type: 'rowsForIds',
          ids: [1, 2, 3] // The array of ids to get row data for
          extra: // As defined in the options
        }
      The data returned should be in the following format:
      @@codeblock js
        [
          {
            "id": 0, // The ID for a row
            // hidden details can be specified here (not in the cells object)
            "cells": {
              "columnID": "value" // The cell values for a row in columnID/value pairs
            }
          },
          ... // Additional rows
        ]

    @section Creating a custom feed
      In situations where the feeds provided in the @code[hx.dataTable] object are not suitable, custom feeds can be created.
      For instance, if using @code[POST] is not suitable, an alternative could be created:

      @@codeblock js
        // Serializes an object into param=value&param[child]=value
        function serialize (obj, prefix) {
          var arr = []
          for (var p in obj) {
            if (obj.hasOwnProperty(p)) {
              var k = prefix ? prefix + '[' + p + ']' : p, v = obj[p]
              arr.push(typeof v == 'object' ?
                serialize(v, k) :
                encodeURIComponent(k) + '=' + encodeURIComponent(v))
            }
          }
          return arr.join('&')
        }

        function createCustomURLFeed (url) {
          var fetcher = function (data, cb) {
            // Serializes the data so it can be passed over as a GET request
            hx.json(url + '?' + serialize(data), function (err, data) { cb(data) })
          }

          // Return the feed object with headers, rows, rowsForIds and totalCount properties
          return {
            headers: function (cb) {
              fetcher({ type: 'headers' }, cb)
            },
            rows: function (range, cb) {
              fetcher({ type: 'rows', range: range }, cb)
            },
            rowsForIds: function (ids, lookupRow, cb) {
              fetcher({ type: 'rowsForIds', ids: ids }, cb)
            },
            totalCount: function (cb) {
              fetcher({ type: 'totalCount' }, cb)
            }
          }
        }


    @h1 .docs-module-section: Additional options
    As well as the options available on the data table prototype, there are a few extra options when setting the data that can change the table behaviour by default.

    @section Multi column / grouped headers
      It is possible to add grouping to headers by specifying a @code[columns]

      @@codeblock js
        {
          headers:[
            { id: 'name', name: 'Name', groups: ['Group 1']},
            { id: 'age', name: 'Age' },
            { id: 'gender', name: 'Gender', groups: ['Group 2']},
            { id: 'dob', name: 'Date of Birth', groups: ['Group 2']},
            { id: 'salary', name: 'Salary (£)', groups: ['Group 2']}
          ],
          rows: [
            //...
          ]
        }

    @section Wrapping header text for indivual columns
      It is possible to override the @code[allowHeaderWrap] option for an individual column by providing the @code[allowWrap] property in the header colums:
      @@codeblock js
        {
          headers:[
            { id: 'name', name: 'Name' },
            { id: 'age', name: 'Age' },
            { id: 'gender', name: 'Gender' },
            { id: 'dob', name: 'Date of Birth' allowWrap: true },
            { id: 'salary', name: 'Salary (£)' }
          ],
          rows: [
            //...
          ]
        }

    @section Disabling rows
      When a row is rendered, the @code[rowEnabledLookup] function is called. If it returns false, the row will visually disabled and unselectable.
      By default, a row can be made unselectable using a property in the row object:
      @@codeblock js
        [
          {
            id: 'rowId',
            disabled: true,
            cells: {
              ...// Row data
            }
          },
          ... // Additional rows
        ]
      This does not disable row collapsibles.

    @section Making Rows unselectable
      When a row is selected, the @code[rowSelectableLookup] function is called to check whether the row is selectable. If it returns false, the row will not be selected.
      By default, the @code[rowSelectableLookup] function allows all rows to be selected. However, by setting the @code[rowSelectableLookup], the row can be made unselectable:
      @@codeblock js
        dataTable.rowSelectableLookup(function (row) {
          return !row.unselectable;
        })
      @@codeblock js
        [
          {
            id: 'rowId',
            unselectable: true,
            cells: {
              ...// Row data
            }
          },
          ... // Additional rows
        ]

  @theme
    @option header-cell-hover-background-col
      @description: The background color for header cells on hover
      @type color
      @default: [#F5F5F5]
    @option cell-border-col
      @description: The border color for cells
      @type color
      @default: [#E4E4E4]
    @option disabled-row-background-col
      @description: The background color for disabled rows
      @type color
      @default: [white]
    @option disabled-row-text-col
      @description: The text color for disabled rows
      @type color
      @default: [grey]
    @option no-data-row-background-col
      @description: The background color for the 'no data' row
      @type color
      @default: [transparent]
    @option no-data-row-text-col
      @description: The text color for the 'no data' row
      @type color
      @default: [black]
    @option selected-row-background-col
      @description: The background color for selected rows
      @type color
      @default: [#F7F6B8]
    @option status-bar-background-col
      @description: The background color for the status bar
      @type color
      @default: [#FFB800]
    @option status-bar-text-col
      @description: The text color for the status bar
      @type color
      @default: [white]
    @option row-collapsible-background-col
      @description: The background color for collapsible rows
      @type color
      @default: [white]
    @option row-collapsible-text-col
      @description: The text color for collapsible rows
      @type color
      @default: [black]
    @option compact-row-shadow-col
      @description: The shadow color for rows in compact mode
      @type color
      @default: [rgba(128, 128, 128, 0.25)]
    @option compact-row-hover-background-col
      @description: The background color for rows in compact mode when hovering
      @type color
      @default: [#FAFAFA]
    @option compact-row-hover-text-col
      @description: The text color for rows in compact mode when hovering
      @type color
      @default: [black]
    @option compact-row-background-col
      @description: The background color for rows in compact mode
      @type color
      @default: [white]
    @option compact-row-text-col
      @description: The text color for rows in compact mode
      @type color
      @default: [black]
    @option loading-background-col
      @description: The background color for the loading div
      @type color
      @default: [rgba(255, 255, 255, 0.4)]


  @seeAlso
