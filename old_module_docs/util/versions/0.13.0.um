@version 0.13.0
  @api Util
    @function hx.merge
      @arg retainUndefined [Boolean]
      @arg objects... [Object]
      @deprecated
        @alternate
          hx.merge(true, objects...) has been replaced with hx.merge(objects...)
          hx.merge(false, objects...) has been replaced with hx.merge.defined(objects...)

    @function hx.merge
      @added
      @description
        Merges multiple objects together, and returns the result as a new object.

        The objects will be merged recursively, and arrays will be cloned. Any object that is not a plain object (see the isPlainObject function) will be replaced with an empty object {}.

        @@codeblock js
          // returns {'a': 2, 'b': 3}
          hx.merge({'a': 1}, {'a': 2}, {'b': 3})

          // returns {a: {b: 'hello', c: {d: 4, e: 'value'}}}
          hx.merge({a: {b: 2, c: {d: 3}}}, {a: {b: 'hello', c: {d: 4, e: 'value'}}})

      @arg objects... [Object]: The objects to combine
      @returns Object: The combined object

    @function hx.merge.defined
      @added
      @description
        Merges multiple objects together, only copying across defined values and returns the result as a new object.

        The objects will be merged recursively, and arrays will be cloned. Any object that is not a plain object (see the isPlainObject function) will be replaced with an empty object {}.

        @@codeblock js
          // returns {'a': 1, 'b': 3}
          hx.merge.defined({'a': 1}, {'a': undefined}, {'b': 3})

          // returns {a: {b: 2, c: {d: 4, e: 'value'}}}
          hx.merge.defined({a: {b: 2, c: {d: 3}}}, {a: {b: undefined, c: {d: 4, e: 'value'}}})

      @arg objects... [Object]: The objects to combine
      @returns Object: The combined object

    @function hx.shallowMerge
      @arg retainUndefined [Boolean]
      @arg objects... [Object]
      @deprecated
        @alternate
          hx.shallowMerge(true, objects...) has been replaced with hx.shallowMerge(objects...)
          hx.shallowMerge(false, objects...) has been replaced with hx.shallowMerge.defined(objects...)

    @function hx.shallowMerge
      @added
      @description
        Merges multiple objects together where the first level of references are copied, and returns the result as a new object.

        @@codeblock js
          // returns {'a': 2, 'b': 3}
          hx.shallowMerge({'a': 1}, {'a': 2}, {'b': 3})

          // returns {a: {b: 'hello', c: {d: 4, e: 'value'}}}
          hx.shallowMerge({a: {b: 2, c: {d: 3}}}, {a: {b: 'hello', c: {d: 4, e: 'value'}}})

      @arg objects... [Object]: The objects to combine
      @returns Object: The combined object

    @function hx.shallowMerge.defined
      @added
      @description
        Merges multiple objects together where the first level of references are copied provided they are defined values (not undefined), and returns the result as a new object.

        @@codeblock js
          // returns {'a': 1, 'b': 3}
          hx.shallowMerge.defined({'a': 1}, {'a': undefined}, {'b': 3})

          // returns {a: {b: undefined, c: {d: 4, e: "value" }}}
          hx.shallowMerge.defined({a: {b: 2, c: {d: 3}}}, {a: {b: undefined, c: {d: 4, e: 'value'}}})

      @arg objects... [Object]: The objects to combine
      @returns Object: The combined object

    @function hx.isBoolean
      @description:
        Returns true if the value passed in is a boolean

        @@codeblock js
          hx.isBoolean("i am a string")                // returns false
          hx.isBoolean({})                             // returns false
          hx.isBoolean(document.createElement('div'))  // returns false
          hx.isBoolean([])                             // returns false
          hx.isBoolean(123)                            // returns false
          hx.isBoolean(function(){})                   // returns false
          hx.isBoolean(true)                           // returns true
          hx.isBoolean(false)                          // returns true

      @arg value [Any]: The value to check
      @returns Boolean: True if the value is a boolean. False if not
