@version 0.15.2

  @examples
    @example
      @html
        <div id="graph" class="graph-example hx-margin"></div>
      @js
        @inline 0.15.2/example.js
      @css
        .graph-example {
          height: 400px;
        }

  @api Plot
    @condensed

    @info [If your code makes use of undocumented api you should be aware of the following:]
      @list
        @item: The undocumented Series.data property has been changed to a public method.

    @enhancement Plot now uses a new mechanism for displaying the hover labels
      @p: Previously they were rendered in svg, which made them inflexible and limited them to displaying within the plot area. The new version uses floating divs which makes them easer to define and allows them to be displayed outside the plot area.
      @p: This is something that is needed for the new Sparkline api, which is a simple wrapper around the Graph api for drawing tiny graphs. Series now have a labelRenderer method for setting custom labelRenderers. This matches the renderer pattern used throughout hexagon.

    @docs: Updated the handbook to use the new api.

    @prototype hx.Sparkline
      @description: A function for creating a small, inline graph with with no visible axes or ticks.
      @constructor
        @description
        @arg selector [HTMLElement/String]: An HTMLElement or CSS selector which selects the graph's container.
        @arg? options [Object]: The options to use when creating the sparkline
          @property type [String]: The type of sparkline to create. Can be 'bar' or 'line'
            @default: 'line'
          @property strokeColor [String]: The stroke color to use. This only affects the 'line' type.
          @property fillColor [String]: The fill color to use
          @property data [Array]:  An array of numbers - each number will be a data point in the sparkline.

      @method fillColor
        @description: Gets the currently set fill color
        @returns String: The currently set fill color

      @method fillColor
        @description: Sets the fill color as a CSS color string
        @arg value [String]: The color to set
        @returns Sparkline: This Sparkline

      @method strokeColor
        @description: Gets the currently set stroke color
        @returns String: The currently set stroke color

      @method strokeColor
        @description: Sets the stroke color as a CSS color string
        @arg value [String]: The color to set
        @returns Sparkline: This Sparkline

      @method data
        @description: Gets the currently set data
        @returns [Array[Number]]: The currently set data

      @method data
        @description: Sets the data
        @arg value [Array[Number]]: An array of numbers - each number will be a data point in the sparkline.
        @returns Sparkline: This Sparkline

      @method render
        @description: Renders the sparkline
        @returns Sparkline: This Sparkline

    @function hx.plot
      @deprecated: The standard api provides a more declarative way of constructing graphs via the options object, so this api is no longer needed.
      @arg selector [String/HTMLElement]: A css selector or HTMLElement that uniquely identifies the container within the page.
      @arg description [Object]

    @prototype hx.Graph

      @constructor
        @removed: A new constructor has been added with an optional options object in place of this. If not using the options object, the existing way of creating a graph with @code(js)[new hx.Graph(selector)] will still work
        @arg selector [HTMLElement/String]

      @constructor
        @arg selector [HTMLElement/String]
          @description: An HTMLElement or CSS selector which selects the graph's container.
        @arg? options [Object]

          @property zoomRangeStart [Number]
            @description: Sets the start of the zoomed region - specified on the 0 to 1 scale where 0 is the left-most value on the x axis, and 1 means the right-most value of the x axis (setting it to 1 will always result in the graph showing nothing).
            @default: 0

          @property zoomRangeEnd [Number]
            @description: Sets the end of the zoomed region - specified on the 0 to 1 scale where 0 is the left-most value on the x axis, and 1 means the right-most value of the x axis (setting it to 1 will always result in the graph showing nothing).
            @default: 1

          @property zoomEnabled [Boolean]
            @description: Enables or disables the zoom with mouse feature. Supplying true enables zoom, false disables it.
            @default: false

          @property labelsEnabled [Boolean]
            @description: Enables or disables labels. Supplying true enables zoom, false disables it.
            @default: true

          @property legendEnabled [Boolean]
            @description: Enables or disables the legends. Supplying true enables zoom, false disables it.
            @default: true

          @property legendLocation [String]
            @description
              @p: How to display the legend on the graph. Possible modes:

              @list
                @item: 'auto' - moves the legend around to avoid the mouse
                @item: 'hover' - same as auto, but only displays the legend on mouse hover
                @item: 'top-right' - displays the legend in the top right
                @item: 'top-left' - displays the legend in the top left
                @item: 'bottom-right' - displays the legend in the bottom right
                @item: 'bottom-left' - displays the legend in the bottom left
            @default: "auto"

      @property zoomStart [Number]
        @deprecated: Use graph.zoomRangeStart() instead. zoomRangeStart(value) to set, zoomRangeStart() to get.

      @property zoomEnd [Number]
        @deprecated: Use graph.zoomRangeEnd() instead. zoomRangeEnd(value) to set, zoomRangeEnd() to get.

      @property useZoom [Boolean]
        @deprecated: Use graph.zoomEnabled() instead. zoomEnabled(value) to set, zoomEnabled() to get.

      @property useLabels [Boolean]
        @deprecated: Use graph.labelsEnabled() instead. labelsEnabled(value) to set, labelsEnabled() to get.

      @property useLegend [Boolean]
        @deprecated: Use graph.legendEnabled() instead. legendEnabled(value) to set, legendEnabled() to get.

      @property legendPosition [String]
        @deprecated: Use graph.legendLocation() instead. legendLocation(value) to set, legendLocation() to get.

      @method zoomRangeStart
        @description: Sets the start of the zoomed region - specified on the 0 to 1 scale where 0 is the left-most value on the x axis, and 1 means the right-most value of the x axis (setting it to 1 will always result in the graph showing nothing).
        @arg value [Number]: A value between 0 and 1
        @returns Graph: This Graph

      @method zoomRangeStart
        @description: Gets the start of the zoomed region - specified on the 0 to 1 scale where 0 is the left-most value on the x axis, and 1 means the right-most value of the x axis (setting it to 1 will always result in the graph showing nothing).
        @returns Number

      @method zoomRangeEnd
        @description: Sets the end of the zoomed region - specified on the 0 to 1 scale where 0 is the left-most value on the x axis, and 1 means the right-most value of the x axis (setting it to 1 will always result in the graph showing nothing).
        @arg value [Number]: A value between 0 and 1
        @returns Graph: This Graph

      @method zoomRangeEnd
        @description: Gets the end of the zoomed region - specified on the 0 to 1 scale where 0 is the left-most value on the x axis, and 1 means the right-most value of the x axis (setting it to 1 will always result in the graph showing nothing).
        @returns Number

      @method zoomEnabled
        @description: Enables or disables the zoom with mouse feature. Supplying true enables zoom, false disables it.
        @arg value [Boolean]: Wheter or not zoom should be enabled; true for enabled, false for disabled.
        @returns Graph: This Graph

      @method zoomEnabled
        @description: Gets the value of the zoomEnabled option.
        @returns Boolean: True if zoom is enabled, false if it is disabled.

      @method labelsEnabled
        @arg value [Boolean]: Wheter or not labels should be enabled; true for enabled, false for disabled.
        @returns Graph: This Graph

      @method labelsEnabled
        @description: Gets the value of the labelsEnabled option.
        @returns Boolean: True if labels are enabled, false if disabled.

      @method legendEnabled
        @arg value [Boolean]: Wheter or the legend should be enabled; true for enabled, false for disabled.
        @returns Graph: This Graph

      @method legendEnabled
        @description: Gets the value of the legendEnabled option.
        @returns Boolean: True if legends are enabled, false if they are disabled.

      @method legendLocation
        @description
          @p: How to display the legend on the graph. Possible modes:

          @list
            @item: 'auto' - moves the legend around to avoid the mouse
            @item: 'hover' - same as auto, but only displays the legend on mouse hover
            @item: 'top-right' - displays the legend in the top right
            @item: 'top-left' - displays the legend in the top left
            @item: 'bottom-right' - displays the legend in the bottom right
            @item: 'bottom-left' - displays the legend in the bottom left

        @arg value [String]: One of the position modes from the list above.
        @returns Graph: This Graph

      @method legendLocation
        @description:
          @p: Gets the value of the legendLocation option. It should be one of the following:

          @list
            @item: 'auto' - moves the legend around to avoid the mouse
            @item: 'hover' - same as auto, but only displays the legend on mouse hover
            @item: 'top-right' - displays the legend in the top right
            @item: 'top-left' - displays the legend in the top left
            @item: 'bottom-right' - displays the legend in the bottom right
            @item: 'bottom-left' - displays the legend in the bottom left

        @returns String: The location

      @method axes
        @description: Gets the axes attached to the graph.
        @returns [Array[Axis]]: The list of Axis instances attached to the graph.

      @method axes
        @description: Sets the axes attached to the graph.
        @arg axes [Array[Axis]]: The list of Axis instances the graph should have.
        @returns Graph: This Graph

      @method addAxis
        @deprecated: Use @code(js)[graph.addAxis(options)] instead.
        @arg xScaleType [String]
        @arg yScaleType [String]
        @returns Axis

      @method addAxis
        @description: Creates a new axis with the options specified and adds it to the graph. Returns the new Axis instance.
        @arg? options [Object]
        @returns Axis

      @method removeAxis
        @arg axis [Axis]
        @returns Axis: The removed axis if it was removed, or undefined if it was not removed (because it was not a member of the graph)

      @method render
        @returns Graph: This Graph

    @prototype hx.Axis
      @bugfix: Fixed an issue with how the axes were being positioned for xAxisTickLabelPosition/yAxisTickLabelPosition


      @constructor
        @arg? xScaleType [String]
        @arg? yScaleType [String]
        @deprecated: Use @code(js)[hx.Axis(options)] instead.

      @constructor
        @description: Creates a new Axis instance. This should normally be done via graph.addAxis(options) instead.
        @arg? options [Object]
          @property x [Object]
            @property scaleType [String]
              @description: The scale type to use. Should be one of 'linear', 'discrete' or 'time'. 'discrete' should be used for bar charts, and 'linear' and 'time' for line graphs (in general). The 'time' scale type is similar to linear, but picks the ticks so that they align on sensible times.
              @default: 'linear'

            @property visible [Boolean]
              @description:
                @p: Sets the visibility state
                @p: Whether or not the x axis should be visible. The default is true.
              @default: true

            @property formatter [Function]
              @description:
                @p: The formatter is function that formats the strings that are displayed at the ticks of the axis. It is a function with first argument that will typically be a number (although it depends on the type of the values in your data), and should return a string. The default is hx.format.si(2), which uses SI notation for numbers, and passes strings through untouched.
              @arg value [Number]
              @returns String: The number formatted as a string.
              @default: hx.format.si

            @property tickRotation [Number]
              @description: Sets the rotation of the ticks in degrees.
              @default: 0

            @property min [Number/String]
              @description: Sets the minimum value the axis should show. If set to 'auto' the minimum value will calculated from the data in the series.
              @default: 'auto'

            @property max [Number/String]
              @description: Sets the maximum value the axis should show. If set to 'auto' the maximum value will calculated from the data in the series.
              @default: 'auto'

            @property discretePadding [Number]
              @description
                @p: Sets the discretePadding property
                @p: The padding between discrete values on the x axis. Should be a value between 0 and 1. This will affect anything that uses the band width of a tick (ie bar series). The default is 0.1, which results in reserving 10% of the band width for padding, resulting in separation of groups of bar series.
              @default: 0,1

            @property discreteLabels [Array[String]]
              @description
                @p: Sets the discreteLabels property
                @p: The set of labels to use for a discrete x axis. This is similar to setting the min and max in linear scale case. The default is 'auto', which will mean that the axis works out it's labels from the series data.
              @default: 'auto'

            @property tickSpacing [Number]
              @description: Sets the preferred spacing (in pixels) between ticks on the axis. The axis will do it's best to keep close to this value, but may use other spacing to ensure that other conditions can be met such as the min, max and having 'nice' vales at the ticks.
              @default: 50

            @property title [String]
              @description: Sets the title of the axis
              @default: ''

            @property scalePaddingMin [Number]
              @description: Sets the scalePaddingMin property
              @default: 0

            @property scalePaddingMax [Number]
              @description: Sets the padding to apply to the end of the axis domain. This option makes it possible to stop the series from touching the axes, if that is wanted. This value is a proportion of the data range, so 0.1 will add an extra 10% to the end of the domain. The default value is 0, which applies no padding.
              @default: 0

            @property ticksAll [Boolean]
              @description: Sets whether ticks should be shown for every data point.
              @default: false

            @property gridLines [Boolean]
              @description: Sets whether or not grid lines should be used for the axis ticks. True means the grid lines will be shown.
              @default: true

            @property nthTickVisible [Number]
              @description: Sets which ticks should display text. If set to 1, then every tick will have text. If set to 2 every other tick will display text. If set to 3, every third tick will show text. And so on..
              @default: 1

            @property axisTickLabelPosition [Boolean]
              @description
                @p: Sets the axisTickLabelPosi property
                @p: Allows positioning of the tick labels. The options are 'axis' or 'bottom'. 'axis' will cause the labels to stick to the axis, 'bottom' will cause the labels to stay at the bottom of the graph area.
              @default: 'bottom'

            @property showTicks [Boolean]
              @description: Sets the showTicks property. If true, the axis ticks (text and tick marker) will be visible, if false they will be hidden.
              @default: true

          @property y [Object]
            @property scaleType [String]
              @description: The scale type to use. Should be one of 'linear', 'discrete' or 'time'. 'discrete' should be used for bar charts, and 'linear' and 'time' for line graphs (in general). The 'time' scale type is similar to linear, but picks the ticks so that they align on sensible times.
              @default: 'linear'

            @property visible [Boolean]
              @description:
                @p: Sets the visibility state
                @p: Whether or not the x axis should be visible. The default is true.
              @default: true

            @property formatter [Function]
              @description:
                @p: The formatter is function that formats the strings that are displayed at the ticks of the axis. It is a function with first argument that will typically be a number (although it depends on the type of the values in your data), and should return a string. The default is hx.format.si(2), which uses SI notation for numbers, and passes strings through untouched.
              @arg value [Number]
              @returns String: The number formatted as a string.
              @default: hx.format.si

            @property tickRotation [Number]
              @description: Sets the rotation of the ticks in degrees.
              @default: 0

            @property min [Number/String]
              @description: Sets the minimum value the axis should show. If set to 'auto' the minimum value will calculated from the data in the series.
              @default: 'auto'

            @property max [Number/String]
              @description: Sets the maximum value the axis should show. If set to 'auto' the maximum value will calculated from the data in the series.
              @default: 'auto'

            @property discretePadding [Number]
              @description
                @p: Sets the discretePadding property
                @p: The padding between discrete values on the x axis. Should be a value between 0 and 1. This will affect anything that uses the band width of a tick (ie bar series). The default is 0.1, which results in reserving 10% of the band width for padding, resulting in separation of groups of bar series.
              @default: 0,1

            @property discreteLabels [Array[String]]
              @description
                @p: Sets the discreteLabels property
                @p: The set of labels to use for a discrete x axis. This is similar to setting the min and max in linear scale case. The default is 'auto', which will mean that the axis works out it's labels from the series data.
              @default: 'auto'

            @property tickSpacing [Number]
              @description: Sets the preferred spacing (in pixels) between ticks on the axis. The axis will do it's best to keep close to this value, but may use other spacing to ensure that other conditions can be met such as the min, max and having 'nice' vales at the ticks.
              @default: 50

            @property title [String]
              @description: Sets the title of the axis
              @default: ''

            @property scalePaddingMin [Number]
              @description: Sets the scalePaddingMin property
              @default: 0

            @property scalePaddingMax [Number]
              @description: Sets the padding to apply to the end of the axis domain. This option makes it possible to stop the series from touching the axes, if that is wanted. This value is a proportion of the data range, so 0.1 will add an extra 10% to the end of the domain. The default value is 0, which applies no padding.
              @default: 0

            @property ticksAll [Boolean]
              @description: Sets whether ticks should be shown for every data point.
              @default: false

            @property gridLines [Boolean]
              @description: Sets whether or not grid lines should be used for the axis ticks. True means the grid lines will be shown.
              @default: true

            @property nthTickVisible [Number]
              @description: Sets which ticks should display text. If set to 1, then every tick will have text. If set to 2 every other tick will display text. If set to 3, every third tick will show text. And so on..
              @default: 1

            @property axisTickLabelPosition [Boolean]
              @description
                @p: Sets the axisTickLabelPosi property
                @p: Allows positioning of the tick labels. The options are 'axis' or 'bottom'. 'axis' will cause the labels to stick to the axis, 'bottom' will cause the labels to stay at the bottom of the graph area.
              @default: 'left'

            @property showTicks [Boolean]
              @description: Sets the showTicks property. If true, the axis ticks (text and tick marker) will be visible, if false they will be hidden.
              @default: true

      @method addSeries
        @arg type [String]
        @arg? name [String]
        @deprecated: Use @code(js)[addSeries(type, {title: "name"})] instead.

      @method addSeries
        @description
          Adds a new series to the graph. See the related series type prototype options for what to pass in for the options parameter.
        @arg type [String]: The type of series to add. Can be one of 'line', 'bar', 'band', 'scatter' and 'straight-line'
        @arg? options [Object]: The options to pass to the series when constructing.
        @returns Series: Returns a Series instance - LineSeries, BarSeries, BandSeries, ScatterSeries and StraightLineSeries are all instances of Series - one of these types will be returned.

      @method removeSeries
        @arg series [Series]
        @returns Series: The Series removed, or undefined if it was not removed.

      @method series
        @description: Gets the list of the series attached to this axis
        @returns [Array[Series]]: The list of series

      @method series
        @description: Sets the list of the series attached to this axis
        @arg series [Array[Series]]: The series objects this axis should use.
        @returns Axis: This Axis

      @property xAxisTickLabelPosition [String]
        @deprecated: Use @code(js)[Axis.x.axisTickLabelPosition()] instead. @code(js)[Axis.x.axisTickLabelPosition()] to get, @code(js)[Axis.x.axisTickLabelPosition(value)] to set.
      @property xDiscreteLabels [Array]
        @deprecated: Use @code(js)[Axis.x.discreteLabels()] instead. @code(js)[Axis.x.discreteLabels()] to get, @code(js)[Axis.x.discreteLabels(value)] to set.
      @property xDiscretePadding [Number]
        @deprecated: Use @code(js)[Axis.x.discretePadding()] instead. @code(js)[Axis.x.discretePadding()] to get, @code(js)[Axis.x.discretePadding(value)] to set.
      @property xFormatter [Function]
        @deprecated: Use @code(js)[Axis.x.formatter()] instead. @code(js)[Axis.x.formatter()] to get, @code(js)[Axis.x.formatter(value)] to set.
        @arg input [Any]
      @property xGridLines [Boolean]
        @deprecated: Use @code(js)[Axis.x.gridLines()] instead. @code(js)[Axis.x.gridLines()] to get, @code(js)[Axis.x.gridLines(value)] to set.
      @property xMax [Number]
        @deprecated: Use @code(js)[Axis.x.max()] instead. @code(js)[Axis.x.max()] to get, @code(js)[Axis.x.max(value)] to set.
      @property xMin [Number]
        @deprecated: Use @code(js)[Axis.x.min()] instead. @code(js)[Axis.x.min()] to get, @code(js)[Axis.x.min(value)] to set.
      @property xNthTickVisible [Number]
        @deprecated: Use @code(js)[Axis.x.nthTickVisible()] instead. @code(js)[Axis.x.nthTickVisible()] to get, @code(js)[Axis.x.nthTickVisible(value)] to set.
      @property xScalePaddingMax [Number]
        @deprecated: Use @code(js)[Axis.x.scalePaddingMax()] instead. @code(js)[Axis.x.scalePaddingMax()] to get, @code(js)[Axis.x.scalePaddingMax(value)] to set.
      @property xScalePaddingMin [Number]
        @deprecated: Use @code(js)[Axis.x.scalePaddingMin()] instead. @code(js)[Axis.x.scalePaddingMin()] to get, @code(js)[Axis.x.scalePaddingMin(value)] to set.
      @property xShowTicks [Boolean]
        @deprecated: Use @code(js)[Axis.x.showTicks()] instead. @code(js)[Axis.x.showTicks()] to get, @code(js)[Axis.x.showTicks(value)] to set.
      @property xTickSpacing [Number]
        @deprecated: Use @code(js)[Axis.x.tickSpacing()] instead. @code(js)[Axis.x.tickSpacing()] to get, @code(js)[Axis.x.tickSpacing(value)] to set.
      @property xTitle [String]
        @deprecated: Use @code(js)[Axis.x.title()] instead. @code(js)[Axis.x.title()] to get, @code(js)[Axis.x.title(value)] to set.
      @property xVisible [Boolean]
        @deprecated: Use @code(js)[Axis.x.visible()] instead. @code(js)[Axis.x.visible()] to get, @code(js)[Axis.x.visible(value)] to set.
      @property yAxisTickLabelPosition [String]
        @deprecated: Use @code(js)[Axis.y.axisTickLabelPosition()] instead. @code(js)[Axis.y.axisTickLabelPosition()] to get, @code(js)[Axis.y.axisTickLabelPosition(value)] to set.
      @property yDiscreteLabels [Array]
        @deprecated: Use @code(js)[Axis.y.discreteLabels()] instead. @code(js)[Axis.y.discreteLabels()] to get, @code(js)[Axis.y.discreteLabels(value)] to set.
      @property yDiscretePadding [Number]
        @deprecated: Use @code(js)[Axis.y.discretePadding()] instead. @code(js)[Axis.y.discretePadding()] to get, @code(js)[Axis.y.discretePadding(value)] to set.
      @property yFormatter [Function]
        @deprecated: Use @code(js)[Axis.y.formatter()] instead. @code(js)[Axis.y.formatter()] to get, @code(js)[Axis.y.formatter(value)] to set.
        @arg input [Any]
      @property yGridLines [Boolean]
        @deprecated: Use @code(js)[Axis.y.gridLines()] instead. @code(js)[Axis.y.gridLines()] to get, @code(js)[Axis.y.gridLines(value)] to set.
      @property yMax [Number]
        @deprecated: Use @code(js)[Axis.y.max()] instead. @code(js)[Axis.y.max()] to get, @code(js)[Axis.y.max(value)] to set.
      @property yMin [Number]
        @deprecated: Use @code(js)[Axis.y.min()] instead. @code(js)[Axis.y.min()] to get, @code(js)[Axis.y.min(value)] to set.
      @property yNthTickVisible [Number]
        @deprecated: Use @code(js)[Axis.y.nthTickVisible()] instead. @code(js)[Axis.y.nthTickVisible()] to get, @code(js)[Axis.y.nthTickVisible(value)] to set.
      @property yScalePaddingMax [Number]
        @deprecated: Use @code(js)[Axis.y.scalePaddingMax()] instead. @code(js)[Axis.y.scalePaddingMax()] to get, @code(js)[Axis.y.scalePaddingMax(value)] to set.
      @property yScalePaddingMin [Number]
        @deprecated: Use @code(js)[Axis.y.scalePaddingMin()] instead. @code(js)[Axis.y.scalePaddingMin()] to get, @code(js)[Axis.y.scalePaddingMin(value)] to set.
      @property yShowTicks [String]
        @deprecated: Use @code(js)[Axis.y.showTicks()] instead. @code(js)[Axis.y.showTicks()] to get, @code(js)[Axis.y.showTicks(value)] to set.
      @property yTickSpacing [Number]
        @deprecated: Use @code(js)[Axis.y.tickSpacing()] instead. @code(js)[Axis.y.tickSpacing()] to get, @code(js)[Axis.y.tickSpacing(value)] to set.
      @property yTitle [String]
        @deprecated: Use @code(js)[Axis.y.title()] instead. @code(js)[Axis.y.title()] to get, @code(js)[Axis.y.title(value)] to set.
      @property yVisible [Boolean]
        @deprecated: Use @code(js)[Axis.y.visible()] instead. @code(js)[Axis.y.visible()] to get, @code(js)[Axis.y.visible(value)] to set.


      @property x [Object]
        @method scaleType
          @description: Sets the scaleType. Should be one of 'linear', 'discrete' or 'time'. 'discrete' should be used for bar charts, and 'linear' and 'time' for line graphs (in general). The 'time' scale type is similar to linear, but picks the ticks so that they align on sensible times.
          @arg value [String]
          @returns Axis: This Axis

        @method scaleType
          @description: Gets the scaleType. Will be one of 'linear', 'discrete' or 'time'.
          @returns String: The scaleType value.

        @method visible
          @description:
            @p: Sets the visibility state
            @p: Whether or not the x axis should be visible. The default is true.
          @arg value [Boolean]
          @returns Axis: This Axis

        @method visible
          @description:
            @p: Gets the visibility state
            @p: Whether or not the x axis should be visible. The default is true.
          @returns Boolean: The visible value.

        @method formatter
          @description:
            @p: Sets the formatter
            @p: The formatter is function that formats the strings that are displayed at the ticks of the axis. It is a function with first argument that will typically be a number (although it depends on the type of the values in your data), and should return a string. The default is hx.format.si(2), which uses SI notation for numbers, and passes strings through untouched.
          @arg formatter [Function]
            @arg value [Number]
            @returns String: The number formatted as a string.
          @returns Axis: This Axis

        @method formatter
          @description:
            @p: Gets the formatter
            @p: The formatter is function that formats the strings that are displayed at the ticks of the axis. It is a function with first argument that will typically be a number (although it depends on the type of the values in your data), and should return a string. The default is hx.format.si(2), which uses SI notation for numbers, and passes strings through untouched.
          @returns Function: The formatter value.
            @arg value [Number]
            @returns String: The number formatted as a string.

        @method tickRotation
          @description:
            @p: Sets the rotation of the ticks in degrees.
          @arg angle [Number]: The rotation of the tick labels in degrees.
          @returns Axis: This Axis

        @method tickRotation
          @description:
            @p: Gets the rotation of the tick labels in degrees.
          @returns Number: The tickRotation value.

        @method min
          @description: Sets the minimum value the axis should show. If set to 'auto' the minimum value will calculated from the data in the series. The default is 'auto'.
          @arg value [Number/String]
          @returns Axis: This Axis

        @method min
          @description: Gets the minimum value the axis should show. If set to 'auto' the minimum value will calculated from the data in the series. The default is 'auto'.
          @returns Number/String: The min value.

        @method max
          @description: Sets the maximum value the axis should show. If set to 'auto' the maximum value will calculated from the data in the series. The default is 'auto'.
          @arg value [Number/String]
          @returns Axis: This Axis

        @method max
          @description: Gets the maximum value the axis should show. If set to 'auto' the maximum value will calculated from the data in the series. The default is 'auto'.
          @returns Number/String: The max value.

        @method discretePadding
          @description
            @p: Sets the discretePadding property
            @p: The padding between discrete values on the x axis. Should be a value between 0 and 1. This will affect anything that uses the band width of a tick (ie bar series). The default is 0.1, which results in reserving 10% of the band width for padding, resulting in separation of groups of bar series.
          @arg value [Number]
          @returns Axis: This Axis

        @method discretePadding
          @description
            @p: Gets the discretePadding property
            @p: The padding between discrete values on the x axis. Should be a value between 0 and 1. This will affect anything that uses the band width of a tick (ie bar series). The default is 0.1, which results in reserving 10% of the band width for padding, resulting in separation of groups of bar series.
          @returns Number: The discretePadding value.

        @method discreteLabels
          @description
            @p: Sets the discreteLabels property
            @p: The set of labels to use for a discrete x axis. This is similar to setting the min and max in linear scale case. The default is 'auto', which will mean that the axis works out it's labels from the series data.
          @arg value [Array[String]]
          @returns Axis: This Axis

        @method discreteLabels
          @description:
            @p: Gets the discreteLabels property
            @p: The set of labels to use for a discrete x axis. This is similar to setting the min and max in linear scale case. The default is 'auto', which will mean that the axis works out it's labels from the series data.
          @returns [Array[String]]: The discreteLabels value.

        @method tickSpacing
          @description: Sets the preferred spacing (in pixels) between ticks on the axis. The axis will do it's best to keep close to this value, but may use other spacing to ensure that other conditions can be met such as the min, max and having 'nice' vales at the ticks. The default is 50.
          @arg value [Number]
          @returns Axis: This Axis

        @method tickSpacing
          @description: Gets the preferred spacing (in pixels) between ticks on the axis. The axis will do it's best to keep close to this value, but may use other spacing to ensure that other conditions can be met such as the min, max and having 'nice' vales at the ticks. The default is 50.
          @returns Number: The tickSpacing value.

        @method title
          @description: Sets the title of the axis
          @arg value [String]
          @returns Axis: This Axis

        @method title
          @description: Gets the title of the axis
          @returns String: The title value.

        @method scalePaddingMin
          @description: Sets the scalePaddingMin property
          @arg value [Number]
          @returns Axis: This Axis

        @method scalePaddingMin
          @description: Gets the scalePaddingMin property
          @returns Number: The scalePaddingMin value.

        @method scalePaddingMax
          @description: Sets the padding to apply to the end of the axis domain. This option makes it possible to stop the series from touching the axes, if that is wanted. This value is a proportion of the data range, so 0.1 will add an extra 10% to the end of the domain. The default value is 0, which applies no padding.
          @arg value [Number]
          @returns Axis: This Axis

        @method scalePaddingMax
          @description: Gets the padding applied to the end of the axis domain. This option makes it possible to stop the series from touching the axes, if that is wanted. This value is a proportion of the data range, so 0.1 will add an extra 10% to the end of the domain. The default value is 0, which applies no padding.
          @returns Number: The scalePaddingMax value.

        @method ticksAll
          @description: Sets whether ticks should be shown for every data point.
          @arg value [Boolean]
          @returns Axis: This Axis

        @method ticksAll
          @description: Gets whether ticks should be shown for every data point.
          @returns Boolean: The ticksAll value.

        @method gridLines
          @description: Sets whether or not grid lines should be used for the axis ticks. True means the grid lines will be shown.
          @arg value [Boolean]
          @returns Axis: This Axis

        @method gridLines
          @description: Gets whether or not grid lines should be used for the axis ticks. True means the grid lines will be shown.
          @returns Boolean: The gridLines value.

        @method nthTickVisible
          @description: Sets which ticks should display text. If set to 1, then every tick will have text. If set to 2 every other tick will display text. If set to 3, every third tick will show text. And so on..
          @arg value [Number]
          @returns Axis: This Axis

        @method nthTickVisible
          @description: Gets which ticks should display text. If set to 1, then every tick will have text. If set to 2 every other tick will display text. If set to 3, every third tick will show text. And so on..
          @returns Number: The nthTickVisible value.

        @method axisTickLabelPosition
          @description
            @p: Sets the axisTickLabelPosi property
            @p: Allows positioning of the tick labels. The options are 'axis' or 'bottom'. 'axis' will cause the labels to stick to the axis, 'bottom' will cause the labels to stay at the bottom of the graph area.
          @arg value [Boolean]
          @returns Axis: This Axis

        @method axisTickLabelPosition
          @description
            @p: Gets the axisTickLabelPosi property
            @p: Used for positioning of the tick labels. The options are 'axis' or 'bottom'. 'axis' will cause the labels to stick to the axis, 'bottom' will cause the labels to stay at the bottom of the graph area.
          @returns Boolean: The axisTickLabelPosition value.

        @method showTicks
          @description: Sets the showTicks property. If true, the axis ticks (text and tick marker) will be visible, if false they will be hidden.
          @arg value [Boolean]
          @returns Axis: This Axis

        @method showTicks
          @description: Gets the showTicks property. If true, the axis ticks (text and tick marker) will be visible, if false they will be hidden.
          @returns Boolean: The showTicks value.

      @property y [Object]
        @method scaleType
          @description: Sets the scaleType. Should be one of 'linear', 'discrete' or 'time'. 'discrete' should be used for bar charts, and 'linear' and 'time' for line graphs (in general). The 'time' scale type is similar to linear, but picks the ticks so that they align on sensible times.
          @arg value [String]
          @returns Axis: This Axis

        @method scaleType
          @description: Gets the scaleType. Will be one of 'linear', 'discrete' or 'time'.
          @returns String: The scaleType value.

        @method visible
          @description:
            @p: Sets the visibility state
            @p: Whether or not the x axis should be visible. The default is true.
          @arg value [Boolean]
          @returns Axis: This Axis

        @method visible
          @description:
            @p: Gets the visibility state
            @p: Whether or not the x axis should be visible. The default is true.
          @returns Boolean: The visible value.

        @method formatter
          @description:
            @p: Sets the formatter
            @p: The formatter is function that formats the strings that are displayed at the ticks of the axis. It is a function with first argument that will typically be a number (although it depends on the type of the values in your data), and should return a string. The default is hx.format.si(2), which uses SI notation for numbers, and passes strings through untouched.
          @arg formatter [Function]
            @arg value [Number]
            @returns String: The number formatted as a string.
          @returns Axis: This Axis

        @method formatter
          @description:
            @p: Gets the formatter
            @p: The formatter is function that formats the strings that are displayed at the ticks of the axis. It is a function with first argument that will typically be a number (although it depends on the type of the values in your data), and should return a string. The default is hx.format.si(2), which uses SI notation for numbers, and passes strings through untouched.
          @returns Function: The formatter value.
            @arg value [Number]
            @returns String: The number formatted as a string.

        @method tickRotation
          @description:
            @p: Sets the rotation of the ticks in degrees.
          @arg angle [Number]: The rotation of the tick labels in degrees.
          @returns Axis: This Axis

        @method tickRotation
          @description:
            @p: Gets the rotation of the tick labels in degrees.
          @returns Number: The tickRotation value.

        @method min
          @description: Sets the minimum value the axis should show. If set to 'auto' the minimum value will calculated from the data in the series. The default is 'auto'.
          @arg value [Number/String]
          @returns Axis: This Axis

        @method min
          @description: Gets the minimum value the axis should show. If set to 'auto' the minimum value will calculated from the data in the series. The default is 'auto'.
          @returns Number/String: The min value.

        @method max
          @description: Sets the maximum value the axis should show. If set to 'auto' the maximum value will calculated from the data in the series. The default is 'auto'.
          @arg value [Number/String]
          @returns Axis: This Axis

        @method max
          @description: Gets the maximum value the axis should show. If set to 'auto' the maximum value will calculated from the data in the series. The default is 'auto'.
          @returns Number/String: The max value.

        @method discretePadding
          @description
            @p: Sets the discretePadding property
            @p: The padding between discrete values on the x axis. Should be a value between 0 and 1. This will affect anything that uses the band width of a tick (ie bar series). The default is 0.1, which results in reserving 10% of the band width for padding, resulting in separation of groups of bar series.
          @arg value [Number]
          @returns Axis: This Axis

        @method discretePadding
          @description
            @p: Gets the discretePadding property
            @p: The padding between discrete values on the x axis. Should be a value between 0 and 1. This will affect anything that uses the band width of a tick (ie bar series). The default is 0.1, which results in reserving 10% of the band width for padding, resulting in separation of groups of bar series.
          @returns Number: The discretePadding value.

        @method discreteLabels
          @description
            @p: Sets the discreteLabels property
            @p: The set of labels to use for a discrete x axis. This is similar to setting the min and max in linear scale case. The default is 'auto', which will mean that the axis works out it's labels from the series data.
          @arg value [Array[String]]
          @returns Axis: This Axis

        @method discreteLabels
          @description:
            @p: Gets the discreteLabels property
            @p: The set of labels to use for a discrete x axis. This is similar to setting the min and max in linear scale case. The default is 'auto', which will mean that the axis works out it's labels from the series data.
          @returns [Array[String]]: The discreteLabels value.

        @method tickSpacing
          @description: Sets the preferred spacing (in pixels) between ticks on the axis. The axis will do it's best to keep close to this value, but may use other spacing to ensure that other conditions can be met such as the min, max and having 'nice' vales at the ticks. The default is 50.
          @arg value [Number]
          @returns Axis: This Axis

        @method tickSpacing
          @description: Gets the preferred spacing (in pixels) between ticks on the axis. The axis will do it's best to keep close to this value, but may use other spacing to ensure that other conditions can be met such as the min, max and having 'nice' vales at the ticks. The default is 50.
          @returns Number: The tickSpacing value.

        @method title
          @description: Sets the title of the axis
          @arg value [String]
          @returns Axis: This Axis

        @method title
          @description: Gets the title of the axis
          @returns String: The title value.

        @method scalePaddingMin
          @description: Sets the scalePaddingMin property
          @arg value [Number]
          @returns Axis: This Axis

        @method scalePaddingMin
          @description: Gets the scalePaddingMin property
          @returns Number: The scalePaddingMin value.

        @method scalePaddingMax
          @description: Sets the padding to apply to the end of the axis domain. This option makes it possible to stop the series from touching the axes, if that is wanted. This value is a proportion of the data range, so 0.1 will add an extra 10% to the end of the domain. The default value is 0, which applies no padding.
          @arg value [Number]
          @returns Axis: This Axis

        @method scalePaddingMax
          @description: Gets the padding applied to the end of the axis domain. This option makes it possible to stop the series from touching the axes, if that is wanted. This value is a proportion of the data range, so 0.1 will add an extra 10% to the end of the domain. The default value is 0, which applies no padding.
          @returns Number: The scalePaddingMax value.

        @method ticksAll
          @description: Sets whether ticks should be shown for every data point.
          @arg value [Boolean]
          @returns Axis: This Axis

        @method ticksAll
          @description: Gets whether ticks should be shown for every data point.
          @returns Boolean: The ticksAll value.

        @method gridLines
          @description: Sets whether or not grid lines should be used for the axis ticks. True means the grid lines will be shown.
          @arg value [Boolean]
          @returns Axis: This Axis

        @method gridLines
          @description: Gets whether or not grid lines should be used for the axis ticks. True means the grid lines will be shown.
          @returns Boolean: The gridLines value.

        @method nthTickVisible
          @description: Sets which ticks should display text. If set to 1, then every tick will have text. If set to 2 every other tick will display text. If set to 3, every third tick will show text. And so on..
          @arg value [Number]
          @returns Axis: This Axis

        @method nthTickVisible
          @description: Gets which ticks should display text. If set to 1, then every tick will have text. If set to 2 every other tick will display text. If set to 3, every third tick will show text. And so on..
          @returns Number: The nthTickVisible value.

        @method axisTickLabelPosition
          @description
            @p: Sets the axisTickLabelPosi property
            @p: Allows positioning of the tick labels. The options are 'axis' or 'bottom'. 'axis' will cause the labels to stick to the axis, 'bottom' will cause the labels to stay at the bottom of the graph area.
          @arg value [Boolean]
          @returns Axis: This Axis

        @method axisTickLabelPosition
          @description
            @p: Gets the axisTickLabelPosi property
            @p: Used for positioning of the tick labels. The options are 'axis' or 'bottom'. 'axis' will cause the labels to stick to the axis, 'bottom' will cause the labels to stay at the bottom of the graph area.
          @returns Boolean: The axisTickLabelPosition value.

        @method showTicks
          @description: Sets the showTicks property. If true, the axis ticks (text and tick marker) will be visible, if false they will be hidden.
          @arg value [Boolean]
          @returns Axis: This Axis

        @method showTicks
          @description: Gets the showTicks property. If true, the axis ticks (text and tick marker) will be visible, if false they will be hidden.
          @returns Boolean: The showTicks value.

        @method series
          @description: Gets the series attached to this axis.
          @returns [Array[Series]]: The list of Series instances attached to this axis.

        @method series
          @description: Sets the series attached to this axis.
          @arg series [Array[Series]]: The list of Series instances this axis should have.
          @returns Axis: This Axis

    @prototype hx.PieChart

      @constructor
        @removed: A new constructor has been added with an optional options object in place of this. If not using the options object, the existing way of creating a graph with @code(js)[new hx.PieChart(selector)] will still work
        @arg selector [HTMLElement/String]


      @constructor
        @description: Creates a new pie chart object.
        @arg selector [String/HTMLElement]: An HTMLElement or CSS selector which selects the graph's container.
        @arg? options [Object]
          @property labelsEnabled [Boolean]: Whether labels should be displayed for this series. True if they are enabled, false if disabled
            @default: true

          @property labelRenderer [Function]: The label renderer for this series.
            @arg element [HTMLElement]: The container populated
            @arg data [Object]: The data provided for rendering the label

          @property labelFormatter [Function]: The label formatter for this series.
            @arg value [Number/String]: The value point to format
            @returns Number/String: The formatted value point
            @default: hx.format.si(2)

          @property fillColor [String]: The color used to fill the series with as a CSS color string.
            @default: [hx.theme.plot.colors[1]]

          @property segmentPadding [Number]: The spacing between the segments. This value is a ratio of the segment width, so that pie charts scale to any size well.
            @default: 0

          @property innerPadding [Number]: The padding at the centre of the pie chart. This can turn a pie chart into a donut chart. This value should be between 0 and 1. A value around 0.5 is good for donut charts.
            @default: 0

          @property ringPadding [Number]: The separation between rings when there are multiple rings. This should be a value between 0 and 1.
            @default: 0.1

          @property totalAngle [Number]: The total angle the pie chart should use in radians - the default is 2*Math.PI. This can be used to create semi-circle donut charts.
            @default: 2*Math.PI

          @property startAngle [Number]: The angle that the segments should drawing from in radians. The default is 0, which starts the drawing from 12 o'clock. For drawing a semi-circle donut chart, this could be changed to -Math.PI/2.
            @default: 0

          @property legendEnabled [Boolean]
            @description: Enables or disables the legends. Supplying true enables zoom, false disables it.
            @default: true

          @property legendLocation [String]
            @description
              @p: How to display the legend on the pie chart. Possible modes:

              @list
                @item: 'auto' - moves the legend around to avoid the mouse
                @item: 'hover' - same as auto, but only displays the legend on mouse hover
                @item: 'top-right' - displays the legend in the top right
                @item: 'top-left' - displays the legend in the top left
                @item: 'bottom-right' - displays the legend in the bottom right
                @item: 'bottom-left' - displays the legend in the bottom left
            @default: "auto"

          @property segmentTextEnabled [Boolean]: Whether or not to display text on each segment. If this is enabled, it is recommended that useLabels is disabled.
            @default: false

          @property segmentTextFormatter [Function]
            @description: Returns the text that should be displayed on a segment if useSegmentText is enabled.
            @arg segment [Object]: The segment to return text for
            @arg segments [Array[Object]]: The array of all segments in the ring
            @returns String: The formatted text.

          @property labelValuesExtractor [Function]: The label values extractor that returns the values to display in the label
            @arg segment [Object]: The current segment to show label data for
            @arg ring [Object]: The current ring this label extractor has been applied to
            @arg pie [PieChart]: The current pie chart

            @returns [Array[Object]]
              @property name [String]: The name of the label entry
              @property value [Any]: The value of the label entry
              @property formatter [Function]
                @decription: A formatter function that can be used to format the value.
                @arg value [Any]: The value to format
                @returns String: The formatted string


      @method segmentTextEnabled
        @description: Sets the segmentTextEnabled value of the pie chart
        @arg value [Boolean]: Whether the segment text should be enabled
        @returns PieChart: This PieChart

      @method segmentTextEnabled
        @description: Gets the current segmentTextEnabled of the pie chart
        @returns Boolean: Whether the segment text is enabled


      @method labelsEnabled
        @description: Sets the labelsEnabled value of the pie chart
        @arg value [Boolean]: Whether the labels should be enabled
        @returns PieChart: This PieChart

      @method labelsEnabled
        @description: Gets the current labelsEnabled of the pie chart
        @returns Boolean: Whether the labels are enabled


      @method legendEnabled
        @description: Sets the legendEnabled value of the pie chart
        @arg value [Boolean]: Whether the legend should be enabled
        @returns PieChart: This PieChart

      @method legendEnabled
        @description: Gets the current legendEnabled of the pie chart
        @returns Boolean: Whether the legend is enabled


      @method fillColor
        @description: Sets the default segment fill color value of the pie chart
        @arg value [String]: The default segment fill color
        @returns PieChart: This PieChart

      @method fillColor
        @description: Gets the current default segment fill color of the pie chart
        @returns String: The default segment fill color


      @method _new_innerPadding
        @description: Sets the inner padding of the pie chart
        @arg value [Number]: The inner padding to set
        @returns PieChart: This PieChart

      @method _new_innerPadding
        @description: Gets the current inner padding of the pie chart
        @returns Number: The current inner padding


      @method _new_segmentPadding
        @description: Sets the segment padding of the pie chart
        @arg value [Number]: The segment padding to set
        @returns PieChart: This PieChart

      @method _new_segmentPadding
        @description: Gets the current segment padding of the pie chart
        @returns Number: The current segment padding


      @method _new_ringPadding
        @description: Sets the ring padding of the pie chart
        @arg value [Number]: The ring padding to set
        @returns PieChart: This PieChart

      @method _new_ringPadding
        @description: Gets the current ring padding of the pie chart
        @returns Number: The current ring padding


      @method _new_totalAngle
        @description: Sets the total angle of the pie chart
        @arg value [Number]: The total angle to set
        @returns PieChart: This PieChart

      @method _new_totalAngle
        @description: Gets the current total angle of the pie chart
        @returns Number: The current total angle


      @method _new_startAngle
        @description: Sets the start angle of the pie chart
        @arg value [Number]: The start angle to set
        @returns PieChart: This PieChart

      @method _new_startAngle
        @description: Gets the current start angle of the pie chart
        @returns Number: The current start angle


      @method _new_segmentTextFormatter
        @description: Sets the segment text formatter of the pie chart
        @arg value [Function]: The segment text formatter to set
          @arg segment [Object]: The segment to return text for
          @arg segments [Array[Object]]: The array of all segments in the ring
          @returns String: The formatted text.
        @returns PieChart: This PieChart

      @method _new_segmentTextFormatter
        @description: Gets the current segment text formatter of the pie chart
        @returns Function: The current segment text formatter


      @method labelValuesExtractor
        @description: Sets the label values extractor of the pie chart
        @arg value [Function]: The label values extractor to set
          @arg segment [Object]: The current segment to show label data for
          @arg ring [Object]: The current ring this label extractor has been applied to
          @arg pie [PieChart]: The current pie chart

          @returns [Array[Object]]
            @property name [String]: The name of the label entry
            @property value [Any]: The value of the label entry
            @property formatter [Function]
              @decription: A formatter function that can be used to format the value.
              @arg value [Any]: The value to format
              @returns String: The formatted string
        @returns PieChart: This PieChart

      @method labelValuesExtractor
        @description: Gets the current label values extractor of the pie chart
        @returns Function: The current label values extractor


      @method labelRenderer
        @description: Sets the label renderer of the pie chart
        @arg value [Function]: The label renderer to set
          @arg element [HTMLElement]: The container populated
          @arg data [Object]: The data provided for rendering the label
        @returns PieChart: This PieChart

      @method labelRenderer
        @description: Gets the current label renderer of the pie chart
        @returns Function: The current label renderer


      @method labelFormatter
        @description: Sets the label formatter of the pie chart
        @arg value [Function]: The label formatter to set
          @arg value [Number/String]: The value point to format
          @returns Number/String: The formatted value point
        @returns PieChart: This PieChart

      @method labelFormatter
        @description: Gets the current label formatter of the pie chart
        @returns Function: The current label formatter

      @method data
        @description: Gets the current data of the pie chart
        @returns [Object/Array[Object]]: The current data

      @method data
        @description
          Sets the data this pie chart should display.

        @arg data [Object/Array[Object]]
          @description
            @p: The data that describes the pie chart.
            @p: The data should be of the form:
            @codeblock js
              {
                title: "Pie Chart"
                segments: [
                  {
                    name: "Segment 1"
                    size: 10,
                    fillColor: hx.cycle(hx.color.graph, 0)
                  },
                  {
                    name: "Segment 2"
                    size: 10,
                    fillColor: hx.cycle(hx.color.graph, 1)
                  },
                  {
                    name: "Segment 3"
                    size: 80,
                    fillColor: hx.cycle(hx.color.graph, 2)
                  }
                ]
              }

            @p: For multi-ring pie charts, an array of the above object is expected:
            @codeblock js
              [
                {
                  title: "Series 1"
                  segments: [
                    {
                      name: "Segment 1",
                      size: 10,
                      fillColor: hx.cycle(hx.color.graph, 0)
                    },
                    {
                      name: "Segment 2",
                      size: 10,
                      fillColor: hx.cycle(hx.color.graph, 1)
                    },
                    {
                      name: "Segment 3",
                      size: 80,
                      fillColor: hx.cycle(hx.color.graph, 2)
                    }
                  ]
                },
                {
                  name: "Series 2"
                  segments: [
                    {
                      name: "Segment 1",
                      size: 90,
                      fillColor: hx.cycle(hx.color.graph, 3)
                    },
                    {
                      name: "Segment 2",
                      size: 20,
                      fillColor: hx.cycle(hx.color.graph, 4)
                    },
                    {
                      name: "Segment 3",
                      size: 30,
                      fillColor: hx.cycle(hx.color.graph, 5)
                    }
                  ]
                },
                {
                  name: "Series 3"
                  segments: [
                    {
                      name: "Segment 1",
                      size: 90,
                      fillColor: hx.cycle(hx.color.graph, 6)
                    },
                    {
                      name: "Segment 2",
                      size: 20,
                      fillColor: hx.cycle(hx.color.graph, 7)
                    },
                    {
                      name: "Segment 3",
                      size: 30,
                      fillColor: hx.cycle(hx.color.graph, 8)
                    }
                  ]
                }
              ]


      @method setData
        @arg data [Data]
        @deprecated: Use piechart.data(data) to set, piechart.data() to get.

      @property formatter [Formatter]
        @deprecated: Use piechart.labelFormatter(value) to set, piechart.labelFormatter() to get.

      @property color [String]
        @deprecated: Use piechart.strokeColor(value) to set, piechart.strokeColor() to get.

      @property useSegmentText [Boolean]
        @deprecated: Use piechart.segmentTextEnabled(value) to set, piechart.segmentTextEnabled() to get.

      @property startAngle [Number]
        @deprecated: Use piechart._new_startAngle(value) to set, piechart._new_startAngle() to get.

      @property totalAngle [Number]
        @deprecated: Use piechart._new_totalAngle(value) to set, piechart._new_totalAngle() to get.

      @property innerPadding [Number]
        @deprecated: Use piechart._new_innerPadding(value) to set, piechart._new_innerPadding() to get.

      @property ringPadding [Number]
        @deprecated: Use piechart._new_ringPadding(value) to set, piechart._new_ringPadding() to get.

      @property segmentPadding [Number]
        @deprecated: Use piechart._new_segmentPadding(value) to set, piechart._new_segmentPadding() to get.

      @property segmentTextFormatter [Function]
        @arg segment [Object]
        @arg segments [Array[Object]]
        @deprecated: Use piechart._new_segmentTextFormatter(value) to set, piechart._new_segmentTextFormatter() to get.

      @property useLabels [Boolean]
        @deprecated: Use piechart.labelsEnabled(value) to set, piechart.labelsEnabled() to get.

      @property useLegend [Boolean]
        @deprecated: Use piechart.legendEnabled(value) to set, piechart.legendEnabled() to get.

      @property legendPosition [String]
        @deprecated: Use piechart.legendLocation(value) to set, piechart.legendLocation() to get.

      @method createLabelValues [Function]
        @arg segment [Object]
        @arg ring [Object]
        @returns [Array[Object]]
        @deprecated: Use piechart.labelValuesExtractor(value) to set, piechart.labelValuesExtractor() to get.



    @prototype LineSeries

      @constructor
        @arg? options [Object]
          @property title [String]: The title of the series
            @default: ''

          @property group [String]: The group the series belongs to. Series with the same group will be stacked on top of each other.
            @default: undefined

          @property labelsEnabled [Boolean]: Whether labels should be displayed for this series. True if they are enabled, false if disabled
            @default: true

          @property labelRenderer [Function]: The label renderer for this series.
            @arg element [HTMLElement]: The container populated
            @arg data [Object]: The data provided for rendering the label

          @property labelInterpolated [Boolean]: Whether or not label's values should be interpolated. True if the labels are interpolated between data points, false if the labels snap to the closest data point.
            @default: false

          @property strokeEnabled [Boolean]: Whether the path of this series should be stroked. True if they are enabled, false if disabled.
            @default: true

          @property strokeColor [String]: The color used to stroke the series with as a CSS color string.
            @default: [hx.theme.plot.colors[0]]

          @property fillEnabled [Boolean]: Gets whether the path of this series should be filled. True if they are enabled, false if disabled.
            @default: false

          @property fillColor [String]: The color used to fill the series with as a CSS color string.
            @default: undefined

          @property class [String]: The additional class applied to the series svg element.
            @default: ''

          @property markersEnabled [Boolean]: Whether markers should be placed where there are data points. True if they are enabled, false if disabled
            @default: false

          @property markerFillColor [String]: The color used to fill the markers with as a CSS color string. If undefined the strokeColor will be used.
            @default: undefined

          @property markerRadius [Number]: The radius of the markers in pixels
            @default: 2

          @property data [Array[Object]]
            @description
              @p: An array of objects with x,y properties. The data should be of the form:

              @codeblock js
                [
                  {x: 0, y: 10},
                  {x: 1, y: 11},
                  {x: 2, y: 16},
                  {x: 3, y: 12}
                ]

          @property labelFormatters [Object]
            @description
              @p: Optional label formatters for each label value.

              @codeblock js
                new hx.LineSeries({
                  labelFormatters: {
                    'x': function(value) { return x },
                    'y': hx.format.si(3)
                  }
                })


          @property sampleThreshold [Number]: The maximum number of data points to render when displaying the graph. If there are more data points in the series data than this value, the data will be sampled.
            @default: 200

          @property labelValuesExtractor [Function]: The label values extractor that returns the values to display in the label
            @arg series [Series]: The Series this label extractor has been applied to
            @arg point [Object]: The data point to show label data for
            @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
              @returns Any
            @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
              @returns Any
            @returns [Array[Object]]
              @property name [String]: The name of the label entry
              @property value [Any]: The value of the label entry
              @property formatter [Function]
                @decription: A formatter function that can be used to format the value.
                @arg value [Any]: The value to format
                @returns String: The formatted string

      @method createLabelValues [Function]
        @arg dataPoint [Object]
          @property x [Number]
          @property y [Number]
        @deprecated: Use labelValuesExtractor() instead.

      @method labelFormatter
        @description: Sets a label formatter
        @arg name [String]: The formatter to set
        @arg formatter [Function]
          @description: The formatter to use. The formatter converts a value to a string
          @arg value [Any]
          @returns String: The formatted String
        @returns LineSeries: This LineSeries

      @method labelFormatter
        @description: Gets a label formatter
        @arg name [String]: The formatter to get
        @returns Function
          @description: The formatter used for the label component. The formatter converts a value to a string. If there was no formatter set, this will return undefined.
          @arg value [Any]
          @returns String: The formatted String

      @property feather [Number]
        @deprecated: Use @code(js)[sampleThreshold()] to get the feather value, @code(js)[sampleThreshold(value)] to set it.

      @method setData
        @arg data [Data]
        @deprecated: Use @code(js)[series.data(data)] to set new data, @code(js)[series.data()] to get the current data.

      @property name [String]
        @deprecated: Use @code(js)[series.title(name)] to set the series name, @code(js)[series.title()] to get the name.

      @property class [String]
        @deprecated: Use @code(js)[series._new_class(class)] to set the title. This method will be renamed to @code(js)[series.class()] in 1.0.0. The _new_ prefix is required to avoid naming clash with existing properties. To get the class use @code(js)[series._new_class()].

      @property group [String]
        @deprecated: Use @code(js)[series._new_group("group-name")] to set the group, @code(js)[series.new_group()] to get the group. The _new_ prefix will be dropped in 1.0.0 - it is required to avoid naming clash with existing properties until then.

      @property color [String]
        @deprecated: Use @code(js)[series.strokeColor(color)] to set the color, @code(js)[series.strokeColor()] to get the color.

      @property fillColor [String]
        @deprecated: Use @code(js)[series._new_fillColor(color)] to set the color, @code(js)[series._new_fillColor()] to get the color.

      @property color [Array[String]]
        @deprecated: Use @code(js)[series.strokeColor(color)] to set the color, @code(js)[series.strokeColor()] to get the color.

      @property stroke [Boolean]
        @deprecated: Use @code(js)[series.strokeEnabled(enabled)] to set the state, @code(js)[series.strokeEnabled()] to get it.

      @property fill [Boolean]
        @deprecated: Use @code(js)[series.fillEnabled(enabled)] to set the state, @code(js)[series.fillEnabled()] to get it.

      @property markers [Boolean]
        @deprecated: Use @code(js)[series.markersEnabled(enabled)] to set the state, @code(js)[series.markersEnabled()] to get it.

      @property markerColor [String]
        @deprecated: Use @code(js)[seriesmarkerFillColor(color)] to set the color, @code(js)[seriesmarkerFillColor()] to get the color.

      @property markerRadius [Number]
        @deprecated: Use @code(js)[_new_markerRadius(radius)] to set the radius, @code(js)[_new_markerRadius()] to get the radius.

      @method title
        @description: Sets the title of the series
        @arg title [String]: The title to give the series - this will appear in the hover labels.
        @returns LineSeries: This LineSeries

      @method title
        @description: Gets the title of the series
        @returns String: The title of the series

      @method _new_group
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Sets the group the series belongs to. Series with the same group will be stacked on top of each other.
        @arg group [String]: The class to give the series.
        @returns LineSeries: This LineSeries

      @method _new_group
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Gets the group the series belongs to.
        @returns String: The group.

      @method labelsEnabled
        @description: Sets whether labels should be used for this series
        @arg enabled [Boolean]: True to enable, false to disable
        @returns LineSeries: This LineSeries

      @method labelsEnabled
        @description: Gets whether labels should be displayed for this series
        @returns Boolean: True if they are enabled, false if disabled

      @method labelRenderer
        @description: Sets the label renderer for this series. This allows creation of custom labels
        @arg renderer [Function]
          @arg element [HtmlElement]: The container to populate
          @arg data [Object]
            @description: The data available to be used when rendering the label
        @returns LineSeries: This LineSeries

      @method labelRenderer
        @description: Gets the label renderer for this series.
        @returns Function
          @arg element [HTMLElement]: The container populated
          @arg data [Object]: The data provided for rendering the label

      @method sampleThreshold
        @description: Sets the maximum number of data points to render when displaying the graph. If there are more data points in the series data than this value, the data will be sampled.
        @arg count [Number]: The maximum number of data points to display.
        @returns LineSeries: This LineSeries

      @method sampleThreshold
        @description: Gets the maximum number of points that will be shown before sampling is applied.
        @returns Number: The sample threshold.

      @method labelValuesExtractor
        @description: Sets the label values extractor.
        @arg extractor [Function]
          @description: Returns the values to display in the label
          @arg series [Series]: The Series this label extractor has been applied to
          @arg point [Object]: The data point to show label data for
          @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
            @returns Any
          @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
            @returns Any
          @returns [Array[Object]]
            @property name [String]: The name of the label entry
            @property value [Any]: The value of the label entry
            @property formatter [Function]
              @decription: A formatter function that can be used to format the value.
              @arg value [Any]: The value to format
              @returns String: The formatted string

        @returns LineSeries: This LineSeries

      @method labelValuesExtractor
        @description: Gets the label values extractor.
        @returns Function
          @description: Returns the values to display in the label
          @arg series [Series]: The Series this label extractor has been applied to
          @arg point [Object]: The data point to show label data for
          @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
            @returns Any
          @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
            @returns Any
          @returns [Array[Object]]
            @property name [String]: The name of the label entry
            @property value [Any]: The value of the label entry
            @property formatter [Function]
              @decription: A formatter function that can be used to format the value.
              @arg value [Any]: The value to format
              @returns String: The formatted string


      @method strokeEnabled
        @description: Sets whether the path for this series should be stroked
        @arg enabled [Boolean]: True to enable, false to disable
        @returns LineSeries: This LineSeries

      @method strokeEnabled
        @description: Gets whether the path of this series should be stroked
        @returns Boolean: True if they are enabled, false if disabled

      @method strokeColor
        @description: Sets the color to stroke the series with
        @arg color [String]: A CSS color string.
        @returns LineSeries: This LineSeries

      @method strokeColor
        @description: Gets the color used to stroke the series with
        @returns String: The color as a CSS color string

      @method fillEnabled
        @description: Sets whether the path for this series should be filled
        @arg enabled [Boolean]: True to enable, false to disable
        @returns LineSeries: This LineSeries

      @method fillEnabled
        @description: Gets whether the path of this series should be filled
        @returns Boolean: True if they are enabled, false if disabled

      @method _new_fillColor
        @description:
          @notice Note
            The _new_ prefix will be dropped in 1.0.0.
          @p: Sets the color to fill the series with
        @arg color [String]: A CSS color string.
        @returns LineSeries: This LineSeries

      @method _new_fillColor
        @description:
          @notice Note
            The _new_ prefix will be dropped in 1.0.0.
          @p: Gets the color used to fill the series with
        @returns String: The color as a CSS color string

      @method _new_class
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Sets an additional class to give the series svg element.
        @arg class [String]: The class to give the series.
        @returns LineSeries: This LineSeries

      @method _new_class
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Gets the additional class applied to the series svg element.
        @returns String: The additional class applied to the series.

      @method markersEnabled
        @description: Sets whether markers should be placed where there are data points
        @arg enabled [Boolean]: True to enable, false to disable
        @returns LineSeries: This LineSeries

      @method markersEnabled
        @description: Gets whether markers should be placed where there are data points
        @returns Boolean: True if they are enabled, false if disabled

      @method markerFillColor
        @description: Sets the color to fill the markers with
        @arg color [String]: A CSS color string.
        @returns LineSeries: This LineSeries

      @method markerFillColor
        @description: Gets the color used to fill the markers with
        @returns String: The color as a CSS color string

      @method _new_markerRadius
        @description: Sets the radius of the markers in pixels
        @arg radius [Number]: A CSS color string.
        @returns LineSeries: This LineSeries

      @method _new_markerRadius
        @description: Gets the radius of the markers in pixels
        @returns Number: The radius of a marker in pixels

      @method data
        @description
          Sets the data for this series
        @arg data [Array[Object]]
          @description
            @p: n array of objects with x,y properties. The data should be of the form:

            @codeblock js
              [
                {x: 0, y: 10},
                {x: 1, y: 11},
                {x: 2, y: 16},
                {x: 3, y: 12}
              ]

            @p: The color of the bars can also be set per bar as well:

            @codeblock js
              [
                {x: 0, y: 10, color: hx.color.graph[1]},
                {x: 1, y: 11, color: hx.color.graph[2]},
                {x: 2, y: 16, color: hx.color.graph[3]},
                {x: 3, y: 12, color: hx.color.graph[4]}
              ]
        @returns LineSeries: This LineSeries

      @method data
        @description
          Sets the data for this series
        @returns [Array[Object]]
          @description
            @p: n array of objects with x,y properties. The data should be of the form:

            @codeblock js
              [
                {x: 0, y: 10},
                {x: 1, y: 11},
                {x: 2, y: 16},
                {x: 3, y: 12}
              ]

            @p: The color of the bars can also be set per bar as well:

            @codeblock js
              [
                {x: 0, y: 10, color: hx.color.graph[1]},
                {x: 1, y: 11, color: hx.color.graph[2]},
                {x: 2, y: 16, color: hx.color.graph[3]},
                {x: 3, y: 12, color: hx.color.graph[4]}
              ]

    @prototype BarSeries

      @constructor
        @arg? options [Object]
          @property title [String]: The title of the series
            @default: ''

          @property group [String]: The group the series belongs to. Series with the same group will be stacked on top of each other.
            @default: undefined

          @property labelsEnabled [Boolean]: Whether labels should be displayed for this series. True if they are enabled, false if disabled
            @default: true

          @property labelRenderer [Function]: The label renderer for this series.
            @arg element [HTMLElement]: The container populated
            @arg data [Object]: The data provided for rendering the label

          @property fillColor [String]: The color used to fill the series with as a CSS color string.
            @default: [hx.theme.plot.colors[1]]

          @property class [String]: The additional class applied to the series svg element.
            @default: ''

          @property data [Array[Object]]
            @description
              @p: n array of objects with x,y properties. The data should be of the form:

              @codeblock js
                [
                  {x: 0, y: 10},
                  {x: 1, y: 11},
                  {x: 2, y: 16},
                  {x: 3, y: 12}
                ]

              @p: The color of the bars can also be set per bar as well:

              @codeblock js
                [
                  {x: 0, y: 10, color: hx.color.graph[1]},
                  {x: 1, y: 11, color: hx.color.graph[2]},
                  {x: 2, y: 16, color: hx.color.graph[3]},
                  {x: 3, y: 12, color: hx.color.graph[4]}
                ]

          @property labelValuesExtractor [Function]: The label values extractor that returns the values to display in the label
            @arg series [Series]: The Series this label extractor has been applied to
            @arg point [Object]: The data point to show label data for
            @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
              @returns Any
            @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
              @returns Any
            @returns [Array[Object]]
              @property name [String]: The name of the label entry
              @property value [Any]: The value of the label entry
              @property formatter [Function]
                @decription: A formatter function that can be used to format the value.
                @arg value [Any]: The value to format
                @returns String: The formatted string

          @property labelFormatters [Object]
            @description
              @p: Optional label formatters for each label value.

              @codeblock js
                new hx.BarSeries({
                  labelFormatters: {
                    'x': function(value) { return x },
                    'y': hx.format.si(3)
                  }
                })

      @method createLabelValues [Function]
        @arg dataPoint [Object]
          @property x [Number]
          @property y [Number]
        @deprecated: Use labelValuesExtractor() instead.

      @method labelFormatter
        @description: Sets a label formatter
        @arg name [String]: The formatter to set
        @arg formatter [Function]
          @description: The formatter to use. The formatter converts a value to a string
          @arg value [Any]
          @returns String: The formatted String
        @returns BandSeries: This BandSeries

      @method labelFormatter
        @description: Gets a label formatter
        @arg name [String]: The formatter to get
        @returns Function
          @description: The formatter used for the label component. The formatter converts a value to a string. If there was no formatter set, this will return undefined.
          @arg value [Any]
          @returns String: The formatted String

      @method labelValuesExtractor
        @description: Sets the label values extractor.
        @arg extractor [Function]
          @description: Returns the values to display in the label
          @arg series [Series]: The Series this label extractor has been applied to
          @arg point [Object]: The data point to show label data for
          @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
            @returns Any
          @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
            @returns Any
          @returns [Array[Object]]
            @property name [String]: The name of the label entry
            @property value [Any]: The value of the label entry
            @property formatter [Function]
              @decription: A formatter function that can be used to format the value.
              @arg value [Any]: The value to format
              @returns String: The formatted string

        @returns BandSeries: This BandSeries

      @method labelValuesExtractor
        @description: Gets the label values extractor.
        @returns Function
          @description: Returns the values to display in the label
          @arg series [Series]: The Series this label extractor has been applied to
          @arg point [Object]: The data point to show label data for
          @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
            @returns Any
          @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
            @returns Any
          @returns [Array[Object]]
            @property name [String]: The name of the label entry
            @property value [Any]: The value of the label entry
            @property formatter [Function]
              @decription: A formatter function that can be used to format the value.
              @arg value [Any]: The value to format
              @returns String: The formatted string

      @method setData
        @arg data [Data]
        @deprecated: Use @code(js)[series.data(data)] to set new data, @code(js)[series.data()] to get the current data.

      @method labelsEnabled
        @description: Sets whether labels should be used for this series
        @arg enabled [Boolean]: True to enable, false to disable
        @returns BarSeries: This BarSeries

      @method labelsEnabled
        @description: Gets whether labels should be displayed for this series
        @returns Boolean: True if they are enabled, false if disabled

      @method labelRenderer
        @description: Sets the label renderer for this series. This allows creation of custom labels
        @arg renderer [Function]
          @arg element [HtmlElement]: The container to populate
          @arg data [Object]
            @description: The data available to be used when rendering the label
        @returns BarSeries: This BarSeries

      @method labelRenderer
        @description: Gets the label renderer for this series.
        @returns Function
          @arg element [HTMLElement]: The container populated
          @arg data [Object]: The data provided for rendering the label

      @property name [String]
        @deprecated: Use @code(js)[series.title(name)] to set the series name, @code(js)[series.title()] to get the name.

      @property class [String]
        @deprecated: Use @code(js)[series._new_class(class)] to set the title. This method will be renamed to @code(js)[series.class()] in 1.0.0. The _new_ prefix is required to avoid naming clash with existing properties. To get the class use @code(js)[series._new_class()].

      @property group [String]
        @deprecated: Use @code(js)[series._new_group("group-name")] to set the group, @code(js)[series.new_group()] to get the group. The _new_ prefix will be dropped in 1.0.0 - it is required to avoid naming clash with existing properties until then.

      @property color [String]
        @deprecated: Use @code(js)[series.fillColor(color)] to set the color, @code(js)[series.fillColor()] to get the color.

      @method title
        @description: Sets the title of the series
        @arg title [String]: The title to give the series - this will appear in the hover labels.
        @returns BarSeries: This BarSeries

      @method title
        @description: Gets the title of the series
        @returns String: The title of the series

      @method _new_class
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Sets an additional class to give the series svg elements.
        @arg class [String]: The class to give the series.
        @returns BarSeries: This BarSeries

      @method _new_class
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Gets the additional class applied to the series svg elements.
        @returns String: The additional class applied to the series.

      @method _new_group
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Sets the group the series belongs to. Series with the same group will be visually grouped together.
        @arg group [String]: The class to give the series.
        @returns BarSeries: This BarSeries

      @method _new_group
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Gets the group the series belongs to.
        @returns String: The group.

      @method fillColor
        @description: Sets the color to fill the bar with
        @arg color [String]: A CSS color string.
        @returns BarSeries: This BarSeries

      @method fillColor
        @description: Gets the color used to fill the bar
        @returns String: The color as a CSS color string

      @method data
        @description
          Sets the data for this series
        @arg data [Array[Object]]
          @description
            @p: An array of objects with x,y properties. The data should be of the form:

            @codeblock js
              [
                {x: 0, y: 10},
                {x: 1, y: 11},
                {x: 2, y: 16},
                {x: 3, y: 12}
              ]

            @p: The color of the bars can also be set per bar as well:

            @codeblock js
              [
                {x: 0, y: 10, color: hx.color.graph[1]},
                {x: 1, y: 11, color: hx.color.graph[2]},
                {x: 2, y: 16, color: hx.color.graph[3]},
                {x: 3, y: 12, color: hx.color.graph[4]}
              ]

        @returns BarSeries: This BarSeries

      @method data
        @description
          Gets the data for this series
        @returns [Array[Object]]
          @description
            @p: An array of objects with x,y properties. The data should be of the form:

            @codeblock js
              [
                {x: 0, y: 10},
                {x: 1, y: 11},
                {x: 2, y: 16},
                {x: 3, y: 12}
              ]

            @p: The color of the bars can also be set per bar as well:

            @codeblock js
              [
                {x: 0, y: 10, color: hx.color.graph[1]},
                {x: 1, y: 11, color: hx.color.graph[2]},
                {x: 2, y: 16, color: hx.color.graph[3]},
                {x: 3, y: 12, color: hx.color.graph[4]}
              ]

    @prototype BandSeries

      @constructor
        @arg? options [Object]
          @property title [String]: The title of the series
            @default: ''

          @property labelsEnabled [Boolean]: Whether labels should be displayed for this series. True if they are enabled, false if disabled
            @default: true

          @property labelRenderer [Function]: The label renderer for this series.
            @arg element [HTMLElement]: The container populated
            @arg data [Object]: The data provided for rendering the label

          @method labelInterpolated [Boolean]: Whether or not label's values should be interpolated. True if the labels are interpolated between data points, false if the labels snap to the closest data point.
            @default: false

          @property fillColor [String]: The color used to fill the series with as a CSS color string.
            @default: [hx.color(hx.theme.plot.colors[2]).alpha(0.2).toString()]

          @property class [String]: The additional class applied to the series svg element.
            @default: ''

          @property data [Array[Object]]
            @description
              @p: An array of objects with x,y properties. The data should be of the form:

              @codeblock js
                [
                  {x: 0, y: 10},
                  {x: 1, y: 11},
                  {x: 2, y: 16},
                  {x: 3, y: 12}
                ]

              @p: The color of the bars can also be set per bar as well:

              @codeblock js
                [
                  {x: 0, y: 10, color: hx.color.graph[1]},
                  {x: 1, y: 11, color: hx.color.graph[2]},
                  {x: 2, y: 16, color: hx.color.graph[3]},
                  {x: 3, y: 12, color: hx.color.graph[4]}
                ]

          @property sampleThreshold [Number]: The maximum number of data points to render when displaying the graph. If there are more data points in the series data than this value, the data will be sampled.
            @default: 200

          @property labelValuesExtractor [Function]: The label values extractor that returns the values to display in the label
            @arg series [Series]: The Series this label extractor has been applied to
            @arg point [Object]: The data point to show label data for
            @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
              @returns Any
            @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
              @returns Any
            @returns [Array[Object]]
              @property name [String]: The name of the label entry
              @property value [Any]: The value of the label entry
              @property formatter [Function]
                @decription: A formatter function that can be used to format the value.
                @arg value [Any]: The value to format
                @returns String: The formatted string

          @property labelFormatters [Object]
            @description
              @p: Optional label formatters for each label value.

              @codeblock js
                new hx.BandSeries({
                  labelFormatters: {
                    'x': function(value) { return x },
                    'y1': hx.format.si(3),
                    'y2': hx.format.si(3)
                  }
                })

      @method title
        @description: Sets the title of the series
        @arg title [String]: The title to give the series - this will appear in the hover labels.
        @returns BandSeries: This BandSeries

      @method title
        @description: Gets the title of the series
        @returns String: The title of the series

      @method fillColor
        @description: Sets the color to fill the band with
        @arg color [String]: A CSS color string.
        @returns BandSeries: This BandSeries

      @method fillColor
        @description: Sets the color to fill the band with
        @arg color [Array[Object]]
          @description: An array of objects which describe a gradient to apply to the band. Colors will be linearly interpolated between the y values specified.
          @property yValue [Number]: A y value to apply a color to.
          @property color [String]: A CSS color string.
        @returns BandSeries: This BandSeries

      @method fillColor
        @description: Gets the color used to fill the band
        @returns String: The color as a CSS color string

      @method _new_class
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Sets an additional class to give the series svg element.
        @arg class [String]: The class to give the series.
        @returns BandSeries: This BandSeries

      @method _new_class
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Gets the additional class applied to the series svg element.
        @returns String: The additional class applied to the series.

      @property feather [Number]
        @deprecated: Use @code(js)[sampleThreshold()] to get the feather value, @code(js)[sampleThreshold(value)] to set it.

      @method sampleThreshold
        @description: Sets the maximum number of data points to render when displaying the graph. If there are more data points in the series data than this value, the data will be sampled.
        @arg count [Number]: The maximum number of data points to display.
        @returns BandSeries: This BandSeries

      @method sampleThreshold
        @description: Gets the maximum number of points that will be shown before sampling is applied.
        @returns Number: The sample threshold.

      @method createLabelValues [Function]
        @arg dataPoint [Object]
          @property x [Number]
          @property y [Number]
        @arg yValueAccessor [Function]
          @arg dataPoint [Object]
        @deprecated: Use labelValuesExtractor() instead.

      @method labelValuesExtractor
        @description: Sets the label values extractor.
        @arg extractor [Function]
          @description: Returns the values to display in the label
          @arg series [Series]: The Series this label extractor has been applied to
          @arg point [Object]: The data point to show label data for
          @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
            @returns Any
          @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
            @returns Any
          @returns [Array[Object]]
            @property name [String]: The name of the label entry
            @property value [Any]: The value of the label entry
            @property formatter [Function]
              @decription: A formatter function that can be used to format the value.
              @arg value [Any]: The value to format
              @returns String: The formatted string

        @returns BandSeries: This BandSeries

      @method labelFormatter
        @description: Sets a label formatter
        @arg name [String]: The formatter to set
        @arg formatter [Function]
          @description: The formatter to use. The formatter converts a value to a string
          @arg value [Any]
          @returns String: The formatted String
        @returns BandSeries: This BandSeries

      @method labelFormatter
        @description: Gets a label formatter
        @arg name [String]: The formatter to get
        @returns Function
          @description: The formatter used for the label component. The formatter converts a value to a string. If there was no formatter set, this will return undefined.
          @arg value [Any]
          @returns String: The formatted String

      @method labelValuesExtractor
        @description: Gets the label values extractor.
        @returns Function
          @description: Returns the values to display in the label
          @arg series [Series]: The Series this label extractor has been applied to
          @arg point [Object]: The data point to show label data for
          @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
            @returns Any
          @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
            @returns Any
          @returns [Array[Object]]
            @property name [String]: The name of the label entry
            @property value [Any]: The value of the label entry
            @property formatter [Function]
              @decription: A formatter function that can be used to format the value.
              @arg value [Any]: The value to format
              @returns String: The formatted string

      @method setData
        @arg data [Data]
        @deprecated: Use @code(js)[series.data(data)] to set new data, @code(js)[series.data()] to get the current data.

      @method labelsEnabled
        @description: Sets whether labels should be used for this series
        @arg enabled [Boolean]: True to enable, false to disable
        @returns BandSeries: This BandSeries

      @method labelsEnabled
        @description: Gets whether labels should be displayed for this series
        @returns Boolean: True if they are enabled, false if disabled

      @method labelRenderer
        @description: Sets the label renderer for this series. This allows creation of custom labels
        @arg renderer [Function]
          @arg element [HtmlElement]: The container to populate
          @arg data [Object]
            @description: The data available to be used when rendering the label
        @returns BandSeries: This BandSeries

      @method labelRenderer
        @description: Gets the label renderer for this series.
        @returns Function
          @arg element [HTMLElement]: The container populated
          @arg data [Object]: The data provided for rendering the label

      @method labelInterpolated
        @description: Sets whether or not label's values should be interpolated.
        @arg interpolate [Boolean]: True to interpolate the labels between data points, false to snap to the closest data point.
        @returns BandSeries: This BandSeries

      @method labelInterpolated
        @description: Gets whether or not label's values should be interpolated.
        @returns Boolean: True if the labels are interpolated between data points, false if the labels snap to the closest data point.

      @property name [String]
        @deprecated: Use @code(js)[series.title(name)] to set the series name, @code(js)[series.title()] to get the name.

      @property class [String]
        @deprecated: Use @code(js)[series._new_class(class)] to set the title. This method will be renamed to @code(js)[series.class()] in 1.0.0. The _new_ prefix is required to avoid naming clash with existing properties. To get the class use @code(js)[series._new_class()].

      @property color [String]
        @deprecated: Use @code(js)[series.fillColor(color)] to set the color, @code(js)[series.fillColor()] to get the color.

      @property color [String/Array]
        @deprecated: Use @code(js)[series.fillColor(color)] to set the color, @code(js)[series.fillColor()] to get the color.

      @method data
        @description
          Sets the data for this series
        @arg data [Array[Object]]
          @description
            @p: An array of objects with x, y1 and y2 properties.The data should be of the form:

            @codeblock js
              [
                {x: 0, y1: 10, y2: 16},
                {x: 1, y1: 11, y2: 17},
                {x: 2, y1: 16, y2: 16},
                {x: 3, y1: 12, y2: 14}
              ]

        @returns BandSeries: This BandSeries

      @method data
        @description
          Gets the data for this series
        @returns [Array[Object]]
          @description
            @p: An array of objects with x, y1 and y2 properties.The data should be of the form:

            @codeblock js
              [
                {x: 0, y1: 10, y2: 16},
                {x: 1, y1: 11, y2: 17},
                {x: 2, y1: 16, y2: 16},
                {x: 3, y1: 12, y2: 14}
              ]

    @prototype ScatterSeries

      @constructor
        @arg? options [Object]
          @property title [String]: The title of the series
            @default: ''

          @property labelsEnabled [Boolean]: Whether labels should be displayed for this series. True if they are enabled, false if disabled
            @default: true

          @property labelRenderer [Function]: The label renderer for this series.
            @arg element [HTMLElement]: The container populated
            @arg data [Object]: The data provided for rendering the label

          @property fillColor [String]: The color used to fill the series with as a CSS color string.
            @default: [hx.theme.plot.colors[3]]

          @property class [String]: The additional class applied to the series svg element.
            @default: ''

          @property radius [Number]: The radius of the scatter points for this series. The radius may also be overidden in the data.
            @default: 2

          @property data [Array[Object]]
            @description
              @p: An array of objects with x, y1 and y2 properties.The data should be of the form:

              @codeblock js
                [
                  {x: 0, y1: 10, y2: 16},
                  {x: 1, y1: 11, y2: 17},
                  {x: 2, y1: 16, y2: 16},
                  {x: 3, y1: 12, y2: 14}
                ]

          @property labelValuesExtractor [Function]: The label values extractor that returns the values to display in the label
            @arg series [Series]: The Series this label extractor has been applied to
            @arg point [Object]: The data point to show label data for
            @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
              @returns Any
            @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
              @returns Any
            @returns [Array[Object]]
              @property name [String]: The name of the label entry
              @property value [Any]: The value of the label entry
              @property formatter [Function]
                @decription: A formatter function that can be used to format the value.
                @arg value [Any]: The value to format
                @returns String: The formatted string


          @property labelFormatters [Object]
            @description
              @p: Optional label formatters for each label value.

              @codeblock js
                new hx.ScatterSeries({
                  labelFormatters: {
                    'x': function(value) { return x },
                    'y': hx.format.si(3)
                  }
                })


      @method createLabelValues [Function]
        @arg dataPoint [Object]
          @property x [Number]
          @property y [Number]
        @deprecated: Use labelValuesExtractor() instead.

      @method labelValuesExtractor
        @description: Sets the label values extractor.
        @arg extractor [Function]
          @description: Returns the values to display in the label
          @arg series [Series]: The Series this label extractor has been applied to
          @arg point [Object]: The data point to show label data for
          @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
            @returns Any
          @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
            @returns Any
          @returns [Array[Object]]
            @property name [String]: The name of the label entry
            @property value [Any]: The value of the label entry
            @property formatter [Function]
              @decription: A formatter function that can be used to format the value.
              @arg value [Any]: The value to format
              @returns String: The formatted string

        @returns ScatterSeries: This ScatterSeries

      @method labelValuesExtractor
        @description: Gets the label values extractor.
        @returns Function
          @description: Returns the values to display in the label
          @arg series [Series]: The Series this label extractor has been applied to
          @arg point [Object]: The data point to show label data for
          @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
            @returns Any
          @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
            @returns Any
          @returns [Array[Object]]
            @property name [String]: The name of the label entry
            @property value [Any]: The value of the label entry
            @property formatter [Function]
              @decription: A formatter function that can be used to format the value.
              @arg value [Any]: The value to format
              @returns String: The formatted string

      @method labelFormatter
        @description: Sets a label formatter
        @arg name [String]: The formatter to set
        @arg formatter [Function]
          @description: The formatter to use. The formatter converts a value to a string
          @arg value [Any]
          @returns String: The formatted String
        @returns ScatterSeries: This ScatterSeries

      @method labelFormatter
        @description: Gets a label formatter
        @arg name [String]: The formatter to get
        @returns Function
          @description: The formatter used for the label component. The formatter converts a value to a string. If there was no formatter set, this will return undefined.
          @arg value [Any]
          @returns String: The formatted String

      @method setData
        @arg data [Data]
        @deprecated: Use @code(js)[series.data(data)] to set new data, @code(js)[series.data()] to get the current data.

      @method labelsEnabled
        @description: Sets whether labels should be used for this series
        @arg enabled [Boolean]: True to enable, false to disable
        @returns ScatterSeries: This ScatterSeries

      @method labelsEnabled
        @description: Gets whether labels should be displayed for this series
        @returns Boolean: True if they are enabled, false if disabled

      @method labelRenderer
        @description: Sets the label renderer for this series. This allows creation of custom labels
        @arg renderer [Function]
          @arg element [HtmlElement]: The container to populate
          @arg data [Object]
            @description: The data available to be used when rendering the label
        @returns ScatterSeries: This ScatterSeries

      @method labelRenderer
        @description: Gets the label renderer for this series.
        @returns Function
          @arg element [HTMLElement]: The container populated
          @arg data [Object]: The data provided for rendering the label

      @property name [String]
        @deprecated: Use @code(js)[series.title(name)] to set the series name, @code(js)[series.title()] to get the name.

      @property class [String]
        @deprecated: Use @code(js)[series._new_class(class)] to set the title. This method will be renamed to @code(js)[series.class()] in 1.0.0. The _new_ prefix is required to avoid naming clash with existing properties. To get the class use @code(js)[series._new_class()].

      @property color [String]
        @deprecated: Use @code(js)[series.fillColor(color)] to set the color, @code(js)[series.fillColor()] to get the color.

      @property size [Number]
        @deprecated: Use @code(js)[series.radius(size)] to set the size, @code(js)[series.radius()] to get the size.

      @method title
        @description: Sets the title of the series
        @arg title [String]: The title to give the series - this will appear in the hover labels.
        @returns ScatterSeries: This ScatterSeries

      @method title
        @description: Gets the title of the series
        @returns String: The title of the series

      @method _new_class
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Sets an additional class to give the series svg elements.
        @arg class [String]: The class to give the series.
        @returns ScatterSeries: This ScatterSeries

      @method _new_class
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Gets the additional class applied to the series svg elements.
        @returns String: The additional class applied to the series.

      @method radius
        @description
          Sets the radius of the scatter points for this series. The radius may also be overidden in the data.
        @arg radius [Number]: The radius of the points in pixels.
        @returns ScatterSeries: This ScatterSeries

      @method radius
        @description
          Gets the radius of the scatter points.
        @returns Number: The radius in pixels.

      @method fillColor
        @description: Sets the color to fill the point with
        @arg color [String]: A CSS color string.
        @returns ScatterSeries: This ScatterSeries

      @method fillColor
        @description: Gets the color used to fill the point
        @returns String: The color as a CSS color string

      @method data
        @description
          Sets the data for this series
        @arg data [Array[Object]]
          @description
            @p: An array of objects with x, y properties. The data should be of the form:

            @codeblock js
              [
                {x: 0, y: 10},
                {x: 1, y: 11},
                {x: 2, y: 16},
                {x: 3, y: 12}
              ]

            @p: The color and size of the points can also be supplied with the data:

            @codeblock js
              [
                {x: 0, y: 10, fillColor: hx.color.graph[1], radius: 1},
                {x: 1, y: 11, fillColor: hx.color.graph[2], radius: 2},
                {x: 2, y: 16, fillColor: hx.color.graph[3], radius: 3},
                {x: 3, y: 12, fillColor: hx.color.graph[4], radius: 4}
              ]
        @returns ScatterSeries: This ScatterSeries

      @method data
        @description
          Gets the data for this series
        @returns [Array[Object]]
          @description
            @p: An array of objects with x, y properties. The data should be of the form:

            @codeblock js
              [
                {x: 0, y: 10},
                {x: 1, y: 11},
                {x: 2, y: 16},
                {x: 3, y: 12}
              ]

            @p: The color and size of the points can also be supplied with the data:

            @codeblock js
              [
                {x: 0, y: 10, fillColor: hx.color.graph[1], radius: 1},
                {x: 1, y: 11, fillColor: hx.color.graph[2], radius: 2},
                {x: 2, y: 16, fillColor: hx.color.graph[3], radius: 3},
                {x: 3, y: 12, fillColor: hx.color.graph[4], radius: 4}
              ]

    @prototype StraightLineSeries

      @constructor
        @arg? options [Object]
          @property title [String]: The title of the series

          @property labelsEnabled [Boolean]: Whether labels should be displayed for this series. True if they are enabled, false if disabled
            @default: true

          @property labelRenderer [Function]: The label renderer for this series.
            @arg element [HTMLElement]: The container populated
            @arg data [Object]: The data provided for rendering the label

          @property strokeColor [String]: The color used to stroke the series with as a CSS color string.
            @default: [hx.theme.plot.colors[4]]

          @property class [String]: The additional class applied to the series svg element.
            @default: ''

          @property data [Array[Object]]
            @description
              @p: An array of objects with x, y properties. The data should be of the form:

              @codeblock js
                [
                  {x: 0, y: 10},
                  {x: 1, y: 11},
                  {x: 2, y: 16},
                  {x: 3, y: 12}
                ]

              @p: The color and size of the points can also be supplied with the data:

              @codeblock js
                [
                  {x: 0, y: 10, fillColor: hx.color.graph[1], radius: 1},
                  {x: 1, y: 11, fillColor: hx.color.graph[2], radius: 2},
                  {x: 2, y: 16, fillColor: hx.color.graph[3], radius: 3},
                  {x: 3, y: 12, fillColor: hx.color.graph[4], radius: 4}
                ]

          @property labelValuesExtractor [Function]: The label values extractor that returns the values to display in the label
            @arg series [Series]: The Series this label extractor has been applied to
            @arg point [Object]: The data point to show label data for
            @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
              @returns Any
            @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
              @returns Any
            @returns [Array[Object]]
              @property name [String]: The name of the label entry
              @property value [Any]: The value of the label entry
              @property formatter [Function]
                @decription: A formatter function that can be used to format the value.
                @arg value [Any]: The value to format
                @returns String: The formatted string

          @property labelFormatters [Object]
            @description
              @p: Optional label formatters for each label value.

              @codeblock js
                new hx.StraightLineSeries({
                  labelFormatters: {
                    'x': function(value) { return x },
                    'y': hx.format.si(3)
                  }
                })


      @method createLabelValues [Function]
        @arg dataPoint [Object]
          @property x [Number]
          @property y [Number]
        @deprecated: Use labelValuesExtractor() instead.

      @method labelValuesExtractor
        @description: Sets the label values extractor.
        @arg extractor [Function]
          @description: Returns the values to display in the label
          @arg series [Series]: The Series this label extractor has been applied to
          @arg point [Object]: The data point to show label data for
          @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
            @returns Any
          @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
            @returns Any
          @returns [Array[Object]]
            @property name [String]: The name of the label entry
            @property value [Any]: The value of the label entry
            @property formatter [Function]
              @decription: A formatter function that can be used to format the value.
              @arg value [Any]: The value to format
              @returns String: The formatted string

        @returns StraightLineSeries: This StraightLineSeries

      @method labelValuesExtractor
        @description: Gets the label values extractor.
        @returns Function
          @description: Returns the values to display in the label
          @arg series [Series]: The Series this label extractor has been applied to
          @arg point [Object]: The data point to show label data for
          @arg? xValueLookup [Function]: Looks up the x value from the data. May be undefined.
            @returns Any
          @arg? yValueLookup [Function]: Looks up the y value from the data. May be undefined.
            @returns Any
          @returns [Array[Object]]
            @property name [String]: The name of the label entry
            @property value [Any]: The value of the label entry
            @property formatter [Function]
              @decription: A formatter function that can be used to format the value.
              @arg value [Any]: The value to format
              @returns String: The formatted string

      @method labelFormatter
        @description: Sets a label formatter
        @arg name [String]: The formatter to set
        @arg formatter [Function]
          @description: The formatter to use. The formatter converts a value to a string
          @arg value [Any]
          @returns String: The formatted String
        @returns StraightLineSeries: This StraightLineSeries

      @method labelFormatter
        @description: Gets a label formatter
        @arg name [String]: The formatter to get
        @returns Function
          @description: The formatter used for the label component. The formatter converts a value to a string. If there was no formatter set, this will return undefined.
          @arg value [Any]
          @returns String: The formatted String

      @method setData
        @arg data [Data]
        @deprecated: Use @code(js)[series.data(data)] to set new data, @code(js)[series.data()] to get the current data.

      @method labelsEnabled
        @description: Sets whether labels should be used for this series
        @arg enabled [Boolean]: True to enable, false to disable
        @returns StraightLineSeries: This StraightLineSeries

      @method labelsEnabled
        @description: Gets whether labels should be displayed for this series
        @returns Boolean: True if they are enabled, false if disabled

      @method labelRenderer
        @description: Sets the label renderer for this series. This allows creation of custom labels
        @arg renderer [Function]
          @arg element [HtmlElement]: The container to populate
          @arg data [Object]
            @description: The data available to be used when rendering the label
        @returns StraightLineSeries: This StraightLineSeries

      @method labelRenderer
        @description: Gets the label renderer for this series.
        @returns Function
          @arg element [HTMLElement]: The container populated
          @arg data [Object]: The data provided for rendering the label

      @property name [String]
        @deprecated: Use @code(js)[series.title(name)] to set the series name, @code(js)[series.title()] to get the name.

      @property class [String]
        @deprecated: Use @code(js)[series._new_class(class)] to set the title. This method will be renamed to @code(js)[series.class()] in 1.0.0. The _new_ prefix is required to avoid naming clash with existing properties. To get the class use @code(js)[series._new_class()].

      @property color [String]
        @deprecated: Use @code(js)[series.strokeColor(color)] to set the color, @code(js)[series.strokeColor()] to get the color.

      @method title
        @description: Sets the title of the series
        @arg title [String]: The title to give the series - this will appear in the hover labels.
        @returns StraightLineSeries: This StraightLineSeries

      @method title
        @description: Gets the title of the series
        @returns String: The title of the series

      @method _new_class
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Sets an additional class to give the series svg element.
        @arg class [String]: The class to give the series.
        @returns StraightLineSeries: This StraightLineSeries

      @method _new_class
        @description
          @notice Note
            The _new_ prefix will be dropped in version 1.0.0.
          @p: Gets the additional class applied to the series svg element.
        @returns String: The additional class applied to the series.

      @method strokeColor
        @description: Sets the color to stroke the series with
        @arg color [String]: A CSS color string.
        @returns StraightLineSeries: This StraightLineSeries

      @method strokeColor
        @description: Gets the color used to stroke the series with
        @returns String: The color as a CSS color string

      @method data
        @description
          Sets the data for this series
        @arg data [Array[Object]]
          @description
            @p: An object describing the line to draw. The data should be of the form:

            @p: A line with a gradient:

            @codeblock js
              {x: 0, y: 10, dx: 2, dy: 3}

            @p: Vertical line:

            @codeblock js
              {x: 50}

            @p: Horizontal line:

            @codeblock js
              {y: 70}

        @returns StraightLineSeries: This StraightLineSeries

      @method data
        @description
          Gets the data for this series
        @returns [Array[Object]]
          @description
            @p: An object describing the line to draw. The data should be of the form:

            @p: A line with a gradient:

            @codeblock js
              {x: 0, y: 10, dx: 2, dy: 3}

            @p: Vertical line:

            @codeblock js
              {x: 50}

            @p: Horizontal line:

            @codeblock js
              {y: 70}


  @theme
    @option pie-segment-text-col
      @type color
      @description: The color for text displayed on top of pie segments
      @default: rgba(255, 255, 255, 0.8)
    @option label-box-shadow
      @type color
      @description: The box shadow for labels
      @default: 1px 1px 1px rgba(0, 0, 0, 0.25)
    @option label-header-background-col
      @type color
      @description: The background color for label headers
      @default: #F3F3F3
    @option label-header-border-col
      @type color
      @description: The border color shown between the label header and the label details
      @default: #E0E0E0

  @extra
    @h1 .docs-module-section: Getting Started
    @inline 0.15.2/handbook/graphs/graphs.um
    @inline 0.15.2/handbook/axes/axes.um
    @inline 0.15.2/handbook/series/series.um
    @inline 0.15.2/handbook/pie-charts/pie-charts.um
