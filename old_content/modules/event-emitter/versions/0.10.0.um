@version 0.10.0

  @api Event Emitter

    @prototype hx.EventEmitter

      @method on
        @removed: The new on method has an optional namespace parameter
        @description
          Register a callback that will be called whenever an event is emitted under the given name
        @arg name [String]: The event type to listen out for
        @arg callback [Function]
          @description: The function to call when the event occurs
          @arg data [EventData]: The data sent along with the event
        @returns EventEmitter: This event emitter

      @method on
        @added
        @description
          Register a callback that will be called whenever an event is emitted under the given name
        @arg name [String]: The event type to listen out for
        @arg? namespace [String]: The namespace to register the handler under. Namespaces isolate groups of handlers. Handlers can be removed by namespace without affecting handlers in other namespaces. The value "default" is reserved and may not be used as a namespace name.
        @arg callback [Function]
          @description: The function to call when the event occurs
          @arg data [EventData]: The data sent along with the event
        @returns EventEmitter: This event emitter

      @method off
        @removed: The new off method has an optional namespace parameter
        @description
          De-register a callback that was registered under the given name
        @arg? name [String]: The event type this callback was registered under.
        @arg? callback [Function]: The callback function to remove.
        @returns EventEmitter: This event emitter

      @method off
        @added
        @description
          De-register a callback that was registered under the given name. If called with no arguments, all handlers will be removed from the event emitter for all names and namespaces.
        @arg? name [String]: The event type this callback was registered under.
        @arg? namespace [String]: The namespace to remove handlers from. If not specified handlers will be removed from all namespaces. To remove handlers from the default handler supply "default" for the namespace name.
        @arg? callback [Function]: The callback function to remove.
        @returns EventEmitter: This event emitter

      @method deregister
        @deprecated: Use eventEmitter.off('event-name', [callback]) instead.
        @description
          De-register a callback that was registered under the given name
        @arg name [String]: The event type this callback was registered under.
        @arg callback [Function]: The callback function to remove.
        @returns EventEmitter: This event emitter

      @method deregisterAll
        @deprecated: Use eventEmitter.off() instead
        @description
          De-registers all callbacks registered under a particular name, or, if no name is supplied de-register all callbacks.
        @arg? name [String]: The event type to de-register callbacks for. If not specified, all callbacks for all names will be removed.
        @returns EventEmitter: This event emitter

      @method has
        @description: Checks if there are any callbacks registered for an event type.
        @arg name [String]: The event type to check.
        @returns Boolean: True if the event type has some callbacks registered.

  @seeAlso
