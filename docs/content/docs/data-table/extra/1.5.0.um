@version 1.5.0
  @h1 .docs-module-section: Using Feeds

  Data tables contain multiple options for displaying the data, as well as flexibility in how the data is provided.
  There are two functions that are available for creating feeds, however custom feeds can also be created.

  @section Using hx.dataTable.objectFeed
    An object feed expects the data to be provided as a whole when the feed is created.
    The below code shows a basic use of the object feed.
    @@codeblock js
      var tableData = {
        headers: [
          { name: 'Name', id: 'name' },
          { name: 'Age', id: 'age' },
          { name: 'Profession', id: 'profession' }
        ],
        rows: [
          {
            id: 0,
            cells: { 'name': 'Bob', 'age': 25, 'profession': 'Developer' }
          },
          {
            id: 1,
            cells: { 'name': 'Jan', 'age': 41, 'profession': 'Artist' }
          },
          {
            id: 2,
            cells: { 'name': 'Dan', 'age': 41, 'profession': 'Builder' }
          }
        ]
      }
      var table = new hx.DataTable('#selector')
      table.feed(hx.dataTable.objectFeed(tableData))

    Alternatively, if the data is returned from a URL request, it can be set as follows:
    @@codeblock js
      hx.json('path_to_your_request.file', function(err, data){
        if (!err) table.feed(hx.dataTable.objectFeed(tableData));
      })

    The object feed handles the sorting and filtering of the data internally making it the preferred choice for small or static data sets.


  @section Using hx.dataTable.urlFeed
    A url feed expects a single url to handle multiple requests and return different types of data.
    They can be created using:
    @@codeblock js
      hx.dataTable.urlFeed('request_url', {
        cache: true, // Whether to attempt caching of data
        extra: // Any extra data to be sent with every request
      })
    There are four different request types made by the url feed, all of which will be @code[POST] requests:

    @h4: headers
    @@codeblock js
      {
        type: 'headers',
        extra: // As defined in the options
      }
    The data returned should be in the following format:
    @@codeblock js
      [
        {
          "name": "columnName", // The name for the heading to display in the table
          "id": "columnID" // The unique ID for the column
        },
        ... // Additional headers
      ]

    @h4: totalCount
    @@codeblock js
      {
        type: 'totalCount',
        extra: // As defined in the options
      }
    The data returned should be in the following format:
    @@codeblock js
      {
        "count": 123 // The total number of rows in the data set
      }
    If the total is unknown, this can return undefined.

    @h4: rows
    The URL feed expects the server to perform any sorting/filtering as part of the 'rows' request.
    @@codeblock js
      {
        type: 'rows',
        range: {
          start: 0, // The start index to get
          end: 14, // The end index to get
          sort: {
            column: undefined, // the sort column
            direction: undefined // The sort direction
          },
          filter: undefined, // The current filter.
          useAdvancedSearch: false // Whether the advanced search is enabled
          advancedSearch: undefined // The currently set advanced search
        }
        extra: // As defined in the options
      }
    The data returned should be in the following format:
    @@codeblock js
      {
        "filteredCount": 10, // The number of rows in the filtered set
        "rows": [
          {
            "id": 0, // The ID for a row
            // hidden details can be specified here (not in the cells object)
            "cells": {
              "columnID": "value" // The cell values for a row in columnID/value pairs
            }
          },
          ... // Additional rows
        ]
      }

    @h4: rowsForIds
    @@codeblock js
      {
        type: 'rowsForIds',
        ids: [1, 2, 3] // The array of ids to get row data for
        extra: // As defined in the options
      }
    The data returned should be in the following format:
    @@codeblock js
      [
        {
          "id": 0, // The ID for a row
          // hidden details can be specified here (not in the cells object)
          "cells": {
            "columnID": "value" // The cell values for a row in columnID/value pairs
          }
        },
        ... // Additional rows
      ]

  @section Creating a custom feed
    In situations where the feeds provided in the @code[hx.dataTable] object are not suitable, custom feeds can be created.
    For instance, if using @code[POST] is not suitable, an alternative could be created:

    @@codeblock js
      // Serializes an object into param=value&param[child]=value
      function serialize (obj, prefix) {
        var arr = []
        for (var p in obj) {
          if (obj.hasOwnProperty(p)) {
            var k = prefix ? prefix + '[' + p + ']' : p, v = obj[p]
            arr.push(typeof v == 'object' ?
              serialize(v, k) :
              encodeURIComponent(k) + '=' + encodeURIComponent(v))
          }
        }
        return arr.join('&')
      }

      function createCustomURLFeed (url) {
        var fetcher = function (data, cb) {
          // Serializes the data so it can be passed over as a GET request
          hx.json(url + '?' + serialize(data), function (err, data) { cb(data) })
        }

        // Return the feed object with headers, rows, rowsForIds and totalCount properties
        return {
          headers: function (cb) {
            fetcher({ type: 'headers' }, cb)
          },
          rows: function (range, cb) {
            fetcher({ type: 'rows', range: range }, cb)
          },
          rowsForIds: function (ids, lookupRow, cb) {
            fetcher({ type: 'rowsForIds', ids: ids }, cb)
          },
          totalCount: function (cb) {
            fetcher({ type: 'totalCount' }, cb)
          }
        }
      }

  @h1 .docs-module-section: Additional options
  As well as the options available on the data table prototype, there are a few extra options when setting the data that can change the table behaviour by default.

  @section Multi column / grouped headers
    It is possible to add grouping to headers by specifying a @code[columns]

    @@codeblock js
      {
        headers:[
          { id: 'name', name: 'Name', groups: ['Group 1']},
          { id: 'age', name: 'Age' },
          { id: 'gender', name: 'Gender', groups: ['Group 2']},
          { id: 'dob', name: 'Date of Birth', groups: ['Group 2']},
          { id: 'salary', name: 'Salary (£)', groups: ['Group 2']}
        ],
        rows: [
          //...
        ]
      }

  @section Wrapping header text for indivual columns
    It is possible to override the @code[allowHeaderWrap] option for an individual column by providing the @code[allowWrap] property in the header colums:
    @@codeblock js
      {
        headers:[
          { id: 'name', name: 'Name' },
          { id: 'age', name: 'Age' },
          { id: 'gender', name: 'Gender' },
          { id: 'dob', name: 'Date of Birth' allowWrap: true },
          { id: 'salary', name: 'Salary (£)' }
        ],
        rows: [
          //...
        ]
      }

  @section Disabling rows
    When a row is rendered, the @code[rowEnabledLookup] function is called. If it returns false, the row will visually disabled and unselectable.
    By default, a row can be made unselectable using a property in the row object:
    @@codeblock js
      [
        {
          id: 'rowId',
          disabled: true,
          cells: {
            ...// Row data
          }
        },
        ... // Additional rows
      ]
    This does not disable row collapsibles.

  @section Making Rows unselectable
    When a row is selected, the @code[rowSelectableLookup] function is called to check whether the row is selectable. If it returns false, the row will not be selected.
    By default, the @code[rowSelectableLookup] function allows all rows to be selected. However, by setting the @code[rowSelectableLookup], the row can be made unselectable:
    @@codeblock js
      dataTable.rowSelectableLookup(function (row) {
        return !row.unselectable;
      })
    @@codeblock js
      [
        {
          id: 'rowId',
          unselectable: true,
          cells: {
            ...// Row data
          }
        },
        ... // Additional rows
      ]

  @pageLink using-the-advanced-search
  @h1 .docs-module-section: Using the Advanced Search

  The advanced search is a feature that enables filtering across multiple columns.

  There are several ways to use the advanced search. It can be used on it's own or can be toggled on/off by the user.

  To show the advanced search toggle, the data table can be set up with:
  @@codeblock js
    {
      filterEnabled: true,
      showAdvancedSearch: true
    }

  @example
    @@html
      <div id="advanced-search-toggle"></div>

    @@js
      var dt = new hx.DataTable('#advanced-search-toggle', {
        feed: tableFeed,
        filterEnabled: true,
        showAdvancedSearch: true
      })
      dt.render()

  This creates the table with the advanced search available but still shows the standard filter until the user enables the advanced search.


  The advanced search can also be used on it's own. To do this, use the following:
  @@codeblock js
    {
      filterEnabled: false,
      advancedSearchEnabled: true
    }

  The @code[advancedSearchEnabled] option is used here. It causes @code[showAdvancedSearch] to be true and shows the advanced search.
  @example
    @@html
      <div id="advanced-search-only"></div>

    @@js
      var dt = new hx.DataTable('#advanced-search-only', {
        feed: tableFeed,
        filterEnabled: false,
        advancedSearchEnabled: true
      })
      dt.render()

  @section How the advanced search works

  The advanced search uses an array of nested arrays of objects with a @code[column] and @code[term] property
  The logic behind the filtering uses @hyperlink(https://en.wikipedia.org/wiki/Disjunctive_normal_form)[Disjunctive Normal Form] (an @code[OR] of @code[AND]s)

  Below is an example of an advanced search:
  @@codeblock js
    [
      [
        { column: 'any', term: 'a' },
        // AND
        { column: 'name', term: 'b' }
      ],
      // OR
      [
        { column: 'profession', term: 'c' }
      ]
    ]

  This would search for rows that match the following criteria:

  @@codeblock js
    (Any column contains 'a' and the name column contains 'b') or (The profession column contains 'c')

  The table user interface mirrors this functionality, allowing the user to add filters row by row and decide whether they are @code[AND] or @code[OR] filters and splits the array(s) accordingly.

  @example
    @@html
      <div id="advanced-search-with-data"></div>

    @@js
      var dt = new hx.DataTable('#advanced-search-with-data', {
        feed: tableFeed,
        advancedSearch: [
          [
            { column: 'any', term: 'a' },
            { column: 'name', term: 'b' }
          ],
          [
            { column: 'profession', term: 'd' }
          ]
        ]
      })
      dt.render()

  @section Using the feeds with advanced search

  When using the advanced search, the @code[rows] function will be given some additional properties as part of the @code[range] object:

  The URL feed expects the server to perform any sorting/filtering as part of the 'rows' request.
  @@codeblock js
    {
      type: 'rows',
      range: {
        start: 0,
        end: 14,
        sort: {
          column: undefined,
          direction: undefined
        },
        filter: undefined,
        useAdvancedSearch: true // Indicates that the filtering should be done using the advanced search
        advancedSearch: [ // The currently set advanced search
          [
            { column: 'any', term: 'a' },
            { column: 'name', term: 'b' }
          ],
          [
            { column: 'profession', term: 'd' }
          ]
        ]
      }
      extra: {}
    }

  As the advanced search and filter can be used interchangeably, the properties will be passed over with each request.
  The @code[useAdvancedSearch] should be used to determine whether to filter using the advanced search or the regular filter.
