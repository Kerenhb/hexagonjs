@description
  The items to use as suggestions for the input field. Data can be specified
  as an array of items or as a function that returns an array of items.

  The data must be in one of the following formats:

  @subsection Array
    @@codeblock json
      [
        "Bob",
        "Steve",
        ...
      ]

    By default, the data is expected as an array of string values. If
    object based data is passed in, an @code[inputMap] must be provided
    in the options:

    @@codeblock js
      data = [
        {
          name "Bob",
          age: 21
        },
        {
          name: "Steve",
          age: 25
        }
      ]
      options = {
        inputMap: function(item){
          return item.name + ', ' + item.age
        }
      }

    A @code[renderer] and @code[filterOptions.searchValues] can also be
    specified to change how the text is displayed and what data is
    searchable, independent of the @code[inputMap].

  @subsection Function

    @@codeblock js
      var data = function(term, callback){
        hx.json('path/to/data?search='+term, function (e, r) {
          callback(r.responseText)
        })
      }

    A 'Loading...' message will be shown whilst the AutoComplete waits
    for a response from this function.

    It can be used in conjunction with the internal matching or be used
    to match externally when setting the @code[matchType] to 'external':

    @@codeblock js
      function data (term, callback) {
        if (term.length > 0) {
          return callback(townAndCountyData.filter(function (d) {
            var d = townAndCountyData[_i]
            var name = d.name.toLowerCase()
            var term = term.toLowerCase()
            var county = d.county.toLowerCase()
            return name.indexOf(term) > -1 || county.indexOf(term) > -1)
          }))
        } else {
          return callback([])
        }
      }

      options.matchType = 'external'

    The term passed in is the current value of the input field (for use
    as a search term).

    The callback is the function that should be called to pass the data
    back to the AutoComplete to display.

    The callback must be called for the AutoComplete to show.
