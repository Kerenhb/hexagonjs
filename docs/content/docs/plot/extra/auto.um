@version 0.9.0
  @topic Graphs

    @section Creating a Graph

      A Graph can be created as follows.

      @@codeblock js
        var graph = new hx.Graph('#my-graph-example');

      The hx.Graph constructor expects a css selector or a HTMLElement.

    @section Creating an Axis

      Before anything can be plotted on this graph, an axis must be added.

      @@codeblock js
        var axis = graph.addAxis();

      This will give you a default axis which has linear scales for the x and y axes.

    @section Creating a Series

      Once an axis has been created, a series can be added. There are a few different series types available, but for this example a simple line series is used.

      @@codeblock js
        var series = axis.addSeries('line', 'Series Name');

    @section Setting the data in a Series

      The last step is to set the data that this series displays.

      @@codeblock js
        // create some fake data
        var data = hx.range(100).map(function(i){return {x: i, y: Math.sin(i/20)} });

        // set the series' data
        series.setData(data);

    @section Rendering the graph

      Now that the graph is set up, a call to .render() is needed to actually draw the graph.

      @@codeblock js
        graph.render();

      The result is this:

      @@html
        <div class="my-graph"></div>

      @@js
        var graph = new hx.Graph('.my-graph');
        var axis = graph.addAxis();
        var series = axis.addSeries('line', 'Series Name');
        var data = hx.range(100).map(function(i){return {x: i, y: Math.sin(i/20)} });
        series.setData(data);
        graph.render();

      @@css
        .my-graph {
          height: 300px;
        }

    @section Colors

      When working with graphs the colors defined in @code[hx.theme.plot.colors] should be used.

  @topic Axes

    @section Using Axis objects

      An Axis is created with default values for all of its parameters. These can be altered to change the behaviour of the Axis. The Api section below describes all of the properties that can be changed.

      In the same way that Axis objects are created/added to Graphs, Series can be added to an Axis. When creating a series, a type and name is expected. The name will be displayed on the graph, and so should be formatted nicely if possible.

      @@codeblock js
        var graph = new hx.Graph('#my-graph-example')
        var axis = graph.addAxis()
        var series = axis.addSeries('line', 'My Series')

  @topic Series

    Multiple kinds of series can added to a single axis. Certain series kinds will naturally group together when plotted on the same axis, such as bar series. Series should be created using the addSeries method on Axis.

    @@css
      .docs-graph {
        height: 200px;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
      }

    @section Line Series

      @example

        @@html
          <div id="line-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#line-series-example');
          var axis = graph.addAxis();
          axis.yScalePaddingMax = 0.1;

          var series = axis.addSeries('line', 'Line Series');

          series.setData(hx.range(50).map(function(d){ return {x: d, y: Math.cos(d/20)}}));
          graph.render();

      The data a line series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

    @section Bar Series

      @example
        @@html
          <div id="bar-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#bar-series-example')
          var axis = graph.addAxis('discrete', 'linear');
          axis.yScalePaddingMax = 0.1
          axis.yMin = 0
          var series = axis.addSeries('bar', 'Bar Series');
          series.setData(hx.range(7).map(function(d){
            return {
              x: d,
              y: Math.cos(d/10),
              color: hx.theme.plot.colors[d]
            }
          }));
          graph.render();

      The data a bar series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

      The optional color property can be set per data point for bar series. If set, it should be a css color string.

    @section Stacked Area and Stacked Bar charts

      Bar series can be stacked by setting the group property to be the same for all series that you want to stack together. The same also is true of line series.

      Stacked Area/Line example:

      @example
        @@html
          <div id="stacked-line-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#stacked-line-example');

          var axis = graph.addAxis();
          axis.yScalePaddingMax = 0.1;

          var series1 = axis.addSeries('line', 'Line Series 1')
          var series2 = axis.addSeries('line', 'Line Series 2')

          series1.setData(hx.range(200).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}}))
          series2.setData(hx.range(200).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}}))

          series1.group = 'group1'
          series1.fill = true
          series1.color = hx.theme.plot.colors[0]
          series2.group = 'group1'
          series2.fill = true
          series2.color = hx.theme.plot.colors[1]

          graph.render()

      Stacked Bar example:

      @example

        @@html
          <div id="stacked-bar-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#stacked-bar-example');

          var axis = graph.addAxis('discrete', 'linear');
          axis.yScalePaddingMax = 0.1;

          var series1 = axis.addSeries('bar', 'Bar Series 1')
          var series2 = axis.addSeries('bar', 'Bar Series 2')

          series1.setData(hx.range(20).map(function(d){ return {x: d, y: (1 - Math.sin(d/10))}}))
          series2.setData(hx.range(20).map(function(d){ return {x: d, y: (1 - Math.sin(d/10))}}))

          series1.group = 'group1'
          series1.fill = true
          series1.color = hx.theme.plot.colors[2]
          series2.group = 'group1'
          series2.fill = true
          series2.color = hx.theme.plot.colors[3]

          graph.render()

    @section Band Series

      @example
        @@html
          <div id="band-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#band-series-example')
          var axis = graph.addAxis();
          axis.yScalePaddingMin = 0.1;
          axis.yScalePaddingMax = 0.1;
          var series = axis.addSeries('band', 'Band Series');
          series.setData(hx.range(200).map(function(d){
            return {
              x: d,
              y1: (1 - Math.sin(d/20)),
              y2: (3.5+Math.sin(d/20))
            }
          }));
          graph.render();

      The data a band series expects is an array of objects with x and y1 and y2 properties. y1 is expected to be smaller than y2:

      @@codeblock json
        [
          {x: 0, y1: 10, y2: 16},
          {x: 1, y1: 11, y2: 17},
          {x: 2, y1: 16, y2: 16},
          {x: 3, y1: 12, y2: 14}
        ]

    @section Scatter Series

      @example
        @@html
          <div id="scatter-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#scatter-series-example')
          var axis = graph.addAxis();
          axis.xScalePaddingMax = 0.1
          axis.xScalePaddingMin = 0.1
          axis.yScalePaddingMax = 0.1
          axis.yScalePaddingMin = 0.1
          var series = axis.addSeries('scatter', 'Scatter Series');
          series.setData(hx.range(100).map(function(d){
            return {
              x: d/10 + Math.random()*2,
              y: d*d/10 + Math.random()*2,
              color: hx.cycle(hx.theme.plot.colors, d)
            }
          }));
          graph.render();

      @@codeblock js
        series = axis.addSeries('scatter', 'Series Name')
        series.setData(...)

      The data a scatter series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

      Other optional properties that can be set alongside the x any y values for each point are 'color' and 'size'. color should be a css color string, and size should be the radius of the point in pixels (the default is 3).

    @section Straight Line Series
      @example
        @@html
          <div id="straight-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#straight-series-example')
          var axis = graph.addAxis();
          axis.xMin = 0
          axis.xMax = 5
          axis.yMin = 0
          axis.yMax = 5
          var series = axis.addSeries('straight-line', 'Straight Line Series');
          series.setData({x: 0, y: 2, dx: 1, dy: 0.5});
          graph.render();

      The data a line series expects is an object which has the properties x, y, dx and dy.

      @@codeblock json
        {x: 50, y: 20, dx: 1, dy: 2}

      You can also specify just an x value or a y value to draw lines aligned with the axes.

      Vertical line:

      @@codeblock json
        {x: 50}

      Horizontal line:

      @@codeblock json
        {y: 70}

  @topic Pie Charts

    @section Creating a pie chart

      Example showing creation of a simple pie chart.

      @example
        @@html
          <div id="docs-pie-example" style="height:200px"></div>

        @@js
          pie = new hx.PieChart('#docs-pie-example');

          pie.setData({
            name: "Pie Chart",
            segments: [
              {
                name: "Segment 1",
                size: 10,
                color: hx.cycle(hx.theme.plot.colors, 0)
              },
              {
                name: "Segment 2",
                size: 10,
                color: hx.cycle(hx.theme.plot.colors, 1)
              },
              {
                name: "Segment 3",
                size: 80,
                color: hx.cycle(hx.theme.plot.colors, 2)
              }
            ]
          });

          pie.render();

      @section Donut Charts

        Pie charts can be turned into donut charts by simply setting the innerPadding property on the pie chart object before rendering:

        @@codeblock js
          pie.innerPadding = 0.5

        @example
          @@html
            <div id="docs-pie2-example" style="height:200px"></div>

          @@js
            pie = new hx.PieChart('#docs-pie2-example');

            pie.innerPadding = 0.5;

            pie.setData({
              name: "Pie Chart",
              segments: [
                {
                  name: "Segment 1",
                  size: 10,
                  color: hx.cycle(hx.theme.plot.colors ,0)
                },
                {
                  name: "Segment 2",
                  size: 10,
                  color: hx.cycle(hx.theme.plot.colors ,1)
                },
                {
                  name: "Segment 3",
                  size: 80,
                  color: hx.cycle(hx.theme.plot.colors ,2)
                }
              ]
            });

            pie.render();

      @section Multiple ring pie charts

        When specifying the data, multiple series can specified. The data supplied must be an array in this case:

        @@codeblock js
          data = [
            {
              name: "Series 1",
              segments: [
                {
                  name: "Segment 1",
                  size: 10,
                  color: hx.cycle(hx.theme.plot.colors, 0)
                },
                {
                  name: "Segment 2",
                  size: 10,
                  color: hx.cycle(hx.theme.plot.colors, 1)
                },
                {
                  name: "Segment 3",
                  size: 80,
                  color: hx.cycle(hx.theme.plot.colors, 2)
                }
              ]
            },
            {
              name: "Series 2",
              segments: [
                {
                  name: "Segment 1",
                  size: 90,
                  color: hx.cycle(hx.theme.plot.colors, 3)
                },
                {
                  name: "Segment 2",
                  size: 20,
                  color: hx.cycle(hx.theme.plot.colors, 4)
                },
                {
                  name: "Segment 3",
                  size: 30,
                  color: hx.cycle(hx.theme.plot.colors, 5)
                }
              ]
            }
          ]

        This would produce the following:

        @example
          @@html
            <div id="docs-pie3-example" style="height:200px"></div>

          @@js
            pie = new hx.PieChart('#docs-pie3-example');

            pie.setData([
              {
                name: "Series 1",
                segments: [
                  {
                    name: "Segment 1",
                    size: 10,
                    color: hx.cycle(hx.theme.plot.colors, 0)
                  },
                  {
                    name: "Segment 2",
                    size: 10,
                    color: hx.cycle(hx.theme.plot.colors, 1)
                  },
                  {
                    name: "Segment 3",
                    size: 80,
                    color: hx.cycle(hx.theme.plot.colors, 2)
                  }
                ]
              },
              {
                name: "Series 2",
                segments: [
                  {
                    name: "Segment 1",
                    size: 90,
                    color: hx.cycle(hx.theme.plot.colors, 3)
                  },
                  {
                    name: "Segment 2",
                    size: 20,
                    color: hx.cycle(hx.theme.plot.colors, 4)
                  },
                  {
                    name: "Segment 3",
                    size: 30,
                    color: hx.cycle(hx.theme.plot.colors, 5)
                  }
                ]
              }
            ]);

            pie.render();

@version 0.15.2
  @topic Graphs

    @section Creating a Graph

      A Graph can be created as follows.

      @@codeblock js
        var graph = new hx.Graph('#my-graph-example');

      The hx.Graph constructor expects a css selector or a HTMLElement.

    @section Creating an Axis

      Before anything can be plotted on this graph, an axis must be added.

      @@codeblock js
        var axis = graph.addAxis();

      This will give you a default axis which has linear scales for the x and y axes.

    @section Creating a Series

      Once an axis has been created, a series can be added. There are a few different series types available, but for this example a simple line series is used.

      @@codeblock js
        var series = axis.addSeries('line', {title: 'Series Name'});

    @section Setting the data in a Series

      The last step is to set the data that this series displays.

      @@codeblock js
        // create some fake data
        var data = hx.range(100).map(function(i){return {x: i, y: Math.sin(i/20)} });

        // set the series' data
        series.data(data);

    @section Rendering the graph

      Now that the graph is set up, a call to .render() is needed to actually draw the graph.

      @@codeblock js
        graph.render();

      The result is this:

      @@html
        <div class="my-graph"></div>

      @@js
        var graph = new hx.Graph('.my-graph');
        var axis = graph.addAxis();
        var series = axis.addSeries('line', {title: 'Series Name' });
        var data = hx.range(100).map(function(i){return {x: i, y: Math.sin(i/20)} });
        series.data(data);
        graph.render();

      @@css
        .my-graph {
          height: 300px;
        }

    @section Colors

      When working with graphs the colors defined in @code[hx.theme.plot.colors] can be used.

  @topic Axes

    @section Using Axis objects

      An Axis is created with default values for all of its parameters. These can be altered to change the behaviour of the Axis. The Api section below describes all of the properties that can be changed.

      In the same way that Axis objects are created/added to Graphs, Series can be added to an Axis. When creating a series, a type and name is expected. The name will be displayed on the graph, and so should be formatted nicely if possible.

      @@codeblock js
        var graph = new hx.Graph('#my-graph-example')
        var axis = graph.addAxis()
        var series = axis.addSeries('line', 'My Series')

  @topic Series

    Multiple kinds of series can added to a single axis. Certain series kinds will naturally group together when plotted on the same axis, such as bar series. Series should be created using the addSeries method on Axis.

    @@css
      .docs-graph {
        height: 200px;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
      }

    @section Line Series

      @example

        @@html
          <div id="line-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#line-series-example');
          var axis = graph.addAxis({
            y: {
              scalePaddingMax: 0.1
            }
          });

          var series = axis.addSeries('line', { title: 'Line Series' });

          series.data(hx.range(50).map(function(d){ return {x: d, y: Math.cos(d/20)}}));
          graph.render();

      The data a line series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

    @section Bar Series

      @example
        @@html
          <div id="bar-series-example" class='docs-graph'></div>

        @@js

          var graph = new hx.Graph('#bar-series-example')

          var axis = graph.addAxis({
            x: {
              scaleType: 'discrete'
            },
            y: {
              scaleType: 'linear',
              scalePaddingMax: 0.1,
              yMin: 0
            }
          });

          axis.addSeries('bar', {
            title: 'Bar Series',
            data: hx.range(7).map(function (d) {
              return {
                x: d,
                y: Math.cos(d/10),
                color: hx.theme.plot.colors[d]
              }
            })
          });

          graph.render();

      The data a bar series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

      The optional color property can be set per data point for bar series. If set, it should be a css color string.

    @section Stacked Area and Stacked Bar charts

      Bar series can be stacked by setting the group property to be the same for all series that you want to stack together. The same also is true of line series.

      Stacked Area/Line example:

      @example
        @@html
          <div id="stacked-line-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#stacked-line-example');

          var axis = graph.addAxis({
            y: {
              scalePaddingMax: 0.1
            }
          });

          axis.addSeries('line', {
            title: 'Line Series 1',
            group: 'group-1',
            fillEnabled: true,
            strokeColor: hx.theme.plot.colors[0],
            data: hx.range(200).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          axis.addSeries('line', {
            title: 'Line Series 2',
            group: 'group-1',
            fillEnabled: true,
            strokeColor: hx.theme.plot.colors[1],
            data: hx.range(200).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          graph.render()

      Stacked Bar example:

      @example

        @@html
          <div id="stacked-bar-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#stacked-bar-example');

          var axis = graph.addAxis({
            x: {
              scaleType: 'discrete'
            },
            y: {
              scalePaddingMax: 0.1
            }
          });

          axis.addSeries('bar', {
            title: 'Bar Series 1',
            group: 'group-1',
            fillColor: hx.theme.plot.colors[2],
            data: hx.range(20).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          axis.addSeries('bar', {
            title: 'Bar Series 2',
            group: 'group-1',
            fillColor: hx.theme.plot.colors[3],
            data: hx.range(20).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          graph.render()

    @section Band Series

      @example
        @@html
          <div id="band-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#band-series-example')
          var axis = graph.addAxis({
            y: {
              min: 0,
              scalePaddingMin: 0.1,
              scalePaddingMax: 0.1
            }
          });

          var series = axis.addSeries('band', {
            title: 'Band Series',
            data: hx.range(200).map(function(d){
              return {
                x: d,
                y1: (1 - Math.sin(d/20)),
                y2: (4+Math.sin(d/20))
              }
            })
          });

          graph.render();

      The data a band series expects is an array of objects with x and y1 and y2 properties. y1 is expected to be smaller than y2:

      @@codeblock json
        [
          {x: 0, y1: 10, y2: 16},
          {x: 1, y1: 11, y2: 17},
          {x: 2, y1: 16, y2: 16},
          {x: 3, y1: 12, y2: 14}
        ]

    @section Scatter Series

      @example
        @@html
          <div id="scatter-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#scatter-series-example')

          var axis = graph.addAxis({
            x: {
              scalePaddingMin: 0.1,
              scalePaddingMax: 0.1
            },
            y: {
              scalePaddingMin: 0.1,
              scalePaddingMax: 0.1
            }
          });

          var series = axis.addSeries('scatter', {
            title: 'Scatter Series',
            data: hx.range(100).map(function(d){
              return {
                x: Math.pow(Math.random()-0.5, 3) * 3,
                y: Math.pow(Math.random()-0.5, 3) * 3,
                color: hx.cycle(hx.theme.plot.colors, d)
              }
            })
          });

          graph.render();

      @@codeblock js
        series = axis.addSeries('scatter', 'Series Name')
        series.setData(...)

      The data a scatter series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

      Other optional properties that can be set alongside the x any y values for each point are 'color' and 'size'. color should be a css color string, and size should be the radius of the point in pixels (the default is 3).

    @section Straight Line Series
      @example
        @@html
          <div id="straight-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#straight-series-example')

          var axis = graph.addAxis({
            x: {
              min: 0,
              max: 5
            },
            y: {
              min: 0,
              max: 5
            }
          });

          var series = axis.addSeries('straight-line', {
            title: 'Straight Line Series',
            data: {x: 0, y: 2, dx: 1, dy: 0.5}
          });

          graph.render();

      The data a line series expects is an object which has the properties x, y, dx and dy.

      @@codeblock json
        {x: 50, y: 20, dx: 1, dy: 2}

      You can also specify just an x value or a y value to draw lines aligned with the axes.

      Vertical line:

      @@codeblock json
        {x: 50}

      Horizontal line:

      @@codeblock json
        {y: 70}

  @topic Pie Charts

    @section Creating a pie chart

      Example showing creation of a simple pie chart.

      @example
        @@html
          <div id="docs-pie-example" style="height:200px"></div>

        @@js
          pie = new hx.PieChart('#docs-pie-example');

          pie.data({
            title: "Pie Chart",
            segments: [
              {
                name: "Segment 1",
                size: 10,
                color: hx.cycle(hx.theme.plot.colors, 0)
              },
              {
                name: "Segment 2",
                size: 10,
                color: hx.cycle(hx.theme.plot.colors, 1)
              },
              {
                name: "Segment 3",
                size: 80,
                color: hx.cycle(hx.theme.plot.colors, 2)
              }
            ]
          });

          pie.render();

      @section Donut Charts

        Pie charts can be turned into donut charts by simply passing in the innerPadding option when creating a pie:

        @@codeblock js
          new hx.PieChart('#docs-pie2-example',{
            innerPadding: 0.5
          });

        @example
          @@html
            <div id="docs-pie2-example" style="height:200px"></div>

          @@js
            pie = new hx.PieChart('#docs-pie2-example',{
              innerPadding: 0.5
            });

            pie.data({
              title: "Pie Chart",
              segments: [
                {
                  name: "Segment 1",
                  size: 10,
                  color: hx.cycle(hx.theme.plot.colors ,0)
                },
                {
                  name: "Segment 2",
                  size: 10,
                  color: hx.cycle(hx.theme.plot.colors ,1)
                },
                {
                  name: "Segment 3",
                  size: 80,
                  color: hx.cycle(hx.theme.plot.colors ,2)
                }
              ]
            });

            pie.render();

      @section Multiple ring pie charts

        When specifying the data, multiple series can specified. The data supplied must be an array in this case:

        @@codeblock js
          data = [
            {
              title: "Series 1",
              segments: [
                {
                  name: "Segment 1",
                  size: 10,
                  color: hx.cycle(hx.theme.plot.colors, 0)
                },
                {
                  name: "Segment 2",
                  size: 10,
                  color: hx.cycle(hx.theme.plot.colors, 1)
                },
                {
                  name: "Segment 3",
                  size: 80,
                  color: hx.cycle(hx.theme.plot.colors, 2)
                }
              ]
            },
            {
              title: "Series 2",
              segments: [
                {
                  name: "Segment 1",
                  size: 90,
                  color: hx.cycle(hx.theme.plot.colors, 3)
                },
                {
                  name: "Segment 2",
                  size: 20,
                  color: hx.cycle(hx.theme.plot.colors, 4)
                },
                {
                  name: "Segment 3",
                  size: 30,
                  color: hx.cycle(hx.theme.plot.colors, 5)
                }
              ]
            }
          ]

        This would produce the following:

        @example
          @@html
            <div id="docs-pie3-example" style="height:200px"></div>

          @@js
            pie = new hx.PieChart('#docs-pie3-example');

            pie.data([
              {
                title: "Series 1",
                segments: [
                  {
                    name: "Segment 1",
                    size: 10,
                    color: hx.cycle(hx.theme.plot.colors, 0)
                  },
                  {
                    name: "Segment 2",
                    size: 10,
                    color: hx.cycle(hx.theme.plot.colors, 1)
                  },
                  {
                    name: "Segment 3",
                    size: 80,
                    color: hx.cycle(hx.theme.plot.colors, 2)
                  }
                ]
              },
              {
                title: "Series 2",
                segments: [
                  {
                    name: "Segment 1",
                    size: 90,
                    color: hx.cycle(hx.theme.plot.colors, 3)
                  },
                  {
                    name: "Segment 2",
                    size: 20,
                    color: hx.cycle(hx.theme.plot.colors, 4)
                  },
                  {
                    name: "Segment 3",
                    size: 30,
                    color: hx.cycle(hx.theme.plot.colors, 5)
                  }
                ]
              }
            ]);

            pie.render();

@version 1.0.0
  @topic Graphs

    @section Creating a Graph

      A Graph can be created as follows.

      @@codeblock js
        var graph = new hx.Graph('#my-graph-example');

      The hx.Graph constructor expects a css selector or a HTMLElement.

    @section Creating an Axis

      Before anything can be plotted on this graph, an axis must be added.

      @@codeblock js
        var axis = graph.addAxis();

      This will give you a default axis which has linear scales for the x and y axes.

    @section Creating a Series

      Once an axis has been created, a series can be added. There are a few different series types available, but for this example a simple line series is used.

      @@codeblock js
        var series = axis.addSeries('line', {title: 'Series Name'});

    @section Setting the data in a Series

      The last step is to set the data that this series displays.

      @@codeblock js
        // create some fake data
        var data = hx.range(100).map(function(i){return {x: i, y: Math.sin(i/20)} });

        // set the series' data
        series.data(data);

    @section Rendering the graph

      Now that the graph is set up, a call to .render() is needed to actually draw the graph.

      @@codeblock js
        graph.render();

      The result is this:

      @@html
        <div class="my-graph"></div>

      @@js
        var graph = new hx.Graph('.my-graph');
        var axis = graph.addAxis();
        var series = axis.addSeries('line', {title: 'Series Name' });
        var data = hx.range(100).map(function(i){return {x: i, y: Math.sin(i/20)} });
        series.data(data);
        graph.render();

      @@css
        .my-graph {
          height: 300px;
        }

    @section Colors

      When working with graphs the colors defined in @code[hx.theme.plot.colors] can be used.

  @topic Axes

    @section Using Axis objects

      An Axis is created with default values for all of its parameters. These can be altered to change the behaviour of the Axis. The Api section below describes all of the properties that can be changed.

      In the same way that Axis objects are created/added to Graphs, Series can be added to an Axis. When creating a series, a type and name is expected. The name will be displayed on the graph, and so should be formatted nicely if possible.

      @@codeblock js
        var graph = new hx.Graph('#my-graph-example')
        var axis = graph.addAxis()
        var series = axis.addSeries('line', 'My Series')

  @topic Series

    Multiple kinds of series can added to a single axis. Certain series kinds will naturally group together when plotted on the same axis, such as bar series. Series should be created using the addSeries method on Axis.

    @@css
      .docs-graph {
        height: 200px;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
      }

    @section Line Series

      @example

        @@html
          <div id="line-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#line-series-example');
          var axis = graph.addAxis({
            y: {
              scalePaddingMax: 0.1
            }
          });

          var series = axis.addSeries('line', { title: 'Line Series' });

          series.data(hx.range(50).map(function(d){ return {x: d, y: Math.cos(d/20)}}));
          graph.render();

      The data a line series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

    @section Bar Series

      @example
        @@html
          <div id="bar-series-example" class='docs-graph'></div>

        @@js

          var graph = new hx.Graph('#bar-series-example')

          var axis = graph.addAxis({
            x: {
              scaleType: 'discrete'
            },
            y: {
              scaleType: 'linear',
              scalePaddingMax: 0.1,
              yMin: 0
            }
          });

          axis.addSeries('bar', {
            title: 'Bar Series',
            data: hx.range(7).map(function (d) {
              return {
                x: d,
                y: Math.cos(d/10),
                color: hx.theme.plot.colors[d]
              }
            })
          });

          graph.render();

      The data a bar series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

      The optional color property can be set per data point for bar series. If set, it should be a css color string.

    @section Stacked Area and Stacked Bar charts

      Bar series can be stacked by setting the group property to be the same for all series that you want to stack together. The same also is true of line series.

      Stacked Area/Line example:

      @example
        @@html
          <div id="stacked-line-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#stacked-line-example');

          var axis = graph.addAxis({
            y: {
              scalePaddingMax: 0.1
            }
          });

          axis.addSeries('line', {
            title: 'Line Series 1',
            group: 'group-1',
            fillEnabled: true,
            strokeColor: hx.theme.plot.colors[0],
            data: hx.range(200).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          axis.addSeries('line', {
            title: 'Line Series 2',
            group: 'group-1',
            fillEnabled: true,
            strokeColor: hx.theme.plot.colors[1],
            data: hx.range(200).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          graph.render()

      Stacked Bar example:

      @example

        @@html
          <div id="stacked-bar-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#stacked-bar-example');

          var axis = graph.addAxis({
            x: {
              scaleType: 'discrete'
            },
            y: {
              scalePaddingMax: 0.1
            }
          });

          axis.addSeries('bar', {
            title: 'Bar Series 1',
            group: 'group-1',
            fillColor: hx.theme.plot.colors[2],
            data: hx.range(20).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          axis.addSeries('bar', {
            title: 'Bar Series 2',
            group: 'group-1',
            fillColor: hx.theme.plot.colors[3],
            data: hx.range(20).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          graph.render()

    @section Band Series

      @example
        @@html
          <div id="band-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#band-series-example')
          var axis = graph.addAxis({
            y: {
              min: 0,
              scalePaddingMin: 0.1,
              scalePaddingMax: 0.1
            }
          });

          var series = axis.addSeries('band', {
            title: 'Band Series',
            data: hx.range(200).map(function(d){
              return {
                x: d,
                y1: (1 - Math.sin(d/20)),
                y2: (4+Math.sin(d/20))
              }
            })
          });

          graph.render();

      The data a band series expects is an array of objects with x and y1 and y2 properties. y1 is expected to be smaller than y2:

      @@codeblock json
        [
          {x: 0, y1: 10, y2: 16},
          {x: 1, y1: 11, y2: 17},
          {x: 2, y1: 16, y2: 16},
          {x: 3, y1: 12, y2: 14}
        ]

    @section Scatter Series

      @example
        @@html
          <div id="scatter-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#scatter-series-example')

          var axis = graph.addAxis({
            x: {
              scalePaddingMin: 0.1,
              scalePaddingMax: 0.1
            },
            y: {
              scalePaddingMin: 0.1,
              scalePaddingMax: 0.1
            }
          });

          var series = axis.addSeries('scatter', {
            title: 'Scatter Series',
            data: hx.range(100).map(function(d){
              return {
                x: Math.pow(Math.random()-0.5, 3) * 3,
                y: Math.pow(Math.random()-0.5, 3) * 3,
                color: hx.cycle(hx.theme.plot.colors, d)
              }
            })
          });

          graph.render();

      @@codeblock js
        series = axis.addSeries('scatter', 'Series Name')
        series.setData(...)

      The data a scatter series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

      Other optional properties that can be set alongside the x any y values for each point are 'color' and 'size'. color should be a css color string, and size should be the radius of the point in pixels (the default is 3).

    @section Straight Line Series
      @example
        @@html
          <div id="straight-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#straight-series-example')

          var axis = graph.addAxis({
            x: {
              min: 0,
              max: 5
            },
            y: {
              min: 0,
              max: 5
            }
          });

          var series = axis.addSeries('straight-line', {
            title: 'Straight Line Series',
            data: {x: 0, y: 2, dx: 1, dy: 0.5}
          });

          graph.render();

      The data a line series expects is an object which has the properties x, y, dx and dy.

      @@codeblock json
        {x: 50, y: 20, dx: 1, dy: 2}

      You can also specify just an x value or a y value to draw lines aligned with the axes.

      Vertical line:

      @@codeblock json
        {x: 50}

      Horizontal line:

      @@codeblock json
        {y: 70}

  @topic Pie Charts

    @section Creating a pie chart

      Example showing creation of a simple pie chart.

      @example
        @@html
          <div id="docs-pie-example" style="height:200px"></div>

        @@js
          pie = new hx.PieChart('#docs-pie-example');

          pie.data({
            title: "Pie Chart",
            segments: [
              {
                name: "Segment 1",
                size: 10,
                fillColor: hx.cycle(hx.theme.plot.colors, 0)
              },
              {
                name: "Segment 2",
                size: 10,
                fillColor: hx.cycle(hx.theme.plot.colors, 1)
              },
              {
                name: "Segment 3",
                size: 80,
                fillColor: hx.cycle(hx.theme.plot.colors, 2)
              }
            ]
          });

          pie.render();

      @section Donut Charts

        Pie charts can be turned into donut charts by simply passing in the innerPadding option when creating a pie:

        @@codeblock js
          new hx.PieChart('#docs-pie2-example',{
            innerPadding: 0.5
          });

        @example
          @@html
            <div id="docs-pie2-example" style="height:200px"></div>

          @@js
            pie = new hx.PieChart('#docs-pie2-example',{
              innerPadding: 0.5
            });

            pie.data({
              title: "Pie Chart",
              segments: [
                {
                  name: "Segment 1",
                  size: 10,
                  fillColor: hx.cycle(hx.theme.plot.colors ,0)
                },
                {
                  name: "Segment 2",
                  size: 10,
                  fillColor: hx.cycle(hx.theme.plot.colors ,1)
                },
                {
                  name: "Segment 3",
                  size: 80,
                  fillColor: hx.cycle(hx.theme.plot.colors ,2)
                }
              ]
            });

            pie.render();

      @section Multiple ring pie charts

        When specifying the data, multiple series can specified. The data supplied must be an array in this case:

        @@codeblock js
          data = [
            {
              title: "Series 1",
              segments: [
                {
                  name: "Segment 1",
                  size: 10,
                  fillColor: hx.cycle(hx.theme.plot.colors, 0)
                },
                {
                  name: "Segment 2",
                  size: 10,
                  fillColor: hx.cycle(hx.theme.plot.colors, 1)
                },
                {
                  name: "Segment 3",
                  size: 80,
                  fillColor: hx.cycle(hx.theme.plot.colors, 2)
                }
              ]
            },
            {
              title: "Series 2",
              segments: [
                {
                  name: "Segment 1",
                  size: 90,
                  fillColor: hx.cycle(hx.theme.plot.colors, 3)
                },
                {
                  name: "Segment 2",
                  size: 20,
                  fillColor: hx.cycle(hx.theme.plot.colors, 4)
                },
                {
                  name: "Segment 3",
                  size: 30,
                  fillColor: hx.cycle(hx.theme.plot.colors, 5)
                }
              ]
            }
          ]

        This would produce the following:

        @example
          @@html
            <div id="docs-pie3-example" style="height:200px"></div>

          @@js
            pie = new hx.PieChart('#docs-pie3-example');

            pie.data([
              {
                title: "Series 1",
                segments: [
                  {
                    name: "Segment 1",
                    size: 10,
                    fillColor: hx.cycle(hx.theme.plot.colors, 0)
                  },
                  {
                    name: "Segment 2",
                    size: 10,
                    fillColor: hx.cycle(hx.theme.plot.colors, 1)
                  },
                  {
                    name: "Segment 3",
                    size: 80,
                    fillColor: hx.cycle(hx.theme.plot.colors, 2)
                  }
                ]
              },
              {
                title: "Series 2",
                segments: [
                  {
                    name: "Segment 1",
                    size: 90,
                    fillColor: hx.cycle(hx.theme.plot.colors, 3)
                  },
                  {
                    name: "Segment 2",
                    size: 20,
                    fillColor: hx.cycle(hx.theme.plot.colors, 4)
                  },
                  {
                    name: "Segment 3",
                    size: 30,
                    fillColor: hx.cycle(hx.theme.plot.colors, 5)
                  }
                ]
              }
            ]);

            pie.render();

@version 2.0.0
  @topic Graphs

    @section Creating a Graph

      A Graph can be created as follows.

      @@codeblock js
        var graph = new hx.Graph('#my-graph-example');

      The hx.Graph constructor expects a css selector or a HTMLElement.

    @section Creating an Axis

      Before anything can be plotted on this graph, an axis must be added.

      @@codeblock js
        var axis = graph.addAxis();

      This will give you a default axis which has linear scales for the x and y axes.

    @section Creating a Series

      Once an axis has been created, a series can be added. There are a few different series types available, but for this example a simple line series is used.

      @@codeblock js
        var series = axis.addSeries('line', {title: 'Series Name'});

    @section Setting the data in a Series

      The last step is to set the data that this series displays.

      @@codeblock js
        // create some fake data
        var data = hx.range(100).map(function(i){return {x: i, y: Math.sin(i/20)} });

        // set the series' data
        series.data(data);

    @section Rendering the graph

      Now that the graph is set up, a call to .render() is needed to actually draw the graph.

      @@codeblock js
        graph.render();

      The result is this:

      @@html
        <div class="my-graph"></div>

      @@js
        var graph = new hx.Graph('.my-graph');
        var axis = graph.addAxis();
        var series = axis.addSeries('line', {title: 'Series Name' });
        var data = hx.range(100).map(function(i){return {x: i, y: Math.sin(i/20)} });
        series.data(data);
        graph.render();

      @@css
        .my-graph {
          height: 300px;
        }

    @section Colors

      When working with graphs the colors defined in @code[hx.theme().plot.colors] can be used.

  @topic Axes

    @section Using Axis objects

      An Axis is created with default values for all of its parameters. These can be altered to change the behaviour of the Axis. The Api section below describes all of the properties that can be changed.

      In the same way that Axis objects are created/added to Graphs, Series can be added to an Axis. When creating a series, a type and name is expected. The name will be displayed on the graph, and so should be formatted nicely if possible.

      @@codeblock js
        var graph = new hx.Graph('#my-graph-example')
        var axis = graph.addAxis()
        var series = axis.addSeries('line', 'My Series')

  @topic Series

    Multiple kinds of series can added to a single axis. Certain series kinds will naturally group together when plotted on the same axis, such as bar series. Series should be created using the addSeries method on Axis.

    @@css
      .docs-graph {
        height: 200px;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
      }

    @section Line Series

      @example

        @@html
          <div id="line-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#line-series-example');
          var axis = graph.addAxis({
            y: {
              scalePaddingMax: 0.1
            }
          });

          var series = axis.addSeries('line', { title: 'Line Series' });

          series.data(hx.range(50).map(function(d){ return {x: d, y: Math.cos(d/20)}}));
          graph.render();

      The data a line series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

    @section Bar Series

      @example
        @@html
          <div id="bar-series-example" class='docs-graph'></div>

        @@js

          var graph = new hx.Graph('#bar-series-example')

          var axis = graph.addAxis({
            x: {
              scaleType: 'discrete'
            },
            y: {
              scaleType: 'linear',
              scalePaddingMax: 0.1,
              yMin: 0
            }
          });

          axis.addSeries('bar', {
            title: 'Bar Series',
            data: hx.range(7).map(function (d) {
              return {
                x: d,
                y: Math.cos(d/10),
                color: hx.theme().plot.colors[d]
              }
            })
          });

          graph.render();

      The data a bar series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

      The optional color property can be set per data point for bar series. If set, it should be a css color string.

    @section Stacked Area and Stacked Bar charts

      Bar series can be stacked by setting the group property to be the same for all series that you want to stack together. The same also is true of line series.

      Stacked Area/Line example:

      @example
        @@html
          <div id="stacked-line-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#stacked-line-example');

          var axis = graph.addAxis({
            y: {
              scalePaddingMax: 0.1
            }
          });

          axis.addSeries('line', {
            title: 'Line Series 1',
            group: 'group-1',
            fillEnabled: true,
            strokeColor: hx.theme().plot.colors[0],
            data: hx.range(200).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          axis.addSeries('line', {
            title: 'Line Series 2',
            group: 'group-1',
            fillEnabled: true,
            strokeColor: hx.theme().plot.colors[1],
            data: hx.range(200).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          graph.render()

      Stacked Bar example:

      @example

        @@html
          <div id="stacked-bar-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#stacked-bar-example');

          var axis = graph.addAxis({
            x: {
              scaleType: 'discrete'
            },
            y: {
              scalePaddingMax: 0.1
            }
          });

          axis.addSeries('bar', {
            title: 'Bar Series 1',
            group: 'group-1',
            fillColor: hx.theme().plot.colors[2],
            data: hx.range(20).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          axis.addSeries('bar', {
            title: 'Bar Series 2',
            group: 'group-1',
            fillColor: hx.theme().plot.colors[3],
            data: hx.range(20).map(function(d){ return {x: d, y: (1 - Math.sin(d/20))}})
          })

          graph.render()

    @section Band Series

      @example
        @@html
          <div id="band-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#band-series-example')
          var axis = graph.addAxis({
            y: {
              min: 0,
              scalePaddingMin: 0.1,
              scalePaddingMax: 0.1
            }
          });

          var series = axis.addSeries('band', {
            title: 'Band Series',
            data: hx.range(200).map(function(d){
              return {
                x: d,
                y1: (1 - Math.sin(d/20)),
                y2: (4+Math.sin(d/20))
              }
            })
          });

          graph.render();

      The data a band series expects is an array of objects with x and y1 and y2 properties. y1 is expected to be smaller than y2:

      @@codeblock json
        [
          {x: 0, y1: 10, y2: 16},
          {x: 1, y1: 11, y2: 17},
          {x: 2, y1: 16, y2: 16},
          {x: 3, y1: 12, y2: 14}
        ]

    @section Scatter Series

      @example
        @@html
          <div id="scatter-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#scatter-series-example')

          var axis = graph.addAxis({
            x: {
              scalePaddingMin: 0.1,
              scalePaddingMax: 0.1
            },
            y: {
              scalePaddingMin: 0.1,
              scalePaddingMax: 0.1
            }
          });

          var series = axis.addSeries('scatter', {
            title: 'Scatter Series',
            data: hx.range(100).map(function(d){
              return {
                x: Math.pow(Math.random()-0.5, 3) * 3,
                y: Math.pow(Math.random()-0.5, 3) * 3,
                color: hx.cycle(hx.theme().plot.colors, d)
              }
            })
          });

          graph.render();

      @@codeblock js
        series = axis.addSeries('scatter', 'Series Name')
        series.setData(...)

      The data a scatter series expects is an array of objects with x and y properties:

      @@codeblock json
        [
          {x: 0, y: 10},
          {x: 1, y: 11},
          {x: 2, y: 16},
          {x: 3, y: 12}
        ]

      Other optional properties that can be set alongside the x any y values for each point are 'color' and 'size'. color should be a css color string, and size should be the radius of the point in pixels (the default is 3).

    @section Straight Line Series
      @example
        @@html
          <div id="straight-series-example" class='docs-graph'></div>

        @@js
          var graph = new hx.Graph('#straight-series-example')

          var axis = graph.addAxis({
            x: {
              min: 0,
              max: 5
            },
            y: {
              min: 0,
              max: 5
            }
          });

          var series = axis.addSeries('straight-line', {
            title: 'Straight Line Series',
            data: {x: 0, y: 2, dx: 1, dy: 0.5}
          });

          graph.render();

      The data a line series expects is an object which has the properties x, y, dx and dy.

      @@codeblock json
        {x: 50, y: 20, dx: 1, dy: 2}

      You can also specify just an x value or a y value to draw lines aligned with the axes.

      Vertical line:

      @@codeblock json
        {x: 50}

      Horizontal line:

      @@codeblock json
        {y: 70}

  @topic Pie Charts

    @section Creating a pie chart

      Example showing creation of a simple pie chart.

      @example
        @@html
          <div id="docs-pie-example" style="height:200px"></div>

        @@js
          pie = new hx.PieChart('#docs-pie-example');

          pie.data({
            title: "Pie Chart",
            segments: [
              {
                name: "Segment 1",
                size: 10,
                fillColor: hx.cycle(hx.theme().plot.colors, 0)
              },
              {
                name: "Segment 2",
                size: 10,
                fillColor: hx.cycle(hx.theme().plot.colors, 1)
              },
              {
                name: "Segment 3",
                size: 80,
                fillColor: hx.cycle(hx.theme().plot.colors, 2)
              }
            ]
          });

          pie.render();

      @section Donut Charts

        Pie charts can be turned into donut charts by simply passing in the innerPadding option when creating a pie:

        @@codeblock js
          new hx.PieChart('#docs-pie2-example',{
            innerPadding: 0.5
          });

        @example
          @@html
            <div id="docs-pie2-example" style="height:200px"></div>

          @@js
            pie = new hx.PieChart('#docs-pie2-example',{
              innerPadding: 0.5
            });

            pie.data({
              title: "Pie Chart",
              segments: [
                {
                  name: "Segment 1",
                  size: 10,
                  fillColor: hx.cycle(hx.theme().plot.colors ,0)
                },
                {
                  name: "Segment 2",
                  size: 10,
                  fillColor: hx.cycle(hx.theme().plot.colors ,1)
                },
                {
                  name: "Segment 3",
                  size: 80,
                  fillColor: hx.cycle(hx.theme().plot.colors ,2)
                }
              ]
            });

            pie.render();

      @section Multiple ring pie charts

        When specifying the data, multiple series can specified. The data supplied must be an array in this case:

        @@codeblock js
          data = [
            {
              title: "Series 1",
              segments: [
                {
                  name: "Segment 1",
                  size: 10,
                  fillColor: hx.cycle(hx.theme().plot.colors, 0)
                },
                {
                  name: "Segment 2",
                  size: 10,
                  fillColor: hx.cycle(hx.theme().plot.colors, 1)
                },
                {
                  name: "Segment 3",
                  size: 80,
                  fillColor: hx.cycle(hx.theme().plot.colors, 2)
                }
              ]
            },
            {
              title: "Series 2",
              segments: [
                {
                  name: "Segment 1",
                  size: 90,
                  fillColor: hx.cycle(hx.theme().plot.colors, 3)
                },
                {
                  name: "Segment 2",
                  size: 20,
                  fillColor: hx.cycle(hx.theme().plot.colors, 4)
                },
                {
                  name: "Segment 3",
                  size: 30,
                  fillColor: hx.cycle(hx.theme().plot.colors, 5)
                }
              ]
            }
          ]

        This would produce the following:

        @example
          @@html
            <div id="docs-pie3-example" style="height:200px"></div>

          @@js
            pie = new hx.PieChart('#docs-pie3-example');

            pie.data([
              {
                title: "Series 1",
                segments: [
                  {
                    name: "Segment 1",
                    size: 10,
                    fillColor: hx.cycle(hx.theme().plot.colors, 0)
                  },
                  {
                    name: "Segment 2",
                    size: 10,
                    fillColor: hx.cycle(hx.theme().plot.colors, 1)
                  },
                  {
                    name: "Segment 3",
                    size: 80,
                    fillColor: hx.cycle(hx.theme().plot.colors, 2)
                  }
                ]
              },
              {
                title: "Series 2",
                segments: [
                  {
                    name: "Segment 1",
                    size: 90,
                    fillColor: hx.cycle(hx.theme().plot.colors, 3)
                  },
                  {
                    name: "Segment 2",
                    size: 20,
                    fillColor: hx.cycle(hx.theme().plot.colors, 4)
                  },
                  {
                    name: "Segment 3",
                    size: 30,
                    fillColor: hx.cycle(hx.theme().plot.colors, 5)
                  }
                ]
              }
            ]);

            pie.render();
