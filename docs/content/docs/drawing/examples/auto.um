@version 0.9.0
  @examples
    @example
      @@html
        <div id="drawing" class="drawing-example"></div>

      @@css
        .drawing-example {
          height: 300px;
        }

      @@js
        (function () {
          const speed = 0.1;
          const size = 16;
          const spacing = 3.4;
          const hexGridWidth = 10;
          const hexGridHeight = 15;

          // set up the drawing
          const drawing = new hx.Drawing('#drawing');
          drawing.enablePan();
          drawing.enableZoom();
          drawing.enablePerformanceGauge();
          drawing.camera.zoomMin = 0.05;
          drawing.camera.zoomMax = 3;
          drawing.camera.zoom = 1 * drawing.dpr;
          drawing.camera.position.x = size * (hexGridWidth - 0.5) * spacing / 2;
          drawing.camera.position.y = size * (hexGridHeight - 0.5) / 2;

          // create the grid
          const hexagonCurve = (function() {
            var j, results;
            results = [];
            for (i = j = 0; j < 6; i = ++j) {
              results.push([
                Math.sin((2 * i + 1) * Math.PI / 6) * size,
                Math.cos((2 * i + 1) * Math.PI / 6) * size
                ]);
            }
            return results;
          })();

          const colors = [
            '#3D3D3D',
            '#74B06B',
            '#D89C4D',
            '#697584',
            '#C24563',
            '#98719D',
            '#D0D0D0',
          ];

          hexGrid = (function() {
            var j, ref, results;
            results = [];
            for (x = j = 0, ref = hexGridWidth - 1; (0 <= ref ? j <= ref : j >= ref); x = 0 <= ref ? ++j : --j) {
              results.push((function() {
                var k, ref1, results1;
                results1 = [];
                for (y = k = 0, ref1 = hexGridHeight - 1; (0 <= ref1 ? k <= ref1 : k >= ref1); y = 0 <= ref1 ? ++k : --k) {
                  hex = drawing.create('shape');
                  hex.set('polygon', hexagonCurve);
                  hex.set('position.x', size * spacing * x + size * spacing / 2 * (y % 2));
                  hex.set('position.y', size * 1 * y);
                  hex.set('fill.enabled', true);
                  hex.set('fill.color', colors[1]);
                  object = {
                    generationsAlive: 0,
                    drawingObject: hex,
                    alive: Math.random() > 0.5,
                    nextAlive: false
                  };
                  results1.push(object);
                }
                return results1;
              })());
            }
            return results;
          })();

          // utility methods for the grid
          const getSurroundingCells = function(x, y) {
            var ref, ref1, ref2, ref3, ref4, ref5, xx;
            xx = x + (y % 2) - 1;
            return [(ref = hexGrid[xx]) != null ? ref[y - 1] : void 0, (ref1 = hexGrid[x]) != null ? ref1[y - 2] : void 0, (ref2 = hexGrid[xx + 1]) != null ? ref2[y - 1] : void 0, (ref3 = hexGrid[xx]) != null ? ref3[y + 1] : void 0, (ref4 = hexGrid[x]) != null ? ref4[y + 2] : void 0, (ref5 = hexGrid[xx + 1]) != null ? ref5[y + 1] : void 0].filter(function(d) {
              return d != null;
            });
          };

          const getSecondarySurroundingCells = function(x, y) {
            var ref, ref1, ref2, ref3, ref4, ref5, xx;
            xx = x + (y % 2) - 1;
            return [(ref = hexGrid[x - 1]) != null ? ref[y] : void 0, (ref1 = hexGrid[xx]) != null ? ref1[y - 3] : void 0, (ref2 = hexGrid[xx]) != null ? ref2[y + 3] : void 0, (ref3 = hexGrid[xx + 1]) != null ? ref3[y - 3] : void 0, (ref4 = hexGrid[xx + 1]) != null ? ref4[y + 3] : void 0, (ref5 = hexGrid[x + 1]) != null ? ref5[y] : void 0].filter(function(d) {
              return d != null;
            });
          };

          const iterateGrid = function(f) {
            var j, ref, results;
            results = [];
            for (x = j = 0, ref = hexGridWidth - 1; (0 <= ref ? j <= ref : j >= ref); x = 0 <= ref ? ++j : --j) {
              results.push((function() {
                var k, ref1, results1;
                results1 = [];
                for (y = k = 0, ref1 = hexGridHeight - 1; (0 <= ref1 ? k <= ref1 : k >= ref1); y = 0 <= ref1 ? ++k : --k) {
                  results1.push(f(x, y, hexGrid[x][y]));
                }
                return results1;
              })());
            }
            return results;
          };

          let last = (new Date()).getTime();

          // main loop
          drawing.on('update', function() {
            // control the update rate
            if ((new Date()).getTime() - last >= 100 / speed) {
              last = (new Date()).getTime();
              //hexagonal game of life rules: http://www.well.com/~dgb/hexrules.html
              iterateGrid(function(x, y, cell) {
                var c, j, k, len, len1, ref, ref1, total;
                total = 0;
                ref = getSurroundingCells(x, y);
                for (j = 0, len = ref.length; j < len; j++) {
                  c = ref[j];
                  if (c.alive) {
                    total += 1;
                  }
                }
                ref1 = getSecondarySurroundingCells(x, y);
                for (k = 0, len1 = ref1.length; k < len1; k++) {
                  c = ref1[k];
                  if (c.alive) {
                    total += 0.3;
                  }
                }
                return cell.nextAlive = total >= 2.0 && total < 3.3;
              });
              // draw
              return iterateGrid(function(x, y, cell) {
                cell.alive = cell.nextAlive;
                cell.generationsAlive = cell.alive ? cell.generationsAlive + 1 : 0;
                const color = colors[Math.min(cell.generationsAlive, 4) + 1];
                return cell.drawingObject.set('fill.color', color, 250);
              });
            }
          });
        }())
