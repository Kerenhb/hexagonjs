@version 1.0.0
  @api Plot
    @updated: Removed the deprecated content from all the Plot api's as well as the declarative graphing api (hx.plot), including replacing all of the _new_ prefixed methods/properties with their unprefixed alternatives.

    @enhancement: The plot api uses a new sampling method in this version called the 'Largest Three Buckets' algorithm. This should produce graphs that more faithfully represent the original data when downsampling.

    @function hx.plot
      @removed: The standard api provides a more declarative way of constructing graphs via the options object, so this api is no longer needed.
      @param selector [String/HTMLElement]
      @param description [Object]

    @function hx.pieChart
      @added: Fluid api version of PieChart
      @description: Creates a new PieChart set up on a detached element, wrapped in a selection
      @param options [Object]: See the options object for constructing PieChart
      @returns Selection: A selection containing an element with an PieChart initialised on it

    @function hx.sparkline
      @added: Fluid api version of Sparkline
      @description: Creates a new Sparkline set up on a detached element, wrapped in a selection
      @param options [Object]: See the options object for constructing Sparkline
      @returns Selection: A selection containing an element with an Sparkline initialised on it

    @prototype hx.Sparkline
      @constructor
        @description
        @param selector [HTMLElement/String]
        @param? options [Object]
          @property labelRenderer [Function]: The label renderer for this series.
            @param element [HTMLElement]: The container populated
            @param data [Object]: The data provided for rendering the label
          @property data [Object]:  An array of {x, y} objects.

      @method labelRenderer
        @description: Gets the label renderer for this sparkline
        @returns Function: The label renderer for this sparkline.
          @param element [HTMLElement]: The container populated
          @param data [Object]: The data provided for rendering the label

      @method labelRenderer
        @description: Sets the label renderer for this sparkline
        @param labelRenderer [Function]: The label renderer for for this sparkline.
          @param element [HTMLElement]: The container populated
          @param data [Object]: The data provided for rendering the label
        @returns Sparkline: This Sparkline

      @method data
        @returns [Array[Object]]: The currently set data
        @returns [Array[Number]]
          @removed: Now returns an array of objects

      @method data
        @removed: The data should now be supplied as an array of {x, y} objects
        @param value [Array[Number]]
        @returns Sparkline

      @method data
        @description: Sets the data
        @param value [Array[Object]]: An array of {x, y} objects.
        @returns Sparkline: This Sparkline

    @prototype hx.Graph
      @property zoomStart [Number]
        @removed: Use graph.zoomRangeStart() instead. zoomRangeStart(value) to set, zoomRangeStart() to get.

      @property zoomEnd [Number]
        @removed: Use graph.zoomRangeEnd() instead. zoomRangeEnd(value) to set, zoomRangeEnd() to get.

      @property useZoom [Boolean]
        @removed: Use graph.zoomEnabled() instead. zoomEnabled(value) to set, zoomEnabled() to get.

      @property useLabels [Boolean]
        @removed: Use graph.labelsEnabled() instead. labelsEnabled(value) to set, labelsEnabled() to get.

      @property useLegend [Boolean]
        @removed: Use graph.legendEnabled() instead. legendEnabled(value) to set, legendEnabled() to get.

      @property legendPosition [String]
        @removed: Use graph.legendLocation() instead. legendLocation(value) to set, legendLocation() to get.

      @method addAxis
        @param xScaleType [String]
        @param yScaleType [String]
        @returns Axis
        @removed: Use @code(js)[graph.addAxis(options)] instead.

    @prototype hx.Axis

      @constructor
        @param? xScaleType [String]
        @param? yScaleType [String]
        @removed: Use @code(js)[hx.Axis(options)] instead.

      @method addSeries
        @param type [String]
        @param? name [String]
        @removed: Use @code(js)[addSeries(type, {title: "name"})] instead.

      @property xAxisTickLabelPosition [String]
        @removed: Use @code(js)[Axis.x.axisTickLabelPosition()] instead. @code(js)[Axis.x.axisTickLabelPosition()] to get, @code(js)[Axis.x.axisTickLabelPosition(value)] to set.

      @property xDiscreteLabels [Array]
        @removed: Use @code(js)[Axis.x.discreteLabels()] instead. @code(js)[Axis.x.discreteLabels()] to get, @code(js)[Axis.x.discreteLabels(value)] to set.

      @property xDiscretePadding [Number]
        @removed: Use @code(js)[Axis.x.discretePadding()] instead. @code(js)[Axis.x.discretePadding()] to get, @code(js)[Axis.x.discretePadding(value)] to set.

      @property xFormatter [Function]
        @removed: Use @code(js)[Axis.x.formatter()] instead. @code(js)[Axis.x.formatter()] to get, @code(js)[Axis.x.formatter(value)] to set.
        @param input [Any]

      @property xGridLines [Boolean]
        @removed: Use @code(js)[Axis.x.gridLines()] instead. @code(js)[Axis.x.gridLines()] to get, @code(js)[Axis.x.gridLines(value)] to set.

      @property xMax [Number]
        @removed: Use @code(js)[Axis.x.max()] instead. @code(js)[Axis.x.max()] to get, @code(js)[Axis.x.max(value)] to set.

      @property xMin [Number]
        @removed: Use @code(js)[Axis.x.min()] instead. @code(js)[Axis.x.min()] to get, @code(js)[Axis.x.min(value)] to set.

      @property xNthTickVisible [Number]
        @removed: Use @code(js)[Axis.x.nthTickVisible()] instead. @code(js)[Axis.x.nthTickVisible()] to get, @code(js)[Axis.x.nthTickVisible(value)] to set.

      @property xScalePaddingMax [Number]
        @removed: Use @code(js)[Axis.x.scalePaddingMax()] instead. @code(js)[Axis.x.scalePaddingMax()] to get, @code(js)[Axis.x.scalePaddingMax(value)] to set.

      @property xScalePaddingMin [Number]
        @removed: Use @code(js)[Axis.x.scalePaddingMin()] instead. @code(js)[Axis.x.scalePaddingMin()] to get, @code(js)[Axis.x.scalePaddingMin(value)] to set.

      @property xShowTicks [Boolean]
        @removed: Use @code(js)[Axis.x.showTicks()] instead. @code(js)[Axis.x.showTicks()] to get, @code(js)[Axis.x.showTicks(value)] to set.

      @property xTickSpacing [Number]
        @removed: Use @code(js)[Axis.x.tickSpacing()] instead. @code(js)[Axis.x.tickSpacing()] to get, @code(js)[Axis.x.tickSpacing(value)] to set.

      @property xTitle [String]
        @removed: Use @code(js)[Axis.x.title()] instead. @code(js)[Axis.x.title()] to get, @code(js)[Axis.x.title(value)] to set.

      @property xVisible [Boolean]
        @removed: Use @code(js)[Axis.x.visible()] instead. @code(js)[Axis.x.visible()] to get, @code(js)[Axis.x.visible(value)] to set.

      @property yAxisTickLabelPosition [String]
        @removed: Use @code(js)[Axis.y.axisTickLabelPosition()] instead. @code(js)[Axis.y.axisTickLabelPosition()] to get, @code(js)[Axis.y.axisTickLabelPosition(value)] to set.

      @property yDiscreteLabels [Array]
        @removed: Use @code(js)[Axis.y.discreteLabels()] instead. @code(js)[Axis.y.discreteLabels()] to get, @code(js)[Axis.y.discreteLabels(value)] to set.

      @property yDiscretePadding [Number]
        @removed: Use @code(js)[Axis.y.discretePadding()] instead. @code(js)[Axis.y.discretePadding()] to get, @code(js)[Axis.y.discretePadding(value)] to set.

      @property yFormatter [Function]
        @param input [Any]
        @removed: Use @code(js)[Axis.y.formatter()] instead. @code(js)[Axis.y.formatter()] to get, @code(js)[Axis.y.formatter(value)] to set.

      @property yGridLines [Boolean]
        @removed: Use @code(js)[Axis.y.gridLines()] instead. @code(js)[Axis.y.gridLines()] to get, @code(js)[Axis.y.gridLines(value)] to set.

      @property yMax [Number]
        @removed: Use @code(js)[Axis.y.max()] instead. @code(js)[Axis.y.max()] to get, @code(js)[Axis.y.max(value)] to set.

      @property yMin [Number]
        @removed: Use @code(js)[Axis.y.min()] instead. @code(js)[Axis.y.min()] to get, @code(js)[Axis.y.min(value)] to set.

      @property yNthTickVisible [Number]
        @removed: Use @code(js)[Axis.y.nthTickVisible()] instead. @code(js)[Axis.y.nthTickVisible()] to get, @code(js)[Axis.y.nthTickVisible(value)] to set.

      @property yScalePaddingMax [Number]
        @removed: Use @code(js)[Axis.y.scalePaddingMax()] instead. @code(js)[Axis.y.scalePaddingMax()] to get, @code(js)[Axis.y.scalePaddingMax(value)] to set.

      @property yScalePaddingMin [Number]
        @removed: Use @code(js)[Axis.y.scalePaddingMin()] instead. @code(js)[Axis.y.scalePaddingMin()] to get, @code(js)[Axis.y.scalePaddingMin(value)] to set.

      @property yShowTicks [String]
        @removed: Use @code(js)[Axis.y.showTicks()] instead. @code(js)[Axis.y.showTicks()] to get, @code(js)[Axis.y.showTicks(value)] to set.

      @property yTickSpacing [Number]
        @removed: Use @code(js)[Axis.y.tickSpacing()] instead. @code(js)[Axis.y.tickSpacing()] to get, @code(js)[Axis.y.tickSpacing(value)] to set.

      @property yTitle [String]
        @removed: Use @code(js)[Axis.y.title()] instead. @code(js)[Axis.y.title()] to get, @code(js)[Axis.y.title(value)] to set.

      @property yVisible [Boolean]
        @removed: Use @code(js)[Axis.y.visible()] instead. @code(js)[Axis.y.visible()] to get, @code(js)[Axis.y.visible(value)] to set.

    @prototype hx.PieChart

      @method _new_innerPadding
        @param value [Number]
        @returns PieChart
        @removed

      @method innerPadding
        @description: Sets the inner padding of the pie chart
        @param value [Number]: The inner padding to set
        @returns PieChart: This PieChart

      @method _new_innerPadding
        @returns Number
        @removed

      @method innerPadding
        @description: Gets the current inner padding of the pie chart
        @returns Number: The current inner padding

      @method _new_segmentPadding
        @param value [Number]
        @returns PieChart
        @removed

      @method segmentPadding
        @description: Sets the segment padding of the pie chart
        @param value [Number]: The segment padding to set
        @returns PieChart: This PieChart

      @method _new_segmentPadding
        @returns Number
        @removed

      @method segmentPadding
        @description: Gets the current segment padding of the pie chart
        @returns Number: The current segment padding

      @method _new_ringPadding
        @param value [Number]
        @returns PieChart
        @removed

      @method ringPadding
        @description: Sets the ring padding of the pie chart
        @param value [Number]: The ring padding to set
        @returns PieChart: This PieChart

      @method _new_ringPadding
        @returns Number
        @removed

      @method ringPadding
        @description: Gets the current ring padding of the pie chart
        @returns Number: The current ring padding

      @method _new_totalAngle
        @param value [Number]
        @returns PieChart
        @removed

      @method totalAngle
        @description: Sets the total angle of the pie chart
        @param value [Number]: The total angle to set
        @returns PieChart: This PieChart

      @method _new_totalAngle
        @returns Number
        @removed

      @method totalAngle
        @description: Gets the current total angle of the pie chart
        @returns Number: The current total angle

      @method _new_startAngle
        @param value [Number]
        @returns PieChart
        @removed

      @method startAngle
        @description: Sets the start angle of the pie chart
        @param value [Number]: The start angle to set
        @returns PieChart: This PieChart

      @method _new_startAngle
        @returns Number
        @removed

      @method startAngle
        @description: Gets the current start angle of the pie chart
        @returns Number: The current start angle

      @method _new_segmentTextFormatter
        @param value [Function]
          @param segment [Object]
          @param segments [Array[Object]]
          @returns String
        @returns PieChart
        @removed

      @method segmentTextFormatter
        @description: Sets the segment text formatter of the pie chart
        @param value [Function]: The segment text formatter to set
          @param segment [Object]: The segment to return text for
          @param segments [Array[Object]]: The array of all segments in the ring
          @returns String: The formatted text.
        @returns PieChart: This PieChart

      @method _new_segmentTextFormatter
        @returns Function
        @removed

      @method segmentTextFormatter
        @description: Gets the current segment text formatter of the pie chart
        @returns Function: The current segment text formatter

      @method setData
        @param data [Data]
        @removed: Use piechart.data(data) to set, piechart.data() to get.

      @property formatter [Formatter]
        @removed: Use piechart.labelFormatter(value) to set, piechart.labelFormatter() to get.

      @property color [String]
        @removed: Use piechart.strokeColor(value) to set, piechart.strokeColor() to get.

      @property useSegmentText [Boolean]
        @removed: Use piechart.segmentTextEnabled(value) to set, piechart.segmentTextEnabled() to get.

      @property startAngle [Number]
        @removed: Use piechart.startAngle(value) to set, piechart.startAngle() to get.

      @property totalAngle [Number]
        @removed: Use piechart.totalAngle(value) to set, piechart.totalAngle() to get.

      @property innerPadding [Number]
        @removed: Use piechart.innerPadding(value) to set, piechart.innerPadding() to get.

      @property ringPadding [Number]
        @removed: Use piechart.ringPadding(value) to set, piechart.ringPadding() to get.

      @property segmentPadding [Number]
        @removed: Use piechart.segmentPadding(value) to set, piechart.segmentPadding() to get.

      @property segmentTextFormatter [Function]
        @param segment [Object]
        @param segments [Array[Object]]
        @removed: Use piechart.segmentTextFormatter(value) to set, piechart.segmentTextFormatter() to get.

      @property useLabels [Boolean]
        @removed: Use piechart.labelsEnabled(value) to set, piechart.labelsEnabled() to get.

      @property useLegend [Boolean]
        @removed: Use piechart.legendEnabled(value) to set, piechart.legendEnabled() to get.

      @property legendPosition [String]
        @removed: Use piechart.legendLocation(value) to set, piechart.legendLocation() to get.

      @method createLabelValues [Function]
        @param segment [Object]
        @param ring [Object]
        @returns [Array[Object]]
        @removed: Use piechart.labelValuesExtractor(value) to set, piechart.labelValuesExtractor() to get.

    @prototype LineSeries

      @method _new_group
        @param group [String]
        @returns LineSeries
        @removed

      @method group
        @description: Sets the group the series belongs to. Series with the same group will be stacked on top of each other.
        @param group [String]: The class to give the series.
        @returns LineSeries: This LineSeries

      @method _new_group
        @returns String
        @removed

      @method group
        @description: Gets the group the series belongs to.
        @returns String: The group.

      @method _new_fillColor
        @param color [String]
        @returns LineSeries
        @removed

      @method fillColor
        @description: Sets the color to fill the series with
        @param color [String]: A CSS color string.
        @returns LineSeries: This LineSeries

      @method _new_fillColor
        @returns String
        @removed

      @method fillColor
        @description: Gets the color used to fill the series with
        @returns String: The color as a CSS color string

      @method _new_class
        @param class [String]
        @returns LineSeries
        @removed

      @method class
        @description: Sets an additional class to give the series svg element.
        @param class [String]: The class to give the series.
        @returns LineSeries: This LineSeries

      @method _new_class
        @returns String
        @removed

      @method class
        @description: Gets the additional class applied to the series svg element.
        @returns String: The additional class applied to the series.

      @method _new_markerRadius
        @param radius [Number]
        @returns LineSeries
        @removed

      @method markerRadius
        @description: Sets the radius of the markers in pixels
        @param radius [Number]: A CSS color string.
        @returns LineSeries: This LineSeries

      @method _new_markerRadius
        @returns Number
        @removed

      @method markerRadius
        @description: Gets the radius of the markers in pixels
        @returns Number: The radius of a marker in pixels

      @method createLabelValues [Function]
        @param dataPoint [Object]
          @property x [Number]
          @property y [Number]
        @removed: Use labelValuesExtractor() instead.

      @property feather [Number]
        @removed: Use @code(js)[sampleThreshold()] to get the feather value, @code(js)[sampleThreshold(value)] to set it.

      @method setData
        @param data [Data]
        @removed: Use @code(js)[series.data(data)] to set new data, @code(js)[series.data()] to get the current data.

      @property name [String]
        @removed: Use @code(js)[series.title(name)] to set the series name, @code(js)[series.title()] to get the name.

      @property class [String]
        @removed: Use @code(js)[series.class(class)] to set the series class, @code(js)[series.class()] to get the class.

      @property group [String]
        @removed: Use @code(js)[series.group(name)] to set the series group, @code(js)[series.group()] to get the group.

      @property color [String]
        @removed: Use @code(js)[series.strokeColor(color)] to set the color, @code(js)[series.strokeColor()] to get the color.

      @property fillColor [String]
        @removed: Use @code(js)[series.fillColor(color)] to set the color, @code(js)[series.fillColor()] to get the color.

      @property color [Array[String]]
        @removed: Use @code(js)[series.strokeColor(color)] to set the color, @code(js)[series.strokeColor()] to get the color.

      @property stroke [Boolean]
        @removed: Use @code(js)[series.strokeEnabled(enabled)] to set the state, @code(js)[series.strokeEnabled()] to get it.

      @property fill [Boolean]
        @removed: Use @code(js)[series.fillEnabled(enabled)] to set the state, @code(js)[series.fillEnabled()] to get it.

      @property markers [Boolean]
        @removed: Use @code(js)[series.markersEnabled(enabled)] to set the state, @code(js)[series.markersEnabled()] to get it.

      @property markerColor [String]
        @removed: Use @code(js)[seriesmarkerFillColor(color)] to set the color, @code(js)[seriesmarkerFillColor()] to get the color.

      @property markerRadius [Number]
        @removed: Use @code(js)[_new_markerRadius(radius)] to set the radius, @code(js)[_new_markerRadius()] to get the radius.

    @prototype BarSeries

      @method _new_class
        @param class [String]
        @returns BarSeries
        @removed

      @method class
        @description
          @notice Note
          @p: Sets an additional class to give the series svg elements.
        @param class [String]: The class to give the series.
        @returns BarSeries: This BarSeries

      @method _new_class
        @returns String
        @removed

      @method class
        @description: Gets the additional class applied to the series svg elements.
        @returns String: The additional class applied to the series.

      @method _new_group
        @param group [String]
        @returns BarSeries
        @removed

      @method group
        @description: Sets the group the series belongs to. Series with the same group will be visually grouped together.
        @param group [String]: The class to give the series.
        @returns BarSeries: This BarSeries

      @method _new_group
        @returns String
        @removed

      @method group
        @description: Gets the group the series belongs to.
        @returns String: The group.

      @method createLabelValues [Function]
        @param dataPoint [Object]
          @property x [Number]
          @property y [Number]
        @removed: Use labelValuesExtractor() instead.

      @method setData
        @param data [Data]
        @removed: Use @code(js)[series.data(data)] to set new data, @code(js)[series.data()] to get the current data.

      @property name [String]
        @removed: Use @code(js)[series.title(name)] to set the series name, @code(js)[series.title()] to get the name.

      @property class [String]
        @removed: Use @code(js)[series.class(class)] to set the series class, @code(js)[series.class()] to get the class.

      @property group [String]
        @removed: Use @code(js)[series.group(group)] to set the series group, @code(js)[series.group()] to get the group.

      @property color [String]
        @removed: Use @code(js)[series.fillColor(color)] to set the color, @code(js)[series.fillColor()] to get the color.


    @prototype BandSeries

      @method _new_class
        @param class [String]
        @returns BandSeries
        @removed

      @method class
        @description: Sets an additional class to give the series svg element.
        @param class [String]: The class to give the series.
        @returns BandSeries: This BandSeries

      @method _new_class
        @returns String
        @removed

      @method class
        @description: Gets the additional class applied to the series svg element.
        @returns String: The additional class applied to the series.

      @property feather [Number]
        @removed: Use @code(js)[series.sampleThreshold()] to get the feather value, @code(js)[series.sampleThreshold(value)] to set it.

      @method createLabelValues [Function]
        @param dataPoint [Object]
          @property x [Number]
          @property y [Number]
        @param yValueAccessor [Function]
          @param dataPoint [Object]
        @removed: Use labelValuesExtractor() instead.

      @method setData
        @param data [Data]
        @removed: Use @code(js)[series.data(data)] to set new data, @code(js)[series.data()] to get the current data.

      @property name [String]
        @removed: Use @code(js)[series.title(name)] to set the series name, @code(js)[series.title()] to get the name.

      @property class [String]
        @removed: Use @code(js)[series.class(class)] to set the class, @code(js)[series.class()] to get the class.

      @property color [String]
        @removed: Use @code(js)[series.fillColor(color)] to set the color, @code(js)[series.fillColor()] to get the color.

      @property color [String/Array]
        @removed: Use @code(js)[series.fillColor(color)] to set the color, @code(js)[series.fillColor()] to get the color.

    @prototype ScatterSeries

      @method _new_class
        @param class [String]
        @returns ScatterSeries
        @removed

      @method class
        @description: Sets an additional class to give the series svg elements.
        @param class [String]: The class to give the series.
        @returns ScatterSeries: This ScatterSeries

      @method _new_class
        @returns String
        @removed

      @method class
        @description: Gets the additional class applied to the series svg elements.
        @returns String: The additional class applied to the series.

      @method createLabelValues [Function]
        @param dataPoint [Object]
          @property x [Number]
          @property y [Number]
        @removed: Use labelValuesExtractor() instead.

      @method setData
        @param data [Data]
        @removed: Use @code(js)[series.data(data)] to set new data, @code(js)[series.data()] to get the current data.

      @property name [String]
        @removed: Use @code(js)[series.title(name)] to set the series name, @code(js)[series.title()] to get the name.

      @property class [String]
        @removed: Use @code(js)[series.class(class)] to set the series class, @code(js)[series.class()] to get the class.

      @property color [String]
        @removed: Use @code(js)[series.fillColor(color)] to set the color, @code(js)[series.fillColor()] to get the color.

      @property size [Number]
        @removed: Use @code(js)[series.radius(size)] to set the size, @code(js)[series.radius()] to get the size.


    @prototype StraightLineSeries

      @method _new_class
        @param class [String]
        @returns StraightLineSeries
        @removed

      @method class
        @description: Sets an additional class to give the series svg element.
        @param class [String]: The class to give the series.
        @returns StraightLineSeries: This StraightLineSeries

      @method _new_class
        @returns String
        @removed

      @method class
        @description: Gets the additional class applied to the series svg element.
        @returns String: The additional class applied to the series.


      @method createLabelValues [Function]
        @param dataPoint [Object]
          @property x [Number]
          @property y [Number]
        @removed: Use labelValuesExtractor() instead.

      @method setData
        @param data [Data]
        @removed: Use @code(js)[series.data(data)] to set new data, @code(js)[series.data()] to get the current data.

      @property name [String]
        @removed: Use @code(js)[series.title(name)] to set the series name, @code(js)[series.title()] to get the name.

      @property class [String]
        @removed: Use @code(js)[series.class(class)] to set the series class, @code(js)[series.class()] to get the class.

      @property color [String]
        @removed: Use @code(js)[series.strokeColor(color)] to set the color, @code(js)[series.strokeColor()] to get the color.