@version 0.13.0
  @examples
    @example
      @html
        <button class="hx-btn" id="basicPickerButton">Button</button>
      @js
        var pickerBasic = new hx.ColorPicker("#basicPickerButton")

    @example
      @html
        <button class="hx-btn" id="colorPickerButton">Button</button>
      @js
        var pickerColor = new hx.ColorPicker("#colorPickerButton", {startColor: "#C40030"})

    @example
      @html
        <button class="hx-btn" id="inputPickerButton">Button</button>
      @js
        var pickerBasic = new hx.ColorPicker("#inputPickerButton", {showInputs: true})

    @example
      @html
        <button class="hx-btn" id="eventsPickerButton">Button</button>
        <input id="eventsInputL"/>
        <input id="eventsInputR" />
      @js
        // Update an input box to set the background and text color and display the hex color value in the box.
        var updateBox = function(box, col){
          var elem = hx.select(box)
          elem.value(col.toString().toUpperCase());
          elem.style("background", col.toString());
          elem.style("color", col.getTextCol());
        }

        var pickerEvents = new hx.ColorPicker("#eventsPickerButton", {showInputs: true})

        // Set the initial values of the inputs
        updateBox("#eventsInputL", hx.color(pickerEvents.value()));
        updateBox("#eventsInputR", hx.color(pickerEvents.value()));

        // Add listener for when the currentColor changes.
        pickerEvents.on("change", function(col){
          updateBox("#eventsInputL", col);
        });

        // Add listener for when the color has stopped changing (the user has stopped dragging the controls)
        pickerEvents.on("changeend", function(col){
          updateBox("#eventsInputR", col);
        });

  @api Color Picker
    @prototype hx.ColorPicker
      @enhancement:
        @p: Moved the @code[showInputs] and @code[currentColor] to be accessible as @code[options.showInputs] and @code[value()]
        @p: The value can now also be set with the @code[value(color)] method.
        @issue 391

      @constructor
        @param selector [String]
        @param? startColor [Color]
        @param? showInputs [Boolean]
        @param? align [String]
        @deprecated
          @issue 391
          Use @code[hx.ColorPicker(selector, options)] instead.

      @constructor
        @added
          @issue 391
        @param selector [String/HTMLElement]: The selector to show the color picker for.
        @param? options [Object]: The options to use when setting up the color picker
          @property startColor [Color]: The start color to use when creating the color picker.
            @default #000000
          @property showInputs [Boolean]: Boolean to decide whether or not to show the input boxes for the hex, red, green, blue, hue, saturation and lightness values.
            @default false
          @property align [String]: The alignment of the dropdown (options can be found in the dropdown documentation)
            @default lblt

      @method value
        @added: Added a method for setting the current color
          @issue 391
        @description: A method for setting the value of a color picker
        @param value [String/Color]: The color to set the color picker to.
        @returns ColorPicker: This ColorPicker

      @method value
        @added: Added a method for getting the current color
          @issue 391
        @description: A method for getting the value of a color picker
        @returns String: The currently set color value.

      @property currentColor [Color]
        @deprecated
          Use the value() method

      @property showInputs [Boolean]
        @deprecated
          Use options.showInputs instead

      @method on
        @param name [String]
        @param callback [Function]
          @param data [Any]

        @event dropdown.showstart
          @added: Pipe the dropdown events through so they can be listened to directly.
          @description: Emitted when the dropdown animation starts. No data is sent with this event.

        @event dropdown.showend
          @added: Pipe the dropdown events through so they can be listened to directly.
          @description: Emitted when the dropdown animation finishes. No data is sent with this event.

        @event dropdown.hidestart
          @added: Pipe the dropdown events through so they can be listened to directly.
          @description: Emitted when the dropdown animation starts. No data is sent with this event.

        @event dropdown.hideend
          @added: Pipe the dropdown events through so they can be listened to directly.
          @description: Emitted when the dropdown animation ends. No data is sent with this event.

        @event dropdown.change [Boolean]
          @added: Pipe the dropdown events through so they can be listened to directly.
          @description: Emitted when the dropdown is shown or hidden
          @data [Boolean]: A boolean indicating whether or not the dropdown is hidden.