@version 0.12.4

  @description
    @p: Helper methods for retrieving a components backing object. This makes debugging easier, and also means that you don't have to always hold component objects in your javascript - they are bound to the element they are initialised on.
    @p: When debugging in chrome or firefox, you can select an element in the dom tree (in the elements or inspector tab), then use @code(js)[hx.component($0)] to retrieve the object backing that element (if there is one)

  @examples
    @example
      @html
        <div id="my-tag-input"></div>
        <button class="hx-btn" id="my-button">Get Tags</button>
      @js
        new hx.TagInput('#my-tag-input')

        hx.select('#my-button').on('click', function(){
          var tagInput = hx.component('#my-tag-input')
          hx.notify().info('Tags: ' + tagInput.tags().join(', '))
        })

  @api Component
    @function hx.component
      @added: A new method for retrieving the component object backing an element
      @description
        Returns the component backing the element passed in.
      @param node [String/HTMLElement]: The element to retrieve the component from (or a css selector that uniquly identifies an element)
      @returns Object: The object backing the element passed in.

    @function hx.components
      @added: A new method for retrieving all the components objects backing an element
      @description
        Returns the components backing the element passed in.
      @param node [String/HTMLElement]: The element to retrieve the components from (or a css selector that uniquly identifies an element)
      @returns [Array[Object]]: The objects backing the element passed in.
