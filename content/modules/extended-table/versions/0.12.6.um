@version 0.12.6
  @api Extended Table
    @prototype hx.Table
      @bugfix: Fixed a styling bug where the selected row was not highlighted for mobile view
      @updated:
        @p: Added the @code[rowSelectableLookup] function to determine whether a row is selectable after it has been clicked and added the ability to disable row selection entirely using the @code[unselectable] property in the row data.
        @issue 537
      @method on
        @added: Added a 'rowclick' event for when a row in the table is clicked on.
        @param name [String]
        @param callback [Function]
          @param data [Any]

        @event sort
        @event filter
        @event rowselect
        @event rowcollapsible
        @event render

        @event rowclick: An event called when a row is clicked
          @data Object
            @property data [Object/Array]: The row data
            @property node [Node]: The row node

      @property options [Object]

        @property rowSelectableLookup [Function]
          @added: Added a function that is called when a row is selected to determine whether the row should be able to be selected.
            @issue 537
          @description
            @p: A function for looking up whether a row is selectable when it is clicked or selected by the select all tick.
            @p: This function should call the callback with true if the row is selectable and false if it is not, this will prevent the row being selected.
            @p: A notification should be provided to the user that indicates that the row is not selectable.
            @p: The default value is:
            @codeblock js
              function (data, callback) {
                callback(true)
              }
          @param data [Array/Object]: The row data object
          @param callback [Function]: The callback function to call with the result

      @method setData
        @description
          Sets for the table to use.

        @param data [Object/String/Function]
          @updated: Added the ability to make rows unselectable when rendering the table.
            @issue 537
          @description
            The data source to use for the table. When using function or server side data feeds, you are responsible for filtering and sorting the data (since it will typically be done on the server). For an object data source the table will take care of the filtering and sorting. The data must be in one of the following formats:

            @collapsible Object
              @codeblock js
                {
                  head:{ // header object
                    columns:[ // object for each column
                      { value:"Name" },
                      { value:"Age" },
                      { value:"Gender" },
                      { value:"Date of Birth" },
                      { value:"Salary (£)" }
                    ]
                  },
                  "body":[
                    [ "Bob", "23", "Male", "1970-01-01", "20001" ],
                    [ "Jane", "27", "Female", "1971-02-03", "21345" ],
                    ... // Additional Rows
                  ]
                }

              The data can also be specified with additional properties for the rows. The table will only look for data in the 'columns' property, any other values will be ignored. They will be returned as part of the row data in methods like 'getSelected':

              @codeblock js
                {
                  ...
                  "body":[
                    [
                      {
                        prop: 'id',
                        columns: [ "Bob", "23", "Male", "1970-01-01", "20001" ]
                      },
                      ...
                    ]
                  ]
                }

              Additionally, column data can also be specified in object format:

              @codeblock js
                {
                  ...
                  "body":[
                    [{value: 1, formatted: "1.0"}, {value: 4, formatted: "4.0"}, {value: 8, formatted: "8.0"}],
                  ]
                }

              If data is provided in this format, a cellValueLookup (or similar function) must be provided.


            @collapsible Function
              @codeblock js
                var feed = function(request, callback) {
                  if (request.type == 'header') {
                    // available request properties:
                    // request.type
                    // request.extra
                    var headerData = ... // get the header data from somewhere
                    callback(headerData);
                  }
                  if (request.type == 'rowCount') {
                    // available request properties:
                    // request.type
                    // request.extra
                    var rowCount = ... // get the total number of rows from somewhere
                    callback(rowCount);
                  }
                  if (request.type == 'rows') {
                    // available request properties:
                    // request.type
                    // request.extra
                    // request.startRow
                    // request.endRow
                    // request.filters
                    // request.sortColumn
                    // request.sortDirection
                    // get the total number of rows from somewhere
                    var rows = ...
                    // get the total number of rows from somewhere
                    var totalProcessedSize = ...
                    callback(rows, totalProcessedSize);
                  }
                }
                table.setData(feed, {id: 'my-table-id'})



            @collapsible Server Side
              @codeblock js
                table.setData('https://example.com/data', {id: 'my-table-id'})

              <b>Note</b> In this case, the server must respond correctly to the post requests that are made. The post request will contain some json that describes the data that should be returned. The possible types of request are:

              @h3: Header
              @h4: Request
              @codeblock js
                {
                  "type": "header",
                  "extra": {
                    // the extra object that was supplied when calling setData
                  }
                }


              @p: You should respond with the header info in json form:
              @h4: Response
              @codeblock js
                {
                  head: {
                    columns:[ // object for each column
                      { value:"Name" },
                      { value:"Age" },
                      { value:"Gender" },
                      { value:"Date of Birth"},
                      { value:"Salary (£)" }
                    ]
                  }
                }

              @h3: Row count
              @h4: Request
              @codeblock js
                {
                  "type": "rowCount",
                  "extra": {
                    // the extra object that was supplied when calling setData
                  }
                }

              @h4: Response
              @codeblock js
                {
                  "count": 12345, // the total number of rows in the data set
                }

              @h3: Row data
              @h4: Request
              @codeblock js
                {
                  "type": "rows",
                  "startRow": 0,
                  "endRow": 99,
                  "filters": {
                    "age": "10"
                  },
                  "sortColumn": "name",
                  "sortDirection": true,
                  "extra": {
                    // the extra object that was supplied when calling setData
                  }
                }

              @h4: Response
              @codeblock js
                {
                  "rows": [
                    [
                      "Bob",
                      "23",
                      "Male",
                      "1970-01-01",
                      "20001"
                    ],
                    ... // Additional Rows
                  ],
                  "processedSize": 1050 // the total number of rows in the processed (filtered and sorted) data set
                }

            @h3: Adding multi column / grouped headers
            However the data is set, it is possible to add grouping to headers by specifying a @code(js)[groups] array for the header @code(js)[columns]

            @codeblock js
              {
                columns:[ // object for each column
                  { value:"Name", groups:["Group 1"]},
                  { value:"Age" },
                  { value:"Gender", groups:["Group 2"]},
                  { value:"Date of Birth", groups:["Group 2"]},
                  { value:"Salary (£)", groups:["Group 2"]}
                ]
              }

            @h3: Wrapping header text for individual columns

            @p: It is possible to override the @code[allowHeaderWrap] option for an individual column by providing the allowWrap property in the header colums:
            @codeblock js
              {
                head: {
                  columns:[ // object for each column
                    { value:"Name" },
                    { value:"Age" },
                    { value:"Gender" },
                    { value:"Date of Birth", allowWrap: true}, // Column will wrap if needed
                    { value:"Salary (£)", allowWrap: false } // Column will never wrap
                  ]
                }
              }

            @h3: Making rows unselectable
            @p: It is possible to prevent rows from being selected by providing the @code[unselectable] property in the row data. This will cause the row tick to be disabled and prevent the row from being selected by any means.
            @codeblock js
              {
                head:...
                body: [
                  {
                    unselectable: true,
                    columns: [
                      ...// Row data
                    ]
                  }
                ]
              }
            @p: If this value is set, the row will always be unselectable and as such will not be passed through the @code[rowSelectableLookup] function.

        @param? extra [Object]

        @param? clearSorts [Boolean]

        @param? clearFilters [Boolean]

        @param? callback [Function]

  @theme
    @option row-unselectable-background-col
      @description: The background color to use when a row is unselectable
      @type color
      @default #FAFAFA

    @option row-unselectable-text-col
      @description: The text color to use when a row is unselectable
      @type color
      @default #939393