@define cardComponent
  @function {{ps}}
    @description: Creates a card {{cs}}. Cards can be made up of multiple sections and groups.
    @returns Selection: Returns a selection containing the detached element
    @group Component
      @object api
        @description
          This api can be obtained like this

          @codeblock js
            var {{cs}} = {{ps}}()
            var api = {{cs}}.component()

        @property context [Function]
          @description: Gets the context of the {{cs}}
          @returns String: The context of the {{cs}} (can be one of the standard hexagon contexts - 'positive', 'negative', 'warning', 'info', 'action', etc)

        @property context [Function]
          @description: Sets the context of the {{cs}}
          @param context [String]: The context to set (can be one of the standard hexagon contexts - 'positive', 'negative', 'warning', 'info', 'action', etc)
          @returns Object: Returns this api object.

@define textLikeComponent
  @function {{ps}}
    @description: Creates an {{cs}}.
    @returns Selection: Returns a selection containing the detached element
    @group Component
      @object api
        @description
          This api can be obtained like this

          @codeblock js
            var {{cs}} = {{ps}}()
            var api = {{cs}}.component()

        @property context [Function]
          @description: Gets the context of the {{cs}} component
          @returns String: The context of the {{cs}} component (can be one of the standard hexagon contexts - 'positive', 'negative', 'warning', 'info', 'action', etc)

        @property context [Function]
          @description: Sets the context of the {{cs}} component
          @param context [String]: The context to set (can be one of the standard hexagon contexts - 'positive', 'negative', 'warning', 'info', 'action', etc)
          @returns Object: Returns this api object.

        @property text [Function]
          @description: Gets the text of the {{cs}} component
          @returns String: The text of the {{cs}} component

        @property text [Function]
          @description: Sets the text of the {{cs}} component
          @param text [String]: The text to set
          @returns Object: Returns this api object.

@define iconLikeComponent
  @function {{ps}}
    @description: {{cs}}.
    @returns Selection: Returns a selection containing the detached element
    @group Component
      @object api
        @description
          This api can be obtained like this

          @codeblock js
            var icon = {{ps}}()
            var api = icon.component()

        @property context [Function]
          @description: Gets the context of the icon
          @returns String: The context (can be one of the standard hexagon contexts - 'positive', 'negative', 'warning', 'info', 'action', etc)

        @property context [Function]
          @description: Sets the context of the icon
          @param context [String]: The context to set (can be one of the standard hexagon contexts - 'positive', 'negative', 'warning', 'info', 'action', etc)
          @returns Object: Returns this api object.

        @property icon [Function]
          @description: Gets the icon class
          @returns String: The icon class

        @property icon [Function]
          @description: Sets the icon class
          @param icon [String]: The icon class to set
          @returns Object: Returns this api object.

@version 1.0.0

  @examples
    @example
      @html html
        <div id="card-container"></div>
      @js
        @inline 1.0.0/example.js

  @api Card

    @function hx.card
      @description: Creates a detached card element wrapped in a selection
      @returns Selection: The element wrapped in a hexagon selection

    @group Empty Sections
      @cardComponent hx.card.section: section
      @cardComponent hx.card.header.section: section
      @cardComponent hx.card.joint.section: section
      @cardComponent hx.card.joint.header.section: section
      @cardComponent hx.card.fixed.section: section
      @cardComponent hx.card.fixed.header.section: section
      @cardComponent hx.card.fixed.joint.section: section
      @cardComponent hx.card.fixed.joint.header.section: section
      @cardComponent hx.card.small.fixed.section: section
      @cardComponent hx.card.small.fixed.header.section: section
      @cardComponent hx.card.small.fixed.joint.section: section
      @cardComponent hx.card.small.fixed.joint.header.section: section
      @cardComponent hx.card.normal.fixed.section: section
      @cardComponent hx.card.normal.fixed.header.section: section
      @cardComponent hx.card.normal.fixed.joint.section: section
      @cardComponent hx.card.normal.fixed.joint.header.section: section
      @cardComponent hx.card.slim.fixed.section: section
      @cardComponent hx.card.slim.fixed.header.section: section
      @cardComponent hx.card.slim.fixed.joint.section: section
      @cardComponent hx.card.slim.fixed.joint.header.section: section

    @group Empty Groups
      @cardComponent hx.card.group: group
      @cardComponent hx.card.vertical.group: group
      @cardComponent hx.card.header.group: group
      @cardComponent hx.card.vertical.header.group: group

      @cardComponent hx.card.joint.group: group
      @cardComponent hx.card.joint.vertical.group: group
      @cardComponent hx.card.joint.header.group: group
      @cardComponent hx.card.joint.vertical.header.group: group

      @cardComponent hx.card.fixed.group: group
      @cardComponent hx.card.fixed.vertical.group: group
      @cardComponent hx.card.fixed.header.group: group
      @cardComponent hx.card.fixed.vertical.header.group: group

      @cardComponent hx.card.fixed.joint.group: group
      @cardComponent hx.card.fixed.joint.vertical.group: group
      @cardComponent hx.card.fixed.joint.header.group: group
      @cardComponent hx.card.fixed.joint.vertical.header.group: group

      @cardComponent hx.card.small.fixed.group: group
      @cardComponent hx.card.small.fixed.vertical.group: group
      @cardComponent hx.card.small.fixed.header.group: group
      @cardComponent hx.card.small.fixed.vertical.header.group: group
      @cardComponent hx.card.small.fixed.joint.group: group
      @cardComponent hx.card.small.fixed.joint.vertical.group: group
      @cardComponent hx.card.small.fixed.joint.header.group: group
      @cardComponent hx.card.small.fixed.joint.vertical.header.group: group

      @cardComponent hx.card.normal.fixed.group: group
      @cardComponent hx.card.normal.fixed.vertical.group: group
      @cardComponent hx.card.normal.fixed.header.group: group
      @cardComponent hx.card.normal.fixed.vertical.header.group: group
      @cardComponent hx.card.normal.fixed.joint.group: group
      @cardComponent hx.card.normal.fixed.joint.vertical.group: group
      @cardComponent hx.card.normal.fixed.joint.header.group: group
      @cardComponent hx.card.normal.fixed.joint.vertical.header.group: group

      @cardComponent hx.card.slim.fixed.group: group
      @cardComponent hx.card.slim.fixed.vertical.group: group
      @cardComponent hx.card.slim.fixed.header.group: group
      @cardComponent hx.card.slim.fixed.vertical.header.group: group
      @cardComponent hx.card.slim.fixed.joint.group: group
      @cardComponent hx.card.slim.fixed.joint.vertical.group: group
      @cardComponent hx.card.slim.fixed.joint.header.group: group
      @cardComponent hx.card.slim.fixed.joint.vertical.header.group: group

      @function hx.card.aligned
        @description: Creates a container that aligns sections inside groups. This should contain groups that contain sections in order to work.
        @extra example
          @p: The structure should look something like this

          @codeblock js
            hx.card.aligned()
              .add(hx.card.group()
                .add(hx.card.section())
                .add(hx.card.section())
                .add(hx.card.section()))
              .add(hx.card.group()
                .add(hx.card.section())
                .add(hx.card.section())
                .add(hx.card.section()))
              .add(hx.card.group()
                .add(hx.card.section())
                .add(hx.card.section())
                .add(hx.card.section()))

        @returns Selection: The container wrapped in a selection


    @group Prebuild Cards
      @description
        Ready made cards, that just need configuring.

      @function hx.card.notice
        @description: Creates a notice card
        @param options [Object]
          @property context [String]: The context of the notice
          @property title [String]: The title of the notice
          @property message [String]: The message in the notice
        @returns Selection: The selection containing the card

    @group Prebuilt Sections
      @description
        Ready made sections, that just need configuring.

      @function hx.card.action.icon.section
        @description
          Creates an action section with an icon after the text. Action sections are for defining links/buttons within cards.
        @param? options [Object]
          @property context [String]: The context of the action section
          @property text [String]: The text of the action section
          @property icon [String]: The class of the icon
        @returns Selection: Returns a selection containing the detached element

      @function hx.card.icon.action.section
        @description
          Creates an action section with an icon before the text. Action sections are for defining links/buttons within cards.
        @param? options [Object]
          @property context [String]: The context of the action section
          @property text [String]: The text of the action section
          @property icon [String]: The class of the icon
        @returns Selection: Returns a selection containing the detached element

      @function hx.card.action.section
        @description
          Creates an action section without an icon. Action sections are for defining links/buttons within cards.
        @param? options [Object]
          @property context [String]: The context of the action section
          @property text [String]: The text of the action section
        @returns Selection: Returns a selection containing the detached element

    @group Building blocks

      @textLikeComponent hx.card.text: text
      @textLikeComponent hx.card.small.text: text
      @textLikeComponent hx.card.large.text: text
      @textLikeComponent hx.card.title: title
      @textLikeComponent hx.card.small.title: title
      @textLikeComponent hx.card.large.title: title

      @iconLikeComponent hx.card.icon: Creates an icon
      @iconLikeComponent hx.card.small.icon: Creates a small icon
      @iconLikeComponent hx.card.large.icon: Creates a large icon

    @class hx-card
      @childclass hx-card-aligned
        @description: A container that aligns sections inside groups. This should contain groups that contain sections in order to work.

