@version 0.9.0

  @description
    A dropdown component, for showing additional content when the user hovers over or clicks on an element.

  @examples
    @example
      @html
        <button class="hx-btn hx-positive" id="dropdown-example-1">Button</button>
      @js
        dropdownExampleContent = "<div style='padding:10px;'>Example content!</div>"
        dropdownExample1 = new hx.Dropdown("#dropdown-example-1", dropdownExampleContent)

  @api Dropdown
    @prototype hx.Dropdown
      @extends EventEmitter
      @description: An api for creating a dropdown that shows when the user either clicks or hovers over an element.
      @constructor
        @added
        @param selector [String/HTMLElement]: The element the user has to click or hover over to show the dropdown
        @param dropdownContent [String/Function]
          @description
            The content to fill the dropdown with. It can be either a html string or a function that is passed the dropdown node. An example string content could be:
            @codeblock js
              ddContent = '<div>Some content</div>';
          @param node [HTMLElement]: The dropdown node to populate.
        @param? mode [String]: The type of action that will show the dropdown, can be 'click' or 'hover' (the hover value will act as click for mobile devices without the hover event)
          @default: 'click'
        @param? align [String]
          @description
            The alignment value for the dropdown. The complete list of all alignment properties that should be used can be seen below:
            @list
              @item: 'up'
              @item: 'down'
              @item: 'left'
              @item: 'right'
              @item: 'lblt'
              @item: 'lbrt'
              @item: 'lbrb'
              @item: 'ltlb'
              @item: 'ltrt'
              @item: 'ltrb'
              @item: 'rblt'
              @item: 'rblb'
              @item: 'rbrt'
              @item: 'rtlt'
              @item: 'rtlb'
              @item: 'rtrb'
            Aside from 'up', 'down', 'left' and 'right', the other values use the first two characters to select a corner from the selection and the second two characters to select a corner from the dropdown and then align those corners so they are closest to each other.
          @default: 'lblt'
        @param? spacing [Number]: How much space to show between the dropdown and the selector
          @default: theme.spacing
        @param? matchWidth [Boolean]: If set to true, the dropdown width will always be the same as or greater than the width of the selector
          @default: true
        @param? ddClass [String]: An additional class to add to the dropdown when creating it.

      @constructor
        @removed:
          @p: The mode parameter has been moved after the dropdown content:
          @codeblock js
            // old way
            new hx.Dropdown(selector, mode, dropdownContent, align, spacing, matchWidth, ddClass)]

            // new way
            new hx.Dropdown(selector, dropdownContent, mode, align, spacing, matchWidth, ddClass)]
        @param selector [String/HTMLElement]
        @param mode [String]
        @param dropdownContent [String/Function]
        @param? align [String]
        @param? spacing [Number]
        @param? matchWidth [Boolean]
        @param? ddClass [String]

      @property dropdownContent [String/Function]
        @description
          The content to fill the dropdown with. It can be either a html string or a function that is passed the dropdown node. 
          An example string content could be
          @codeblock js
            ddContent = '<div>Some content</div>';
        @param node [HTMLElement]: The dropdown node to populate.

      @property spacing [Number]
        @description: How much space to show between the dropdown and the selector

      @property matchWidth [Boolean]
        @description: If set to true, the dropdown width will always be the same as or greater than the width of the selector

      @property ddClass [String]
        @description: An additional class to add to the dropdown when creating it.

      @method toggle
        @description: Toggles the visibility of the dropdown.

      @method show
        @description: Shows the dropdown

      @method hide
        @description: Hides the dropdown

      @method isOpen
        @description: Returns whether the dropdown is visible or not.
        @returns Boolean

      @method cleanUp
        @description: Called when the dropdown is removed from the page. It is unlikely that this will be needed, however if you are using dropdowns in dynamic content it may be required.

      @method on
        @description: Register a function that should be called every time an event of the given name happens.
        @param name [String]: The event type to listen out for.
        @param callback [Function]
          @description
            The function to call when the event occurs.
          @param data [Any]: The data sent along with the event.

        @event show
          @description: Emitted when the dropdown is shown. No data is sent with this event.

        @event hide
          @description: Emitted when the dropdown is hidden. No data is sent with this event.

        @event change [Boolean]
          @description: Emitted when the dropdown is shown or hidden. The data with the event is a boolean indicating whether or not the dropdown is visible. True means that the dropdown has just been shown, false means that it has just been hidden.

        @returns Dropdown: This Dropdown

  @theme
    @option spacing
      @description: The default spacing for dropdowns
      @type size
      @default: 0
      @includeWithJs true

    @option background-col
      @description: The default background color for dropdowns
      @type color
      @default: #FAFAFA

  @seeAlso
