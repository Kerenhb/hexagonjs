@version 1.5.0
  @examples
    @example
      @html
        <div id="example"></div>
      @js
        var table = new hx.DataTable('#example')
        table.feed(hx.dataTable.objectFeed({
          headers: [
            { name: 'Name', id: 'name' },
            { name: 'Age', id: 'age' },
            { name: 'Profession', id: 'profession' }
          ],
          rows: [
            {
              id: 0, // hidden details can go here (not in the cells object)
              cells: { 'name': 'Bob', 'age': 25, 'profession': 'Developer' }
            },
            {
              id: 1,
              cells: { 'name': 'Jan', 'age': 41, 'profession': 'Artist' }
            },
            {
              id: 2,
              cells: { 'name': 'Dan', 'age': 41, 'profession': 'Builder' }
            }
          ]
        }))

    @example
      @html: @inline 1.5.0/example.html
      @js: @inline 1.5.0/example.js


  @api Data Table
    @prototype hx.DataTable
      @enhancement: Updated the compact view to have a collapsible control panel that houses the search, sort and advanced search controls so that compact tables take up less space
      @updated: Updated the data table to include options for Advanced searching (multi-column filtering) as well as showing the search above the table
        @issue 49
      @bugfix: Resolved an issue where the classes for showing/hiding the sort were not being applied correctly
        @issue 252
      @constructor
        @param selector [String/HTMLElement]
        @param? options [Object]
          @property showAdvancedSearch [Boolean]
            @added: @issue 49
            @description
              @p: Whether to show the advanced search and the toggle for switching between the regular filter and the advanced search.
              @p: If @code[advancedSearchEnabled] is true or an @code[advancedSearch] is passed in, this is set to true.
              @p: See the @hyperlink(#using-the-advanced-search)[Using the Advanced Search] section at the bottom of the page for more information on the advanced search
            @default: false

          @property advancedSearchEnabled [Boolean]
            @added: @issue 49
            @description:
              @p: Whether the advanced search should be enabled. If an @code[advancedSearch] is passed in, this is set to true.
              @p: If @code[filterEnabled] is set to false and this is set to true, the advanced search will be shown on it's own with no toggle for switching the filter type.
              @p: See the @hyperlink(#using-the-advanced-search)[Using the Advanced Search] section at the bottom of the page for more information on the advanced search
            @default: false

          @property advancedSearch [Array[Array[Object]]]
            @added: @issue 49
            @description:
              @p: The advanced search array to use.
              @p: If a value is passed in, @code[showAdvancedSearch] and @code[advancedSearchEnabled] are both set to true, showing and enabling the advanced search.
              @p: See the @hyperlink(#using-the-advanced-search)[Using the Advanced Search] section at the bottom of the page for more information on the advanced search

          @property showSearchAboveTable [Boolean]: Whether to show the Search/Advanced search above the table
            @added: @issue 49
            @default: false

          @property addFilterText [String]: The text to display on the add filter button
            @added: @issue 49
            @default: @code(js)[hx.userFacingText('dataTable', 'addFilter')]
          @property clearFiltersText [String]: The text to display on the clear filters button
            @added: @issue 49
            @default: @code(js)[hx.userFacingText('dataTable', 'clearFilters')]
          @property anyColumnText [String]: The text to display for the 'any column' option when creating advanced search filters
            @added: @issue 49
            @default: @code(js)[hx.userFacingText('dataTable', 'anyColumn')]
          @property advancedSearchText [String]: The text to display on the advanced search toggle
            @added: @issue 49
            @default: @code(js)[hx.userFacingText('dataTable', 'advancedSearch')]
          @property advancedSearchPlaceholder [String]: The text to display in the advanced search filter input boxes
            @added: @issue 49
            @default: @code(js)[hx.userFacingText('dataTable', 'search')]

      @group Options
        @method showAdvancedSearch
          @added: @issue 49
          @description: Sets the showAdvancedSearch option
          @param value [Boolean]: The value for the showAdvancedSearch option
          @returns DataTable: This data table

        @method showAdvancedSearch
          @added: @issue 49
          @description: Gets the showAdvancedSearch option
          @returns Boolean: The value of the showAdvancedSearch option


        @method advancedSearchEnabled
          @added: @issue 49
          @description: Sets the advancedSearchEnabled option
          @param value [Boolean]: The value for the advancedSearchEnabled option
          @returns DataTable: This data table

        @method advancedSearchEnabled
          @added: @issue 49
          @description: Gets the advancedSearchEnabled option
          @returns Boolean: The value of the advancedSearchEnabled option


        @method showSearchAboveTable
          @added: @issue 49
          @description: Sets the showSearchAboveTable option
          @param value [Boolean]: The value for the showSearchAboveTable option
          @returns DataTable: This data table

        @method showSearchAboveTable
          @added: @issue 49
          @description: Gets the showSearchAboveTable option
          @returns Boolean: The value of the showSearchAboveTable option


        @method advancedSearch
          @added: @issue 49
          @description: Gets the currently advanced search
          @returns [Array[Array[Object]]]: The currently set array of advanced search filter

        @method advancedSearch
          @added: @issue 49
          @description: Sets the advanced search
          @param value [Array[Array[Object]]]: The advanced search array to set
          @returns DataTable: This data table

    @object Feed
      @function rows
        @param range [Object]
          @updated: Updated the range parameter to include new advanced search properties
            @issue 49
          @description
            The range to get the rows for. An example object can be seen below:

            @codeblock js
              {
                start: 0,
                end: 14,
                filter: "",
                sort: {
                  column: 'name'
                  direction: 'desc'
                },
                useAdvancedSearch: true, // Whether to filter using the advanced search
                advancedSearch: [
                  [
                    { column: 'any', term: '' }
                  ]
                ]
              }

            The above example would be expected to return the first 15 rows of data, sorted by the 'name' column in descending order.

        @param callback [Function]
          @param data [Object]

    @object hx.dataTable
      @description
        @p: An object containing the default Feed object constructors and helpers for making custom feeds.

        @p: See the Using Feeds section for more information about using and creating Feeds.

      @function objectFeed
        @param data [Object]
        @param? options [Object]
          @property compare [Function]
            @updated: Updated the default sort function to use @code[hx.sort.compare] to provide better sorting
              @issue 49
            @param cell1 [String]
            @param cell2 [String]
            @default: @code[hx.sort.compare]

          @property cellValueLookup [Function]
            @added: Added options to the object feed to make it more configurable
              @issue 49
            @description: The function used to get a searchable string from a cell with it's value as an object
            @param cell [Any]: The cell from the data being searched for a given column
            @returns String: A searcheable string
            @default: @code[hx.identity]

          @property termLookup [Function]: The function used to determine whether a row should be shown in the results
            @added: Added options to the object feed to make it more configurable
              @issue 49
            @param filterTerm [String]: The term entered in the filter
            @param rowSearchTerm [String]: The term for the given row/column value
            @returns Boolean: A boolean to indicate whether the term has been found in the row
            @default
              @codeblock js
                function(term, rowSearchTerm) {
                  var whitespaceSplitRegex = /\s+/
                  var stripLeadingAndTrailingWhitespaceRegex = /^\s+|\s+$/g
                  var arr = term.replace(stripLeadingAndTrailingWhitespaceRegex, '').split(whitespaceSplitRegex)
                  var validPart = hx.find(arr, function(part) {
                    return ~rowSearchTerm.indexOf(part)
                  })
                  return hx.defined(validPart)
                }


      @function getAdvancedSearchFilter
        @added: Added a helper for creating custom feeds using the advanced search
          @issue 49
        @description: A helper method for getting an advanced search filter when using a custom feed
        @param cellValueLookup [Function]
          @description: The function used to get a searchable string from a cell with it's value as an object
          @param cell [Any]: The cell from the data being searched for a given column
          @returns String: A searcheable string
          @default: @code[hx.identity]

        @param termLookup [Function]: The function used to determine whether a row should be shown in the results
          @param filterTerm [String]: The term entered in the filter
          @param rowSearchTerm [String]: The term for the given row/column value
          @returns Boolean: A boolean to indicate whether the term has been found in the row
          @default
            @codeblock js
              function(term, rowSearchTerm) {
                var whitespaceSplitRegex = /\s+/
                var stripLeadingAndTrailingWhitespaceRegex = /^\s+|\s+$/g
                var arr = term.replace(stripLeadingAndTrailingWhitespaceRegex, '').split(whitespaceSplitRegex)
                var validPart = hx.find(arr, function(part) {
                  return ~rowSearchTerm.indexOf(part)
                })
                return hx.defined(validPart)
              }
        @returns Function: The function for checking if a single row matches the filters
          @param filters [Array[Array[Object]]]: The advanced search filters
          @param row [Object]: The row object


  @extra
    @h1 .docs-module-section: Using Feeds

    @p: Data tables contain multiple options for displaying the data, as well as flexibility in how the data is provided.
    @p: There are two functions that are available for creating feeds, however custom feeds can also be created.

    @section Using hx.dataTable.objectFeed
      @p: An object feed expects the data to be provided as a whole when the feed is created.
      @p: The below code shows a basic use of the object feed.
      @codeblock js
        var tableData = {
          headers: [
            { name: 'Name', id: 'name' },
            { name: 'Age', id: 'age' },
            { name: 'Profession', id: 'profession' }
          ],
          rows: [
            {
              id: 0,
              cells: { 'name': 'Bob', 'age': 25, 'profession': 'Developer' }
            },
            {
              id: 1,
              cells: { 'name': 'Jan', 'age': 41, 'profession': 'Artist' }
            },
            {
              id: 2,
              cells: { 'name': 'Dan', 'age': 41, 'profession': 'Builder' }
            }
          ]
        }
        var table = new hx.DataTable('#selector')
        table.feed(hx.dataTable.objectFeed(tableData))

      @p: Alternatively, if the data is returned from a URL request, it can be set as follows:
      @codeblock js
        hx.json('path_to_your_request.file', function(err, data){
          if (!err) table.feed(hx.dataTable.objectFeed(tableData));
        })

      @p: The object feed handles the sorting and filtering of the data internally making it the preferred choice for small or static data sets.


    @section Using hx.dataTable.urlFeed
      @p: A url feed expects a single url to handle multiple requests and return different types of data.
      @p: They can be created using:
      @codeblock js
        hx.dataTable.urlFeed('request_url', {
          cache: true, // Whether to attempt caching of data
          extra: // Any extra data to be sent with every request
        })
      @p: There are four different request types made by the url feed, all of which will be @code[POST] requests:

      @h4: headers
      @codeblock js
        {
          type: 'headers',
          extra: // As defined in the options
        }
      @p: The data returned should be in the following format:
      @codeblock js
        [
          {
            "name": "columnName", // The name for the heading to display in the table
            "id": "columnID" // The unique ID for the column
          },
          ... // Additional headers
        ]

      @h4: totalCount
      @codeblock js
        {
          type: 'totalCount',
          extra: // As defined in the options
        }
      @p: The data returned should be in the following format:
      @codeblock js
        {
          "count": 123 // The total number of rows in the data set
        }
      @p: If the total is unknown, this can return undefined.

      @h4: rows
      @p: The URL feed expects the server to perform any sorting/filtering as part of the 'rows' request.
      @codeblock js
        {
          type: 'rows',
          range: {
            start: 0, // The start index to get
            end: 14, // The end index to get
            sort: {
              column: undefined, // the sort column
              direction: undefined // The sort direction
            },
            filter: undefined, // The current filter.
            useAdvancedSearch: false // Whether the advanced search is enabled
            advancedSearch: undefined // The currently set advanced search
          }
          extra: // As defined in the options
        }
      @p: The data returned should be in the following format:
      @codeblock js
        {
          "filteredCount": 10, // The number of rows in the filtered set
          "rows": [
            {
              "id": 0, // The ID for a row
              // hidden details can be specified here (not in the cells object)
              "cells": {
                "columnID": "value" // The cell values for a row in columnID/value pairs
              }
            },
            ... // Additional rows
          ]
        }

      @h4: rowsForIds
      @codeblock js
        {
          type: 'rowsForIds',
          ids: [1, 2, 3] // The array of ids to get row data for
          extra: // As defined in the options
        }
      @p: The data returned should be in the following format:
      @codeblock js
        [
          {
            "id": 0, // The ID for a row
            // hidden details can be specified here (not in the cells object)
            "cells": {
              "columnID": "value" // The cell values for a row in columnID/value pairs
            }
          },
          ... // Additional rows
        ]

    @section Creating a custom feed
      @p: In situations where the feeds provided in the @code(js)[hx.dataTable] object are not suitable, custom feeds can be created.
      @p: For instance, if using @code[POST] is not suitable, an alternative could be created:

      @codeblock js
        // Serializes an object into param=value&param[child]=value
        function serialize (obj, prefix) {
          var arr = []
          for (var p in obj) {
            if (obj.hasOwnProperty(p)) {
              var k = prefix ? prefix + '[' + p + ']' : p, v = obj[p]
              arr.push(typeof v == 'object' ?
                serialize(v, k) :
                encodeURIComponent(k) + '=' + encodeURIComponent(v))
            }
          }
          return arr.join('&')
        }

        function createCustomURLFeed (url) {
          var fetcher = function (data, cb) {
            // Serializes the data so it can be passed over as a GET request
            hx.json(url + '?' + serialize(data), function (err, data) { cb(data) })
          }

          // Return the feed object with headers, rows, rowsForIds and totalCount properties
          return {
            headers: function (cb) {
              fetcher({ type: 'headers' }, cb)
            },
            rows: function (range, cb) {
              fetcher({ type: 'rows', range: range }, cb)
            },
            rowsForIds: function (ids, lookupRow, cb) {
              fetcher({ type: 'rowsForIds', ids: ids }, cb)
            },
            totalCount: function (cb) {
              fetcher({ type: 'totalCount' }, cb)
            }
          }
        }

    @h1 .docs-module-section: Additional options
    @p: As well as the options available on the data table prototype, there are a few extra options when setting the data that can change the table behaviour by default.

    @section Multi column / grouped headers
      @p: It is possible to add grouping to headers by specifying a @code(js)[groups] array for the header @code(js)[columns]

      @codeblock js
        {
          headers:[
            { id: 'name', name: 'Name', groups: ['Group 1']},
            { id: 'age', name: 'Age' },
            { id: 'gender', name: 'Gender', groups: ['Group 2']},
            { id: 'dob', name: 'Date of Birth', groups: ['Group 2']},
            { id: 'salary', name: 'Salary (£)', groups: ['Group 2']}
          ],
          rows: [
            //...
          ]
        }

    @section Wrapping header text for indivual columns
      @p: It is possible to override the @code[allowHeaderWrap] option for an individual column by providing the @code[allowWrap] property in the header colums:
      @codeblock js
        {
          headers:[
            { id: 'name', name: 'Name' },
            { id: 'age', name: 'Age' },
            { id: 'gender', name: 'Gender' },
            { id: 'dob', name: 'Date of Birth' allowWrap: true },
            { id: 'salary', name: 'Salary (£)' }
          ],
          rows: [
            //...
          ]
        }

    @section Disabling rows
      @p: When a row is rendered, the @code[rowEnabledLookup] function is called. If it returns false, the row will visually disabled and unselectable.
      @p: By default, a row can be made unselectable using a property in the row object:
      @codeblock js
        [
          {
            id: 'rowId',
            disabled: true,
            cells: {
              ...// Row data
            }
          },
          ... // Additional rows
        ]
      @p: This does not disable row collapsibles.

    @section Making Rows unselectable
      @p: When a row is selected, the @code[rowSelectableLookup] function is called to check whether the row is selectable. If it returns false, the row will not be selected.
      @p: By default, the @code[rowSelectableLookup] function allows all rows to be selected. However, by setting the @code[rowSelectableLookup], the row can be made unselectable:
      @codeblock js
        dataTable.rowSelectableLookup(function (row) {
          return !row.unselectable;
        })
      @codeblock js
        [
          {
            id: 'rowId',
            unselectable: true,
            cells: {
              ...// Row data
            }
          },
          ... // Additional rows
        ]

    @pageLink using-the-advanced-search
    @h1 .docs-module-section: Using the Advanced Search

    @p: The advanced search is a feature that enables filtering across multiple columns.

    @p: There are several ways to use the advanced search. It can be used on it's own or can be toggled on/off by the user.

    @p: To show the advanced search toggle, the data table can be set up with:
    @codeblock js
      {
        filterEnabled: true,
        showAdvancedSearch: true
      }

    @example
      @html
        <div id="advanced-search-toggle"></div>

      @js
        var dt = new hx.DataTable('#advanced-search-toggle', {
          feed: tableFeed,
          filterEnabled: true,
          showAdvancedSearch: true
        })
        dt.render()

    @p: This creates the table with the advanced search available but still shows the standard filter until the user enables the advanced search.


    @p: The advanced search can also be used on it's own. To do this, use the following:
    @codeblock js
      {
        filterEnabled: false,
        advancedSearchEnabled: true
      }

    @p: The @code[advancedSearchEnabled] option is used here. It causes @code[showAdvancedSearch] to be true and shows the advanced search.
    @example
      @html
        <div id="advanced-search-only"></div>

      @js
        var dt = new hx.DataTable('#advanced-search-only', {
          feed: tableFeed,
          filterEnabled: false,
          advancedSearchEnabled: true
        })
        dt.render()

    @section How the advanced search works

    @p: The advanced search uses an array of nested arrays of objects with a @code[column] and @code[term] property
    @p: The logic behind the filtering uses @hyperlink(https://en.wikipedia.org/wiki/Disjunctive_normal_form)[Disjunctive Normal Form] (an @code[OR] of @code[AND]s)

    @p: Below is an example of an advanced search:
    @codeblock js
      [
        [
          { column: 'any', term: 'a' },
          // AND
          { column: 'name', term: 'b' }
        ],
        // OR
        [
          { column: 'profession', term: 'c' }
        ]
      ]

    @p: This would search for rows that match the following criteria:

    @codeblock js
      (Any column contains 'a' and the name column contains 'b') or (The profession column contains 'c')

    @p: The table user interface mirrors this functionality, allowing the user to add filters row by row and decide whether they are @code[AND] or @code[OR] filters and splits the array(s) accordingly.

    @example
      @html
        <div id="advanced-search-with-data"></div>

      @js
        var dt = new hx.DataTable('#advanced-search-with-data', {
          feed: tableFeed,
          advancedSearch: [
            [
              { column: 'any', term: 'a' },
              { column: 'name', term: 'b' }
            ],
            [
              { column: 'profession', term: 'd' }
            ]
          ]
        })
        dt.render()

    @section Using the feeds with advanced search

    @p: When using the advanced search, the @code[rows] function will be given some additional properties as part of the @code[range] object:

    @p: The URL feed expects the server to perform any sorting/filtering as part of the 'rows' request.
    @codeblock js
      {
        type: 'rows',
        range: {
          start: 0,
          end: 14,
          sort: {
            column: undefined,
            direction: undefined
          },
          filter: undefined,
          useAdvancedSearch: true // Indicates that the filtering should be done using the advanced search
          advancedSearch: [ // The currently set advanced search
            [
              { column: 'any', term: 'a' },
              { column: 'name', term: 'b' }
            ],
            [
              { column: 'profession', term: 'd' }
            ]
          ]
        }
        extra: {}
      }

    @p: As the advanced search and filter can be used interchangeably, the properties will be passed over with each request.
    @p: The @code[useAdvancedSearch] should be used to determine whether to filter using the advanced search or the regular filter.