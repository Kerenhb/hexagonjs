@version 0.15.0

  @description
    Tables for displaying data with sorting, filtering, selection and pagination.

  @examples
    @example
      @html
        <div id="example"></div>
      @js
        var table = new hx.DataTable('#example')
        table.feed(hx.dataTable.objectFeed({
          headers: [
            { name: 'Name', id: 'name' },
            { name: 'Age', id: 'age' },
            { name: 'Profession', id: 'profession' }
          ],
          rows: [
            {
              id: 0, // hidden details can go here (not in the cells object)
              cells: { 'name': 'Bob', 'age': 25, 'profession': 'Developer' }
            },
            {
              id: 1,
              cells: { 'name': 'Jan', 'age': 41, 'profession': 'Artist' }
            },
            {
              id: 2,
              cells: { 'name': 'Dan', 'age': 41, 'profession': 'Builder' }
            }
          ]
        }))

  @api Data Table
    @prototype hx.DataTable
      @added: Added a new module for creating data tables to replace the Extended Table module.
        @issue 547

      @description: A component to allow tables to be created dynamically using Javascript that contains features such as filtering, sorting and pagination.

      @constructor
        @description: Creates a table object using a selector and some options.
        @param selector [String/HTMLElement]: A CSS selector string which uniquely identifies the element to create the table in, or the Element to create the table in.
        @param? options [Object]: The options to use when creating the data table

          @property allowHeaderWrap [Boolean]: A boolean to determine whether table headers should be allowed to wrap onto multiple lines.
            @default false

          @property cellRenderer [Function]
            @description
              @p: A function for rendering body cells.
              @p: Default Value:
              @codeblock:
                function (element, cell, row) {
                  hx.select(element).text(cell);
                }
            @param element [HTMLElement]: The element that is being populated.
            @param cell [Object]: The data for the cell.
            @param row [Object]: The entire row object.

          @property collapsibleRenderer [Function]: A function for rendering collapsibles. For rows to be collapsible, this function must be provided.
            @param element [HTMLElement]: The collapsible content that is being populated.
            @param row [Object]: The entire row object

          @property columns [Object]
            @description
              @p: An object that allows the setting of column specific renderers as well as the ability to disable sorting for a specific column.
              @p: The properties that can be set for a specific column are:
              @list
                allowHeaderWrap
                sortEnabled
                cellRenderer
                headerCellRenderer
              @p: To set a one of the options for a column, an object can be defined:
              @codeblock js
                {
                  "columnid": {
                    sortEnabled: true,
                    cellRenderer: function (element, cell, row) {
                      hx.select(element).text(cell);
                    }
                  }
                }
              @p: Columns will use the default options if a column specific value is not provided.

          @property compact [String/Boolean]
            @description
              @p: A value to determine whether compact mode should be enabled.
              @p: There are three possible values:
              @list
                'auto': Detect the size of the window and switch between compact and standard modes automatically.
                true: Always use compact mode
                false: Always use standard mode.
            @default 'auto'

          @property displayMode [String]:
            @description
              @p: A string to determine what display mode the table should use.
              @p: There are currently two possible values:
              @list
                'paginate': show a single page at a time with a pagination option.
                'all': Show all the rows on a single page.
            @default 'paginate'

          @property feed [Feed]
            @description: The feed to use when creating the table. See the @code[Feed] and @code[hx.dataTable] objects for information on feeds.

          @property filter [String]: The filter to apply when creating the table

          @property filterEnabled [Boolean]: A boolean to determine whether filtering should be enabled.
            @default true

          @property headerCellRenderer [Function]:
            @param element [HTMLElement]: The element that is being populated.
            @param cell [Object]: The data for the cell.
            @param headers [Object]: The entire headers object.
            @description
              @p: A function for rendering header cells.
              @p: Default Value:
              @codeblock:
                function (element, cell, headers) {
                  hx.select(element).text(cell.name);
                }

          @property noDataMessage [String]: A string that is displayed when there is no data in the table.
            @default ['No Data']

          @property pageSize [Number]: A number to determine how many rows should be shown on a page.
            @default 15

          @property pageSizeOptions [Array[Number]]
            @description
              @p: An array of numbers to determine the page sizes that can be selected by the user.
              @p: If a value is provided, a dropdown is shown to allow the user to change the rows displayed on a page.

          @property retainHorizontalScrollOnRender [Boolean]: A boolean to determine whether the horizontal scroll should be retained when re-rendering the current page of data.
            @default true

          @property retainVerticalScrollOnRender [Boolean]: A boolean to determine whether the vertical scroll should be retained when re-rendering the current page of data.
            @default false

          @property rowCollapsibleLookup [Function]:
            @description
              @p: A function for determining whether a row has a collapsible.
              @p: Default Value:
              @codeblock:
                function (row) {
                  return false;
                }
            @param row [Object]: The data for the current row.
            @returns Boolean: Whether the row should have a collapsible

          @property rowEnabledLookup [Function]
            @description
              @p: A function for determining whether a row should be visually disabled and prevented from being selected.
              @p: Default Value:
              @codeblock:
                function (row) {
                  return !row.disabled;
                }
            @param row [Object]: The data for the current row.
            @returns Boolean: Whether the row should be disabled. True means that the row should be enabled, false means it should be disabled.

          @property rowIDLookup [Function]
            @description
              @p: A function for getting the unique id for a row.
              @p: Default Value:
              @codeblock:
                function (row) {
                  return row.id;
                }
              @p: This could be changed to use one of the column values as the id (providing it is unique across all the data in the table)
            @param row [Object]: The data for the current row.
            @returns String: The id of the row provided

          @property rowSelectableLookup [Function]
            @description
              @p: A function for determining whether a row can be selected at the time it is clicked.
              @p: Default Value:
              @codeblock:
                function (row) {
                  return true;
                }
            @param row [Object]: The data for the current row.
            @returns Boolean: Whether the row can be selected.

          @property selectEnabled [Boolean]: A boolean to determine whether the selection of rows should be enabled.
            @default false

          @property singleSelection [Boolean]
            @description
              @p: A boolean to determine whether the table should be in single select mode.
              @p: This mode only allows one row to be selected at a time.
              @p: @code[selectEnabled] must also be true for this to take effect.
            @default false

          @property sort [Object]: The sort to apply when creating the table. No sorting is applied by default
            @property column [String]: The column id to sort on
            @property direction [String]: The sort direction. Can be either @code['asc'] or @code['desc']

          @property sortEnabled [Boolean]: A boolean to determine whether sorting should be enabled. This can also be set on a per-column basis using the @code[columns] option.
            @default true


# Methods for changing the options
# --------------------------------

      @method &lt;option&gt;
        @description
          @p: Gets the value of a table option
          @p: Every option for the table has a function with this signature. For example:
          @codeblock js
            dataTable.allowHeaderWrap() // returns the current allowHeaderWrap option
            dataTable.sort() // returns the current sort option
          @p: For details on each option and what types to expect, see the @code[options] parameter of the constructor.
        @returns OptionType: The value of the table option

      @method &lt;option&gt;
        @description
          @p: Sets the value of a table option
          @p: Every option for the table has a function with this signature. For example:
          @codeblock js
            dataTable.allowHeaderWrap(true) // sets the allowHeaderWrap option
            dataTable.sort({column: 'name', direction: 'asc'}) // sets the sort option
          @p: For details on each option and what types to expect, see the @code[options] parameter of the constructor.
        @param value [Function]: The value for the table option
        @param? callback [Function]: The function to call once rendering is complete
        @returns DataTable: This DataTable

#      @method collapsibleRenderer
#        @description: Gets the collapsibleRenderer option
#        @returns Function: The collapsibleRenderer option
#
#      @method collapsibleRenderer
#        @description: Sets the collapsibleRenderer option
#        @param value [Function]: The value for the collapsibleRenderer option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method compact
#        @description: Gets the compact option
#        @returns Boolean: The compact option
#
#      @method compact
#        @description: Sets the compact option
#        @param value [Boolean]: The value for the compact option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method displayMode
#        @description: Gets the displayMode option
#        @returns String: The displayMode option
#
#      @method displayMode
#        @description: Sets the displayMode option
#        @param value [String]: The value for the displayMode option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method feed
#        @description: Gets the feed option
#        @returns Object: The feed option
#
#      @method feed
#        @description: Sets the feed option
#        @param value [Object]: The value for the feed option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method filter
#        @description: Gets the filter option
#        @returns String: The filter option
#
#      @method filter
#        @description: Sets the filter option
#        @param value [String]: The value for the filter option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method filterEnabled
#        @description: Gets the filterEnabled option
#        @returns Boolean: The filterEnabled option
#
#      @method filterEnabled
#        @description: Sets the filterEnabled option
#        @param value [Boolean]: The value for the filterEnabled option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method noDataMessage
#        @description: Gets the noDataMessage option
#        @returns String: The noDataMessage option
#
#      @method noDataMessage
#        @description: Sets the noDataMessage option
#        @param value [String]: The value for the noDataMessage option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method pageSize
#        @description: Gets the pageSize option
#        @returns Number: The pageSize option
#
#      @method pageSize
#        @description: Sets the pageSize option
#        @param value [Number]: The value for the pageSize option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method pageSizeOptions
#        @description: Gets the pageSizeOptions option
#        @returns Array[Number]: The pageSizeOptions option
#
#      @method pageSizeOptions
#        @description: Sets the pageSizeOptions option
#        @param value [Array[Number]]: The value for the pageSizeOptions option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method retainHorizontalScrollOnRender
#        @description: Gets the retainHorizontalScrollOnRender option
#        @returns Boolean: The retainHorizontalScrollOnRender option
#
#      @method retainHorizontalScrollOnRender
#        @description: Sets the retainHorizontalScrollOnRender option
#        @param value [Boolean]: The value for the retainHorizontalScrollOnRender option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method retainVerticalScrollOnRender
#        @description: Gets the retainVerticalScrollOnRender option
#        @returns Boolean: The retainVerticalScrollOnRender option
#
#      @method retainVerticalScrollOnRender
#        @description: Sets the retainVerticalScrollOnRender option
#        @param value [Boolean]: The value for the retainVerticalScrollOnRender option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method rowCollapsibleLookup
#        @description: Gets the rowCollapsibleLookup option
#        @returns Function: The rowCollapsibleLookup option
#
#      @method rowCollapsibleLookup
#        @description: Sets the rowCollapsibleLookup option
#        @param value [Function]: The value for the rowCollapsibleLookup option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method rowEnabledLookup
#        @description: Gets the rowEnabledLookup option
#        @returns Function: The rowEnabledLookup option
#
#      @method rowEnabledLookup
#        @description: Sets the rowEnabledLookup option
#        @param value [Function]: The value for the rowEnabledLookup option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method rowIDLookup
#        @description: Gets the rowIDLookup option
#        @returns Function: The rowIDLookup option
#
#      @method rowIDLookup
#        @description: Sets the rowIDLookup option
#        @param value [Function]: The value for the rowIDLookup option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method rowSelectableLookup
#        @description: Gets the rowSelectableLookup option
#        @returns Function: The rowSelectableLookup option
#
#      @method rowSelectableLookup
#        @description: Sets the rowSelectableLookup option
#        @param value [Function]: The value for the rowSelectableLookup option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method selectEnabled
#        @description: Gets the selectEnabled option
#        @returns Boolean: The selectEnabled option
#
#      @method selectEnabled
#        @description: Sets the selectEnabled option
#        @param value [Boolean]: The value for the selectEnabled option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method singleSelection
#        @description: Gets the singleSelection option
#        @returns Boolean: The singleSelection option
#
#      @method singleSelection
#        @description: Sets the singleSelection option
#        @param value [Boolean]: The value for the singleSelection option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#
#      @method sort
#        @description: Gets the sort option
#        @returns Object: The sort option
#
#      @method sort
#        @description: Sets the sort option
#        @param value [Object]: The value for the sort option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable



# Methods for changing the column options
# ---------------------------------------

      @method &lt;columnOption&gt;
        @description
          @p: Gets the value of a column option
          @p: The four options values that can be retrieved individually are:
          @list
            allowHeaderWrap
            cellRenderer
            headerCellRenderer
            sortEnabled
          @p: Each column option value can be retrieved individually:
          @codeblock js
            dataTable.allowHeaderWrap('name') // gets the allowHeaderWrap option for a column with id 'name'
            dataTable.sortEnabled('age') // gets the sortEnabled option for a column with id 'age'
          @p: For details on each option and what types to expect, see the @code[options] parameter of the constructor.
        @param column [String]: The id of the column to get the option value for
        @returns OptionType: The value of the column option

      @method &lt;columnOption&gt;
        @description
          @p: Sets the value of a column option
          @p: The four options that can be set individually are:
          @list
            allowHeaderWrap
            cellRenderer
            headerCellRenderer
            sortEnabled
          @p: Each column option can be set individually:
          @codeblock js
            dataTable.allowHeaderWrap('name', true) // sets the allowHeaderWrap option for a column with id 'name'
            dataTable.sortEnabled('age', 'false') // sets the sortEnabled option for a column with id 'age'
          @p: For details on each option and what types to expect, see the @code[options] parameter of the constructor.
        @param column [String]: The id of the column to get the option value for
        @param value [OptionType]: The value for the column option
        @param? callback [Function]: The function to call once rendering is complete
        @returns DataTable: This DataTable

#      @method allowHeaderWrap
#        @description: Gets the allowHeaderWrap option
#        @returns Boolean: The allowHeaderWrap option
#
#      @method allowHeaderWrap
#        @description: Sets the allowHeaderWrap option
#        @param value [Boolean]: The value for the allowHeaderWrap option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#      @method allowHeaderWrap
#        @description: Gets the allowHeaderWrap value for a column of the table if one has been set.
#        @param column [String]: The id of the column to get the allowHeaderWrap value for
#        @returns Boolean: The allowHeaderWrap option for the column
#
#      @method allowHeaderWrap
#        @description: Sets the allowHeaderWrap value for a column of the table
#        @param column [String]: The id of the column to set the allowHeaderWrap value for
#        @param value [Boolean]: The value to set
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#      @method cellRenderer
#        @description: Gets the cellRenderer option
#        @returns Function: The cellRenderer option
#
#      @method cellRenderer
#        @description: Sets the cellRenderer option
#        @param value [Function]: The value for the cellRenderer option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#      @method cellRenderer
#        @description: Gets the cellRenderer value for a column of the table if one has been set.
#        @param column [String]: The id of the column to get the cellRenderer value for
#        @returns Function: The cellRenderer option for the column
#
#      @method cellRenderer
#        @description: Sets the cellRenderer value for a column of the table
#        @param column [String]: The id of the column to set the cellRenderer value for
#        @param value [Function]: The value to set
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#      @method headerCellRenderer
#        @description: Gets the headerCellRenderer option
#        @returns Function: The headerCellRenderer option
#
#      @method headerCellRenderer
#        @description: Sets the headerCellRenderer option
#        @param value [Function]: The value for the headerCellRenderer option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#      @method headerCellRenderer
#        @description: Gets the headerCellRenderer value for a column of the table if one has been set.
#        @param column [String]: The id of the column to get the headerCellRenderer value for
#        @returns Function: The headerCellRenderer option for the column
#
#      @method headerCellRenderer
#        @description: Sets the headerCellRenderer value for a column of the table
#        @param column [String]: The id of the column to set the headerCellRenderer value for
#        @param value [Function]: The value to set
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#      @method sortEnabled
#        @description: Gets the sortEnabled option
#        @returns Boolean: The sortEnabled option
#
#      @method sortEnabled
#        @description: Sets the sortEnabled option
#        @param value [Boolean]: The value for the sortEnabled option
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable
#
#      @method sortEnabled
#        @description: Gets the sortEnabled value for a column of the table if one has been set.
#        @param column [String]: The id of the column to get the sortEnabled value for
#        @returns Boolean: The sortEnabled option for the column
#
#      @method sortEnabled
#        @description: Sets the sortEnabled value for a column of the table
#        @param column [String]: The id of the column to set the sortEnabled value for
#        @param value [Boolean]: The value to set
#        @param? callback [Function]: The function to call once rendering is complete
#        @returns DataTable: This DataTable


# Methods for changing the state of the table
# -------------------------------------------

      @method page
        @description: Gets the current page
        @returns Number: The currently selected page

      @method page
        @description: Sets the current page
        @param value [Number]: The current page to set
        @param? callback [Function]: The function to call once rendering is complete
        @returns DataTable: This DataTable


      @method selectedRows
        @description: Gets the selected rows
        @returns value [Array[String]]: The array of selected row ids

      @method selectedRows
        @description: Sets the selected rows
        @param value [Array[String]]: The array of row ids to set as selected
        @param? callback [Function]: The function to call once rendering is complete
        @returns DataTable: This DataTable


      @method expandedRows
        @description: Gets the expanded rows
        @returns value [Array[String]]: The array of expanded row ids

      @method expandedRows
        @description: Sets the expanded rows
        @param value [Array[String]]: The array of row ids to set as expanded
        @param? callback [Function]: The function to call once rendering is complete
        @returns DataTable: This DataTable


      @method rowForIds
        @description: Converts row ids to row objects using the table's data feed.
        @param ids [Array[String]]: The array of row ids to get from the data
        @param callback [Function]: The function to call once the rows have been retrieved
          @param rows [Array[Object]]: The array of row objects returned from the feed



# Methods that perform an action on the table
# -------------------------------------------

      @method suppressRender
        @description: A method for getting the suppressed state of the table.
        @returns Boolean: Whether the table is suppressed

      @method suppressRender
        @description: A method for preventing the render from changing anything until unsuppressed.
        @param suppress [Boolean]: Whether to suppress the render.
        @returns DataTable: This DataTable


      @method render
        @description: Renders the table.
        @param? callback [Function]: The function to call once rendering is complete
        @returns DataTable: This DataTable

      @method on
        @description: Register a function that should be called every time an event of the given name happens.
        @param name [String]: The event type to listen out for
        @param callback [Function]
          @description: The function to call when an event occurs.
          @param data [Any]: The data sent along with the event (if any)

        @event selectedrowschange
          @description: Emitted when a row is selected or deselected.
          @data Object
            @property value [Array[String]]: The selected rows (a list of ids).
            @property? row [Object]: The row that was selected (if this event was caused by the user clicking on the row check)
            @property? rowValue [Boolean]: Whether or not the row that was clicked on is now selected (if this event was caused by the user clicking on the row check)
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event selectedrowsclear
          @description: Emitted when the row selection is cleared by clicking on the 'clear selection' text.

        @event expandedrowschange
          @description: Emitted when a row is expanded or collapsed
          @data Object
            @property value [Array[String]]: The expanded rows (a list of ids).
            @property? row [Object]: The row that was expanded or collapsed (if this event was caused by the user clicking on the expand toggle)
            @property? rowValue [Boolean]: Whether or not the row that was clicked on is now expanded  (if this event was caused by the user clicking on the expand toggle)
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event rowclick
          @description: Emitted when a row is clicked.
          @data Object: The row object for the row that was clicked.

        @event render
          @description: Emitted when the table is rendered.

        @event pagechange
          @description: Emitted when the page is changed
          @data Object
            @property value [Any]: The selected page number, starting from 1.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event collapsiblerendererchange
          @description: Emitted when the collapsibleRenderer option is changed
          @data Object
            @property value [Any]: The value of the collapsibleRenderer option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event compactchange
          @description: Emitted when the compact option is changed
          @data Object
            @property value [Any]: The value of the compact option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting
            @property? mode [Boolean]: If the cause is 'user', and the value is 'auto', this value will contain the actual compact mode (it will be true for compact, false for desktop)

        @event displaymodechange
          @description: Emitted when the displayMode option is changed
          @data Object
            @property value [Any]: The value of the displayMode option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event feedchange
          @description: Emitted when the feed option is changed
          @data Object
            @property value [Any]: The value of the feed option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event filterchange
          @description: Emitted when the filter option is changed
          @data Object
            @property value [Any]: The value of the filter option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event filterenabledchange
          @description: Emitted when the filterEnabled option is changed
          @data Object
            @property value [Any]: The value of the filterEnabled option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event nodatamessagechange
          @description: Emitted when the noDataMessage option is changed
          @data Object
            @property value [Any]: The value of the noDataMessage option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event pagesizechange
          @description: Emitted when the pageSize option is changed
          @data Object
            @property value [Any]: The value of the pageSize option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event pagesizeoptionschange
          @description: Emitted when the pageSizeOptions option is changed
          @data Object
            @property value [Any]: The value of the pageSizeOptions option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event retainhorizontalscrollonrenderchange
          @description: Emitted when the retainHorizontalScrollOnRender option is changed
          @data Object
            @property value [Any]: The value of the retainHorizontalScrollOnRender option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event retainverticalscrollonrenderchange
          @description: Emitted when the retainVerticalScrollOnRender option is changed
          @data Object
            @property value [Any]: The value of the retainVerticalScrollOnRender option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event rowcollapsiblelookupchange
          @description: Emitted when the rowCollapsibleLookup option is changed
          @data Object
            @property value [Any]: The value of the rowCollapsibleLookup option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event rowenabledlookupchange
          @description: Emitted when the rowEnabledLookup option is changed
          @data Object
            @property value [Any]: The value of the rowEnabledLookup option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event rowidlookupchange
          @description: Emitted when the rowIDLookup option is changed
          @data Object
            @property value [Any]: The value of the rowIDLookup option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event rowselectablelookupchange
          @description: Emitted when the rowSelectableLookup option is changed
          @data Object
            @property value [Any]: The value of the rowSelectableLookup option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event selectenabledchange
          @description: Emitted when the selectEnabled option is changed
          @data Object
            @property value [Any]: The value of the selectEnabled option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event singleselectionchange
          @description: Emitted when the singleSelection option is changed
          @data Object
            @property value [Any]: The value of the singleSelection option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event sortchange
          @description: Emitted when the sort option is changed
          @data Object
            @property value [Any]: The value of the sort option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event allowheaderwrapchange
          @description: Emitted when the allowHeaderWrap option is changed
          @data Object
            @property value [Any]: The value of the allowHeaderWrap option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event cellrendererchange
          @description: Emitted when the cellRenderer option is changed
          @data Object
            @property value [Any]: The value of the cellRenderer option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event headercellrendererchange
          @description: Emitted when the headerCellRenderer option is changed
          @data Object
            @property value [Any]: The value of the headerCellRenderer option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @event sortenabledchange
          @description: Emitted when the sortEnabled option is changed
          @data Object
            @property value [Any]: The value of the sortEnabled option.
            @property cause [String]: Can be 'user' or 'api', depending on what caused the change. 'api' means an call to the javascript api caused the change, 'user' means that the change was caused by inputting

        @returns DataTable: This DataTable


# Data / Feed related docs
# ------------------------

    @object hx.dataTable
      @description: An object containing the default feed types for supplying a table with data

      @property objectFeed [Function]
        @description
          @p: The default feed object for using object based data
          @collapsible [Using an object feed]
            @content
              @p: An object feed expects the data to be provided as a whole when the feed is created.
              @p: The below code block shows a basic use of the object feed.
              @codeblock js
                var tableData = {...} // See the 'data' argument for how to structure the data.
                var table = new hx.DataTable('#selector')
                table.feed(hx.dataTable.objectFeed(tableData))

              @p: Alternatively, if the data is returned from a URL request, it can be set as follows:
              @codeblock js
                hx.json('path_to_your_request.file', function(err, data){
                  if (!err) table.feed(hx.dataTable.objectFeed(tableData));
                }

        @param data [Object]: The data to use in the feed.
        @param? options [Object]: The options to use in the feed.
          @property filter [Function]
            @description
              @p: Determines if the row should be included in the filtered data set.
              @p: The default filter function just checks for inclusion of the search term in any of the cell's text.
            @param term [String]: The search term.
            @param row [Object]: The row data.
            @returns Boolean: True if you want to include the row, false, to exclude it.
          @property compare [Function]
            @description: The compare function used to sort the rows.
            @param cell1 [Object]: The first cell object to compare
            @param cell2 [Object]: The second cell object to compare
            @returns Number: -1 if cell1 should be ordered less than cell2, 0 if it is the same, +1 if it should be ordered larger than cell2
        @returns Feed: A feed object.

      @property urlFeed [Function]
        @description
          @p: The default feed object for using url based data
        @param url [String]: The url to use in the feed.
        @param? options [Object]: The options to use in the feed.
          @property cache [Boolean]: Whether or not to cache values in memory - if you always want fresh data, this should be set to false.
            @default false
          @property extra [Object]: Extra information to pass through to the requests made for data. This can be useful for identifying the table, or providing extra options when requesting data from the server.
        @returns Feed: A feed object.

    @object Feed
      @description
        @p: A feed is the type of object used by a data table to get the data for display.
        @p: A feed should be an object with the following functions:
        @codeblock js
          {
            headers: function (cb) { ... }
            totalCount: function (cb) { ... }
            rows: function (range, cb) { ... }
            rowsForIds: function (ids, cb) { ... }
          }
        @p: There are predefined feeds for objects and urls in the @code[hx.dataTable] object.
        @p: A data table expects data to be returned in the callback of each function with a specific value.
        @p: If a custom feed is created, it must return the values expected by the table.

      @property headers [Function]: A function to get a list of header objects
        @param callback [Function]: The function to call once the data has been retrieved
          @param data [Array[Object]]
            @description
              @p: The array of header objects. The header objects will be in the format of @code[{name, id}]
              @codeblock js
                [
                  {
                    name: 'columnName', // The name for the heading to display in the table
                    id: 'columnID' // The unique ID for the column
                  },
                  ... // Additional headers
                ]

              @collapsible [Adding multi column / grouped headers]
                @content:
                  @p: It is possible to add grouping to headers by specifying a @code(js)[groups] array for the header @code(js)[columns]

                  @codeblock js
                    {
                      headers:[
                        { id: 'name', name: 'Name', groups: ['Group 1']},
                        { id: 'age', name: 'Age' },
                        { id: 'gender', name: 'Gender', groups: ['Group 2']},
                        { id: 'dob', name: 'Date of Birth', groups: ['Group 2']},
                        { id: 'salary', name: 'Salary (£)', groups: ['Group 2']}
                      ],
                      rows: [
                        //...
                      ]
                    }

              @collapsible [Wrapping header text for individual columns]
                @content
                  @p: It is possible to override the @code[allowHeaderWrap] option for an individual column by providing the @code[allowWrap] property in the header colums:
                  @codeblock js
                    {
                      headers:[
                        { id: 'name', name: 'Name' },
                        { id: 'age', name: 'Age' },
                        { id: 'gender', name: 'Gender' },
                        { id: 'dob', name: 'Date of Birth' allowWrap: true },
                        { id: 'salary', name: 'Salary (£)' }
                      ],
                      rows: [
                        //...
                      ]
                    }

      @property totalCount [Function]: A function to get the total number of rows in the data set
        @param callback [Function]: The function to call once the data has been retrieved
          @param data [Number]: The total number of rows. This can be undefined if you don't know the total number of rows in the data set.

      @property rows [Function]: A function to get the row data for the range object specified along with the filtered count
        @param range [Object]
          @description
            @p: The range to get the rows for. An example object can be seen below:
            @codeblock js
              {
                start: 0,
                end: 14,
                filter: "",
                sort: {
                  column: 'name'
                  direction: 'desc'
                }
              }
            @p: The above example would be expected to return the first 15 rows of data, sorted by the 'name' column in descending order.

          @property start [Number]: The start of the range. Might be undefined if the all displayMode is used.
          @property end [Number]: The end of the range. Might be undefined if the all displayMode is used.
          @property? filter [String]: The filter being used
          @property? sort [Object]: The sort being used

        @param callback [Function]: The function to call once the data has been retrieved
          @param data [Object]: The rows and filtered count of the data
            @property filteredCount [Number]: The number of filtered rows
            @property rows [Array[Object]]
              @description
                @p: The array of rows to display in the table. The rows array must have the following structure:
                @codeblock js
                  [
                    {
                      id: 0, // The ID for a row
                      // hidden details can be specified here (not in the cells object)
                      cells: {
                        'columnID': 'value' // The cell values for a row in columnID/value pairs
                      }
                    },
                    ... // Additional rows
                  ]
                @p: A cell value must be provided for each column id for every row

                @collapsible [Making rows unselectable]
                  @content
                    @p: When a row is selected, the @code[rowSelectableLookup] function is called. If it returns false, the row will not be selected.
                    @p: By default, the @code[rowSelectableLookup] function allows all rows to be selected. However, by setting the @code[rowSelectableLookup], the row can be made unselectable:
                    @codeblock js
                      dataTable.rowSelectableLookup(function (row) {
                        return !row.unselectable;
                      })
                    @codeblock js
                      [
                        {
                          id: 'rowId',
                          unselectable: true,
                          cells: {
                            ...// Row data
                          }
                        },
                        ... // Additional rows
                      ]

                @collapsible [Disabling rows]
                  @content
                    @p: When a row is rendered, the @code[rowEnabledLookup] function is called. If it returns false, the row will visually disabled and unselectable.
                    @p: By default, a row can be made unselectable using a property in the row object:
                    @codeblock js
                      [
                        {
                          id: 'rowId',
                          disabled: true,
                          cells: {
                            ...// Row data
                          }
                        },
                        ... // Additional rows
                      ]
                    @p: This does not disable row collapsibles.

      @property rowsForIds [Function]: A function to get the rows for the ids supplied
        @param ids [Array]: The array of id's to get
        @param lookupRow [Function]: The row id lookup function for the table
        @param callback [Function]: The function to call once the data has been retrieved
          @param data [Array[Object]]: The array of row data retrieved from the id lookup


  @theme
    @option header-cell-hover-background-col
      @description: The background color for header cells on hover
      @type color
      @default [#F5F5F5]
    @option cell-border-col
      @description: The border color for cells
      @type color
      @default [#E4E4E4]
    @option disabled-row-background-col
      @description: The background color for disabled rows
      @type color
      @default [white]
    @option disabled-row-text-col
      @description: The text color for disabled rows
      @type color
      @default [grey]
    @option no-data-row-background-col
      @description: The background color for the 'no data' row
      @type color
      @default [transparent]
    @option no-data-row-text-col
      @description: The text color for the 'no data' row
      @type color
      @default [black]
    @option selected-row-background-col
      @description: The background color for selected rows
      @type color
      @default [#F7F6B8]
    @option status-bar-background-col
      @description: The background color for the status bar
      @type color
      @default [#FFB800]
    @option status-bar-text-col
      @description: The text color for the status bar
      @type color
      @default [white]
    @option row-collapsible-background-col
      @description: The background color for collapsible rows
      @type color
      @default [white]
    @option row-collapsible-text-col
      @description: The text color for collapsible rows
      @type color
      @default [black]
    @option compact-row-shadow-col
      @description: The shadow color for rows in compact mode
      @type color
      @default [rgba(128, 128, 128, 0.25)]
    @option compact-row-hover-background-col
      @description: The background color for rows in compact mode when hovering
      @type color
      @default [#FAFAFA]
    @option compact-row-hover-text-col
      @description: The text color for rows in compact mode when hovering
      @type color
      @default [black]
    @option compact-row-background-col
      @description: The background color for rows in compact mode
      @type color
      @default [white]
    @option compact-row-text-col
      @description: The text color for rows in compact mode
      @type color
      @default [black]
    @option loading-background-col
      @description: The background color for the loading div
      @type color
      @default [rgba(255, 255, 255, 0.4)]


  @seeAlso
