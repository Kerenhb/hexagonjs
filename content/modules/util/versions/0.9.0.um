@version 0.9.0

  @description
    A collection of utility functions for manipulating arrays, objects and doing checks on types of variables.

  @examples

  @api Util
    @condensed

    @function hx.hash
      @description
        Hashes a string to an integer

        @codeblock js
          // returns a number
          hx.hash('some-string');

          // calling it again with the same input will give the same result
          hx.hash('some-string');

          // returns an integer in the range [0, 5). So this could return 0, 1, 2, 3 or 4
          hx.hash('some-string', 5);

      @param str [String]: The string to hash
      @param? max [Integer]: The maximum value the hash should take. You can leave this undefined
      @returns Number

    @function hx.transpose
      @description:
        Flips a 2D array so that
        @code js
          result[j][i] = data[i][j]
        . The result is returned as a new array.

        @codeblock js
          // returns [[1, 4], [2, 5], [3, 6]]
          hx.transpose([[1, 2, 3], [4, 5, 6]]);

      @param data [Array[Array]]: A 2D array
      @returns [Array[Array]]

    @function hx.deprecatedWarning
      @description: Logs a hexagon deprecation warning to the console (with a stack trace)
      @param name [String]: Name of the deprecated thing
      @param alternative... [String]: A description of the alternative that should be used.

    @function hx.consoleWarning
      @description: Logs a hexagon warning to the console (with a stack trace)
      @param message [String]: The message to display
      @param messages... [String]: Additional messages to display.

    @function hx.supports
      @description
        Provides a way to find out if the browser supports a feature.
      @param name [String]: The name of the feature to check

        @codeblock js
          // this is the list of checks that are currently available
          hx.supports('touch') // touch events
          hx.supports('date')  // date input type

      @returns Boolean: True if the feature is supported

    @function hx.clamp
      @description
        Restricts a value to an interval

        @codeblock js
          hx.clamp(0, 100, 105) // returns 100
          hx.clamp(0, 100, -50) // returns 0
          hx.clamp(0, 100, 75)  // returns 75

      @param min [Number]: The minimum value the result can take
      @param max [Number]: The maximum value the result can take
      @param value [Number]: The number to clamp
      @returns Number: The value, clamped to the range [min, max]

    @function hx.clampUnit
      @description
        Restricts a value to the unit interval [0, 1]

        @codeblock js
          hx.clampUnit(0.15) // returns 0.15
          hx.clampUnit(-0.1) // returns 0
          hx.clampUnit(2.5)  // returns 1

      @param value [Number]: The number to clamp
      @returns Number: The value, clamped to the range [0, 1]

    @function hx.randomId
      @description
        Returns a random string using the length and alphabet provided

        @codeblock js
          hx.randomId() // returns a 16-character hex string
          hx.randomId(24) // returns a 24-character hex string
          hx.randomId(10, 'abc') // returns a 10-character string using the letters a, b and c

      @param? length [Number]: The length of the string to generate
        @default 16
      @param? alphabet [String]: The alphabet to use. Defaults to hex
        @default ABCEDEF0123456789
      @returns Number: The value, clamped to the range [0, 1]

    @function hx.min
      @removed: Apply transformations before passing into min
        @codeblock js
          // old way
          hx.min(array, f)

          // new way
          hx.min(array.map(f))

      @description
        Returns the minimum value in the array

        @codeblock js
          // returns 3
          hx.min([{v: 7}, {v: 6}, {v: 3}, {v: 5}], function(d){
            return d.v;
          })

      @param array [Array]: An array of numbers or objects
      @param? lookup [Function]: A function which maps the values before applying the min
        @param value [Any]: An object from the array
        @returns Number: The number to compare by
      @returns Number: The minimum value in the array

    @function hx.min
      @added
      @description
        Returns the minimum value in the array

        @codeblock js
          hx.min([7, 6, 3, 5]) // returns 3

      @param array [Array]: An array of numbers
      @returns Number: The minimum value in the array

    @function hx.max
      @removed: Apply transformations before passing into max
        @codeblock js
          // old way
          hx.max(array, f)

          // new way
          hx.max(array.map(f))

      @description
        Returns the maximum value in the array

        @codeblock js
          // returns 7
          hx.max([{v: 7}, {v: 6}, {v: 3}, {v: 5}], function(d){
            return d.v;
          })

      @param array [Array]: An array of numbers or objects
      @param? lookup [Function]: A function which maps the values before applying the max
        @param value [Any]: An object from the array
        @returns Number: The number to compare by
      @returns Number: The maximum value in the array

    @function hx.max
      @added
      @description
        Returns the maximum value in the array

        @codeblock js
          hx.max([7, 6, 3, 5]) // returns 7

      @param array [Array]: An array of numbers
      @returns Number: The maximum value in the array

    @function hx.minBy
      @description
        Returns the minimum value in the array according to a extracted or computed value

        @codeblock js
          // returns {v: 3}
          hx.min([{v: 7}, {v: 6}, {v: 3}, {v: 5}], function(d){
            return d.v;
          })

      @param array [Array]: An array of any type
      @param lookup [Function]: A function which extracts or computes the value to be compared
        @param value [Any]: An item from the array
        @returns Number: The number to compare by
      @returns Any: The item with the corresponding minimum value

    @function hx.maxBy
      @description
        Returns the maximum value in the array according to a extracted or computed value

        @codeblock js
          // returns {v: 7}
          hx.max([{v: 7}, {v: 6}, {v: 3}, {v: 5}], function(d){
            return d.v;
          })

      @param array [Array]: An array of any type
      @param lookup [Function]: A function which extracts or computes the value to be compared
        @param value [Any]: An item from the array
        @returns Number: The number to compare by
      @returns Any: The item with the corresponding maximum value

    @function hx.range
      @description:
        Creates an array of values from 0 - length.

        @codeblock js
          //returns [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
          hx.range(10);

      @param length [Number]: The length of the array to create.
      @returns Array

    @function hx.sum
      @description:
        Calculates the sum of an array

        @codeblock js
          //returns 45
          hx.sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);

      @param array [Array[Number]]: The array to sum
      @returns Number: The resulting summed value

    @function hx.flatten
      @description
        Flattens a 2D array into a 1D array.

        @codeblock js
          //returns [1, 2, 3, 4, 5, 6]
          hx.flatten([[1, 2], [3, 4], [5, 6]])

      @param list [Array]: A 2D array.
      @returns Array

    @function hx.cycle
      @description:
        Provides a way to access an array where the index loops round

        @codeblock js
          hx.cycle([0, 1, 2], 0); // returns 0
          hx.cycle([0, 2, 4], 1); // returns 2
          hx.cycle([0, 2, 4], 2); // returns 4
          hx.cycle([0, 2, 4], 3); // returns 0
          hx.cycle([0, 2, 4], 4); // returns 2
          hx.cycle([0, 2, 4], 5); // returns 4

          hx.cycle([0, 2, 4], 400); // returns 2

      @param array [Array[Number]]: The array to cycle over
      @param index [Number]: The index to access
      @returns Number: The value at @code(js)[(index % array.length)]

    @function hx.hashList
      @description:
        Hashes a string onto an item in a list

        @codeblock js
          // returns a value from the list - for the same string, the value returned will always be the same
          hx.hashList([0, 1, 2], "some-string");

      @param array [Array[Any]]: The array to hash onto
      @param index [String]: The string to hash
      @returns Any: The item retrieved from the array

    @function hx.find
      @description:
        Finds an item in an array using an indicator function. Returns the first match

        @codeblock js
          // returns {v: 3}
          hx.find([{v: 7}, {v: 6}, {v: 3}, {v: 5}], function(d){
            return d.v === 3;
          });

      @param array [Array[Any]]: The array to hash onto
      @param indictor [Function]: The indicator function
        @param item [Any]: An item from the array
        @returns Boolean: True if the item is the one you are looking for, false if not.
      @returns Any: The item found in the array. Returns undefined if no match was found.

    @function hx.isString
      @description:
        Returns true if the value passed in is a string

        @codeblock js
          hx.isString("i am a string")                // returns true
          hx.isString({})                             // returns false
          hx.isString(document.createElement('div'))  // returns false
          hx.isString([])                             // returns false
          hx.isString(123)                            // returns false
          hx.isString(function(){})                   // returns false

      @param value [Any]: The value to check
      @returns Boolean: True if the value is a string. False if not

    @function hx.isFunction
      @description:
        Returns true if the value passed in is a function

        @codeblock js
          hx.isFunction("i am a string")                // returns false
          hx.isFunction({})                             // returns false
          hx.isFunction(document.createElement('div'))  // returns false
          hx.isFunction([])                             // returns false
          hx.isFunction(123)                            // returns false
          hx.isFunction(function(){})                   // returns true

      @param value [Any]: The value to check
      @returns Boolean: True if the value is a function. False if not

    @function hx.isArray
      @description:
        Returns true if the value passed in is an array

        @codeblock js
          hx.isArray("i am a string")                 // returns false
          hx.isArray({})                              // returns false
          hx.isArray(document.createElement('div'))   // returns false
          hx.isArray([])                              // returns true
          hx.isArray(123)                             // returns false
          hx.isArray(function(){})                    // returns false

      @param value [Any]: The value to check
      @returns Boolean: True if the value is a array. False if not

    @function hx.isObject
      @description:
        Returns true if the value passed in is an object

        @codeblock js
          hx.isObject("i am a string")                // returns false
          hx.isObject({})                             // returns true
          hx.isObject(document.createElement('div'))  // returns true
          hx.isObject([])                             // returns false
          hx.isObject(123)                            // returns false
          hx.isObject(function(){})                   // returns false

      @param value [Any]: The value to check
      @returns Boolean: True if the value is a object. False if not

    @function hx.isPlainObject
      @description
        Returns true if the value passed in is a plain object, where a plain objects is defined as:

        @list
          @item: Anything created with new (or equivalent)
          @item: DOM nodes
          @item: window

        @codeblock js
          hx.isPlainObject("i am a string")                // returns false
          hx.isPlainObject({})                             // returns true
          hx.isPlainObject(document.createElement('div'))  // returns false
          hx.isPlainObject([])                             // returns false
          hx.isPlainObject(123)                            // returns false
          hx.isPlainObject(function(){})                   // returns false

      @param value [Any]: The value to check
      @returns Boolean: True if the value is a plain object. False if not


    @function hx.groupBy
      @description
        Groups items in an array according to some classifier function.

        @codeblock js
          var items = [
            { type: 'a', value: 1 },
            { type: 'a', value: 2 },
            { type: 'b', value: 3 },
            { type: 'b', value: 4 },
            { type: 'b', value: 5 },
            { type: 'c', value: 6 }
          ]

          /* returns
            {
              a: [
                { type: 'a', value: 1 },
                { type: 'a', value: 2 }
              ],
              b: [
                { type: 'b', value: 3 },
                { type: 'b', value: 4 },
                { type: 'b', value: 5 }
              ],
              b: [
                { type: 'c', value: 6 }
              ]
            }
          */
          hx.groupBy(items, function(v){
            return v.type;
          })


      @param array [Array]: An array of any type
      @param classifier [Function]
        @description: A function that returns the category that an item should be grouped into
        @param item [Any]: The item to classify
        @returns String: The category to group the item into
      @returns Object: An object who's keys are the categories, and items are arrays of grouped values

    @function hx.unique
      @description
        Returns a copy of the list supplied with duplicates removed

        @codeblock js
          //returns [1, 2, 3]
          hx.unique([1, 2, 1, 3, 3, 2, 2, 1, 3])

      @param list [Array]: The list, from which a copy will be created with only unique values.
      @returns Array: A copy of the list supplied with duplicates removed

    @function hx.endsWith
      @description
        Returns true if a string ends with a value

        @codeblock js
          hx.endsWith('some-string', 'ing')  // returns true
          hx.endsWith('some-string', 'some') // returns false
          hx.endsWith('some-string', '')     // returns true

      @param value [String]: The string to check against
      @param suffix [String]: The suffix to check for
      @returns Boolean: True if the value ends with suffix, otherwise false.

    @function hx.startsWith
      @description
        Returns true if a string starts with a value

        @codeblock js
          hx.startsWith('some-string', 'ing')  // returns false
          hx.startsWith('some-string', 'some') // returns true
          hx.startsWith('some-string', '')     // returns true

      @param value [String]: The string to check against
      @param prefix [String]: The prefix to check for
      @returns Boolean: True if the value starts with prefix, otherwise false.

    @function hx.tween
      @description
        Interpolates a value using linear interpolation

        @codeblock js
          hx.tween(0, 5, 0.5)  // returns 2.5
          hx.tween(0, 5, 0.1)  // returns 0.5
          hx.tween(1, 5, 0)    // returns 0
          hx.tween(1, 5, 1)    // returns 5

      @param start [Number]: The start value
      @param end [Number]: The end value
      @param alpha [Number]: The amount to mix the values by. Usually a value between 0 and 1.
      @returns Number: The interpolated value

    @function hx.defined
      @description
        Checks if a value is defined

        @codeblock js
          hx.defined(123)       // true
          hx.defined([])        // true
          hx.defined({})        // true
          hx.defined(undefined) // false

      @param value [Any]: The value to check
      @returns Boolean: True if the value is defined, false if not.

    @function hx.zip
      @description
        Combines multiple arrays, so that the first element is an array containing all the first elements from the arrays provided, the second element is another array with all the second elements from the arrays provided, and so on.

        @codeblock js
          // returns [[1, 4], [2, 5], [3, 6]]
          var result = hx.zip([[1, 2, 3], [4, 5, 6]]);

      @param arrays [Array[Array]]: The arrays that should be zipped together.
      @returns [Array[Array]]: The arrays that have been zipped together.

    @function hx.merge
      @added
      @description
        Merges multiple objects together, and returns the result as a new object.

        The objects will be merged recursively, and arrays will be cloned. Any object that is not a plain object (see the isPlainObject function) will be replaced with an empty object {}.

        @codeblock js
          // returns {'a': 2, 'b': 3}
          hx.merge(false, {'a': 1}, {'a': 2}, {'b': 3})

          // returns {a: {b: 'hello', c: {d: 4, e: 'value'}}}
          hx.merge(true, {a: {b: 2, c: {d: 3}}}, {a: {b: 'hello', c: {d: 4, e: 'value'}}})

      @param retainUndefined [Boolean]: Whether or not undefined values should overwrite existing properties. True means that they will override, false means that they will be ignored.
      @param objects... [Object]: The objects to combine
      @returns Object: The combined object

    @function hx.shallowMerge
      @added
      @description
        Merges multiple objects together where the first level of references are copied, and returns the result as a new object.

        @codeblock js
          // returns {'a': 2, 'b': 3}
          hx.merge(false, {'a': 1}, {'a': 2}, {'b': 3})

          // returns {a: {b: 'hello', c: {d: 4, e: 'value'}}}
          hx.merge(true, {a: {b: 2, c: {d: 3}}}, {a: {b: 'hello', c: {d: 4, e: 'value'}}})

      @param retainUndefined [Boolean]: Whether or not undefined values should overwrite existing properties. True means that they will override, false means that they will be ignored.
      @param objects... [Object]: The objects to combine
      @returns Object: The combined object

    @function hx.clone
      @removed
      @description
        Clones an object or array.

        For shallow clones, references will only be copied. For deep object clones the objects will be cloned recursively, and arrays will be cloned. Any object that is not a plain object (see the isPlainObject function) will be replaced with an empty object {}.

        For deep array clones, items in the array will also be cloned.

      @param object [Object/Array]: The object/array to clone
      @param? deep [Boolean]: Whether or not a deep clone should be performed.
        @default false
      @returns Object/Array: The cloned object/array

    @function hx.clone
      @added
      @description
        Clones an object or array. Items in arrays will also be cloned.

      @param object [Object/Array]: The object/array to clone
      @returns Object/Array: The cloned object/array

    @function hx.shallowClone
      @added
      @description
        Clones an object or array. Only the first level of values in the objects will be copied - this function will not recursively clone items - meaning references will be copied.

      @param object [Object/Array]: The object/array to clone
      @returns Object/Array: The cloned object/array

    @function hx.extend
      @removed: Use hx.merge or hx.shallowMerge


    @function hx.identity
      @description
        A function for returning the passed in value, useful for overriding formatters or as a default formatter.

      @param item [Any]: The item to return.
      @returns item [Any]: The passed in item.

    @function hx.parseHTML
      @description
        A function for parsing a string to a DocumentFragment. Note: any script tags in the html string will be executed immediately - if you do not want this to happen, sanitize the string before passing into this function or remove the script tags from the document fragment created.

      @param html [String]: The html string to parse
      @returns DocumentFragment: A document fragment containing the parsed html.

    @function hx.cleanNode
      @description
        A function for removing whitespace only nodes from a node. Useful when using multiline strings to generate html using @code[hx.parseHTML]

      @param node [HTMLElement]: The node to clean
      @param? recurse [Boolean]: Whether to recursively clean child nodes
        @default true
      @returns node: The cleaned node.

  @seeAlso
