@version 0.13.0
  @api Tree
    @prototype hx.Tree
      @method render
        @param data [Array[Object]]
        @param renderer [Function]
          @param node [HTMLElement]
          @param data [Any]
        @deprecated: Deprecated as part of API standardisation


          Use @code[items(data)] to set the data and @code[renderer(render)] to set the renderer or pass in options to the constructor.

      @constructor
        @param selection [String/HTMLElement]
        @param? hideDisabledButtons [Boolean]
        @deprecated: Deprecated as part of API standardisation


          Use @code[hx.Tree(selector, options)] instead.

      @constructor
        @added

        @description: Sets up / prepares a selection for displaying data in an expandable tree.
        @param selector [String/HTMLElement]: A unique css selector or a HTMLElement that identifies your tree.
        @param? options [Object]: The options to use when constructing the tree
          @property hideDisabledButtons [Boolean]: A parameter that hides the 'disabled' buttons added to the tree.
          @property animate [Boolean]: A parameter that determines whether to animate the arrows when tree children are shown/hidden.
          @property renderer [Function]
            @description
              A function that turns object nodes to dom elements.
              An example renderer:
              @codeblock javascript
                var renderer = function(element, datum) {
                  element.innerHTML = datum.name
                  element.style.color = datum.color || 'black'
                }

              This will set the text of each node to the property 'name' in the json data, and will set the color of the node to the 'color' property if it is present.
              Note that you can do anything here - you can append new elements to the element supplied and fill out the node with arbitrary blocks of html. This is the part where you define what the contents of each node is going to look like.
            @param node [HTMLElement]: The element to populate.
            @param data [Any]: The data to populate the element with.
          @property items [Array[Object]]
            @description
              A nested array of objects that represent nodes in the tree.
              An array that takes the following form:
              @codeblock js
                @inline 0.13.0/exampleData.json

              The data object should be an array of objects that represent the first level of nodes in the tree. Each of these nodes can contain children - they can have a 'children' field which refers to an array of the child nodes. A node can also contain other properties, which will contain the information you wish to fill the node out with. If the example above, the "name" and "color" fields are properties that we have chosen to give to each node, and might used when rendering each node.
              Note that other than the 'children' field, it is up to you what you call any other properties in each node.

      @method items
        @added


        @description: Gets the items the tree is built from
        @returns [Array[Object]]: The tree items

      @method items
        @added


        @description: Set the items to build the tree from.
        @param data [Array[Object]]
          @description
            @p: A nested array of objects that represent nodes in the tree.
            @p: An array that takes the following form:
            @codeblock js
              @inline 0.13.0/exampleData.json

            @p: The data object should be an array of objects that represent the first level of nodes in the tree. Each of these nodes can contain children - they can have a 'children' field which refers to an array of the child nodes. A node can also contain other properties, which will contain the information you wish to fill the node out with. If the example above, the "name" and "color" fields are properties that we have chosen to give to each node, and might used when rendering each node.
            @p: Note that other than the 'children' field, it is up to you what you call any other properties in each node.
        @returns Tree: This Tree

      @method renderer
        @added


        @description: Gets the function used to convert tree items into DOM elements.
        @returns Function
          @description: The current renderer function
          @param node [HTMLElement]: The element to populate.
          @param data [Object]: The data to populate the element with.

      @method renderer
        @added


        @description: Sets the function used to convert tree items into DOM elements.
        @param render [Function]
          @description
            @p: A function that turns object nodes to dom elements.
            @p: An example renderer:
            @codeblock javascript
              var renderer = function(element, datum) {
                element.innerHTML = datum.name
                element.style.color = datum.color || 'black'
              }

            @p: This will set the text of each node to the property 'name' in the json data, and will set the color of the node to the 'color' property if it is present.
            @p: Note that you can do anything here - you can append new elements to the element supplied and fill out the node with arbitrary blocks of html. This is the part where you define what the contents of each node is going to look like.

          @param node [HTMLElement]: The element to populate.
          @param data [Object]: The data to populate the element with.
        @returns Tree: This Tree

    @function hx.initializeTrees
      @description: Initializes all the trees that match a css selector in a page and returns the Tree objects as an array.
      @param selector [String]: A css selector that selects the tab groups you wish to initialise.

    @function hx.initialiseTrees
      @param selector [String]
      @deprecated

        Use @code[hx.initializeTrees] instead.

    @class hx-tree
      @description: The class to give to tree elements. When building trees using the @code[items] method, these classes will be added to content automatically.

      @childclass hx-tree-node: The class to give to tree nodes. These should be directly inside @code[hx-tree] or @code[hx-tree-node-children] elements.
        @childclass hx-tree-node-parent: The class to give to the parent element for a tree. This should always be placed directly inside a @code[hx-tree-node] and before a @code[hx-tree-node-children] element.
          @childclass hx-tree-node-content: The content for the parent element. Should always be placed directly inside a @code[hx-tree-node-parent] element.
        @childclass hx-tree-node-children: The class to give to the children element for a tree. This should always be placed directly inside a @code[hx-tree-node] and after a @code[hx-tree-node-parent] element.
        @childclass hx-tree-node-content: The class to give to any content within a tree node, should be placed directly inside a @code[hx-tree-node] that doesn't include @code[hx-tree-node-parent] or @code[hx-tree-node-children].
