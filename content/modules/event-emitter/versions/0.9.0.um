@version 0.9.0

  @description
    An interface for emitting and subscribing to events.

  @examples
    @codeblock js
      @inline 0.9.0/example.js

  @api Event Emitter

    @prototype hx.EventEmitter
      @description
        A class that can be extended or used standalone to provide a way of emitting events to named registered callbacks. This is generally used internally to give objects the .on method for listening for events, but can be used as a standalone object if desired.

      @constructor
        @description: Creates a new EventEmitter instance.

      @method emit
        @description: Emits an event to all listeners registered under the name supplied.
        @param name [String]: The event type to emit.
        @param data [Object]: Any data that should be sent along with the event
        @returns EventEmitter: This event emitter

      @method on
        @description
          Register a callback that will be called whenever an event is emitted under the given name
        @param name [String]: The event type to listen out for
        @param callback [Function]
          @description: The function to call when the event occurs
          @param data [EventData]: The data sent along with the event
        @returns EventEmitter: This event emitter

      @method off
        @description
          De-register a callback that was registered under the given name
        @param? name [String]: The event type this callback was registered under.
        @param? callback [Function]: The callback function to remove.
        @returns EventEmitter: This event emitter

      @method deregister
        @description
          De-register a callback that was registered under the given name
        @param name [String]: The event type this callback was registered under.
        @param callback [Function]: The callback function to remove.
        @returns EventEmitter: This event emitter

      @method deregisterAll
        @description
          De-registers all callbacks registered under a particular name, or, if no name is supplied de-register all callbacks.
        @param? name [String]: The event type to de-register callbacks for. If not specified, all callbacks for all names will be removed.
        @returns EventEmitter: This event emitter

      @method pipe
        @description
          Pipes events from this event emitter into another. This makes it possible to chain multiple event emitters together if wanted.
        @param eventEmitter [EventEmitter]: The event emitter to send events to.
        @param? prefix [String]
          @description
            A string to append to the names of events that get piped through

            @codeblock js
              var ee1 = new hx.EventEmitter;
              var ee2 = new hx.EventEmitter;

              // pipe events from ee1 into ee2 with prefix `my-prefix`
              ee1.pipe(ee2, 'my-prefix');

              // listen for events from ee1 being piped through
              ee2.on('my-prefix.click', function(){
                console.log('got here');
              });

              // will cause 'got here' to be logged
              ee1.emit('click');

        @param? filter [Array[String]]
          @description
            An array of event names to pipe through

            @codeblock js
              var ee1 = new hx.EventEmitter;
              var ee2 = new hx.EventEmitter;

              // only pipe the 'click' and 'move' events from ee1 into ee2. ignore the rest
              ee1.pipe(ee2, undefined, ['click', 'move']);


        @returns EventEmitter: This event emitter

      @method has
        @description: Checks if there are any callbacks registered for an event type.
        @param name [String]: The event type to check.
        @returns Boolean: True if the event type has some callbacks registered.

  @seeAlso
