@version 0.9.0
  @section Other functionality and examples
    The @code[Color] prototype contains several methods to allow for modification of a color.
    The below examples show all the available methods and also use the @code[toString()] method to show the hex value and set the background color of the cells.
    In the below examples, @code[exCol] is the example color object that we are manipulating.

    @css
      .example-cell{
        text-align:center;
        font-weight:100;
        color:white;
        font-size:15px;
        line-height:30px;
        padding:0 0.5em;
        height:30px;
      }
    @js
      setCellColor = function(obj,col){
        var object = document.getElementById(obj)
        object.setAttribute("style","background:"+col.toString())
        object.innerHTML = col.toString().toUpperCase()
      };
      exCol = hx.color(hx.theme.palette.positiveCol);

    @section Cloning
      The @code[clone()] function returns a new color with the same r, g, b and a values as the current color. Cloning a color object is useful for situations where you need a version of a color without modifying the original value. The methods on the @code[Color] class all modify the selected object. Cloning is useful for situations where you need a new version of a color without altering the original.

      @@codeblock
        newColor = exCol.clone()

      The @code[newColor] object can be modified freely without altering @code[exCol] color.

    @section Lightness
      The lightness functions are useful for creating variations of a color without changing them drastically. Below are examples of each of the lightness functions:

      @table .hx-table.hx-table-centered
        @attr align: center
        @header
          @cell: Original
          @cell: Lighten 20%
          @cell: Darken 20%
          @cell: Set lightness to 30%
        @row
          @cell
            @code[exCol]
          @cell
            @code[exCol.lighten(0.2)]
          @cell
            @code[exCol.darken(0.2)]
          @cell
            @code[exCol.lightness(0.3)]
        @row
          @cell
            @html: <div id="lighten_orig" class="example-cell"></div>
            @js
              setCellColor("lighten_orig",exCol)
          @cell
            @html: <div id="lighten_light" class="example-cell"></div>
            @js
              setCellColor("lighten_light",exCol.clone().lighten(0.2))
          @cell
            @html: <div id="lighten_dark" class="example-cell"></div>
            @js
              setCellColor("lighten_dark",exCol.clone().darken(0.2))
          @cell
            @html: <div id="lighten_lightness" class="example-cell"></div>
            @js
              setCellColor("lighten_lightness",exCol.clone().lightness(0.3))

    @section Saturation
      The saturation functions are useful for creating new colors that are of a similar lightness. Below are examples of each of the saturation functions:

      @table .hx-table.hx-table-centered
        @attr align: center
        @header
          @cell: Original
          @cell: Saturate 40%
          @cell: Desaturate 40%
          @cell: Set saturation to 10%
        @row
          @cell
            @code[exCol]
          @cell
            @code[exCol.saturate(0.4)]
          @cell
            @code[exCol.desaturate(0.4)]
          @cell
            @code[exCol.saturation(0.1)]
        @row
          @cell
            @html: <div id="saturation_orig" class="example-cell"></div>
            @js
              setCellColor("saturation_orig",exCol)
          @cell
            @html: <div id="saturation_saturate" class="example-cell"></div>
            @js
              setCellColor("saturation_saturate",exCol.clone().saturate(0.4))
          @cell
            @html: <div id="saturation_desaturate" class="example-cell"></div>
            @js
              setCellColor("saturation_desaturate",exCol.clone().desaturate(0.4))
          @cell
            @html: <div id="saturation_saturation" class="example-cell"></div>
            @js
              setCellColor("saturation_saturation",exCol.clone().saturation(0.1))

    @section Alpha
      The alpha functions are useful for making transparent colors where required or animating a color. Below are examples of each of the saturation functions. Note: The alpha channel is only supported with RGBA and HSLA. When outputting a color string, make sure you output to a type that accepts alpha values
      @table .hx-table.hx-table-centered
        @attr align: center
        @header
          @cell: Original
          @cell: Fade In 20%
          @cell: Fade Out 20%
          @cell: Set Alpha to 30%
        @row
          @cell
            @code[exCol.alpha(0.7)]
          @cell
            @code[exCol.fadeIn(0.2)]
          @cell
            @code[exCol.fadeOut(0.2)]
          @cell
            @code[exCol.alpha(0.3)]
        @row
          @cell
            @html: <div id="alpha_orig" class="example-cell"></div>
            @js
              setCellColor("alpha_orig",exCol.clone().alpha(0.7),1)
          @cell
            @html: <div id="alpha_fadeIn" class="example-cell"></div>
            @js
              setCellColor("alpha_fadeIn",exCol.clone().alpha(0.7).fadeIn(0.2))
          @cell
            @html: <div id="alpha_fadeOut" class="example-cell"></div>
            @js
              setCellColor("alpha_fadeOut",exCol.clone().alpha(0.7).fadeOut(0.2))
          @cell
            @html: <div id="alpha_alpha" class="example-cell"></div>
            @js
              setCellColor("alpha_alpha",exCol.clone().alpha(0.7).alpha(0.3))

    @section Mix
      The mix function is used to create a mix of two colors. The mix amount indicates how much of the new color to mix with this color with lower values showing more of the current color and higher values showing more of the mixing color. Below is an example where we mix @code[exCol] with purple:

      @table .hx-table.hx-table-centered
        @attr align: center
        @header
          @cell: Color 1
          @cell: Color 2
          @cell: Mix 50/50
          @cell: Mix 70/30
        @row
          @cell
            @code[exCol]
          @cell
            @code
              exColAlt = hx.color([103,23,112])
          @cell
            @code[exCol.mix(exColAlt)]
          @cell
            @code[exCol.mix(exColAlt,0.3)]
        @row
          @cell
            @html: <div id="mix_orig1" class="example-cell"></div>
            @js
              setCellColor("mix_orig1",exCol)
          @cell
            @html: <div id="mix_orig2" class="example-cell"></div>
            @js
              exColAlt = hx.color(hx.theme.palette.warningCol)
              setCellColor("mix_orig2",exColAlt.clone())
          @cell
            @html: <div id="mix_fifty" class="example-cell"></div>
            @js
              setCellColor("mix_fifty",exCol.clone().mix(exColAlt))
          @cell
            @html: <div id="mix_thirty" class="example-cell"></div>
            @js
              setCellColor("mix_thirty",exCol.clone().mix(exColAlt,0.3))

    @section Chaining methods
      It's possible to chain methods when using the Color api. For instance, to create a color that is 20% darker and 30% less saturated than the original, use:
      @@codeblock js
        newCol = exCol.clone().darken(0.2).desaturate(0.3)
      instead of
      @@codeblock js
        newCol = exCol.clone()
        newCol.darken(0.2)
        newCol.desaturate(0.3)

    @section Building a color range
      You can use the colorRange function to create a range of lighter or darker colors based on any color. The default values for the function returns an array of 7 color objects, 3 lighter, 3 darker and the original, in order of lightness.
      @@codeblock js
        exCol.range()

      @css
        .color-range {
          display:flex;
          border: 1px solid #DADADA;
          width:100%;
        }
        .color-palette-cell{
          flex-grow:1;
          text-align:center;
          padding:0.5em 0;
          font-size:15px;
          font-weight:100;
          text-transform:uppercase;
        }
      @html
        <div id="color-range1" class="color-range"></div>
      @js
        theObject = document.getElementById("color-range1")
        list = exCol.range();

        createCell = function(color) {
          var cell;
          cell = document.createElement("div");
          cell.setAttribute("style", "background:" + color + "; color:white");
          cell.innerHTML = color
          cell.setAttribute("class","color-palette-cell");
          return theObject.appendChild(cell);
        };

        buildList = function(){
          for (i = 0; i < list.length; i++) {
            createCell(list[i]);
          }
        }
        buildList()

      You can use the function to build arrays of any length by specifying the numDark and numLight parameters.

      @@codeblock js
        exCol.range(5,5)
      @html
        <div id="color-range2" class="color-range"></div>
      @js
        theObject = document.getElementById("color-range2"),
        list = exCol.range(5,5)
        buildList();

      If the numDark and numLight are not equal, the step between each color will be calculated using the maximum value. As you can see, the lightest color below matches the above ranges and the dark color does not.

      @@codeblock js
        exCol.range(3,1)
      @html
        <div id="color-range3" class="color-range"></div>
      @js
        theObject = document.getElementById("color-range3"),
        list = exCol.range(3,1)
        buildList()

      You can also change the maxRange value to give greater increases/decreases in color

      @@codeblock js
        exCol.range(3,3,0.75)
      @html
        <div id="color-range4" class="color-range"></div>
      @js
        theObject = document.getElementById("color-range4"),
        list = exCol.range(3,3,0.75)
        buildList()
