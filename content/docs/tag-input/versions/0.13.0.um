@version 0.13.0
  @examples
    @example
      @html
        <div id="tag-input"></div>
      @js
        var tagInput = new hx.TagInput('#tag-input')
        tagInput.items(['tag-1', 'tag-2', 'tag-3'])
    @example
      @html
        <div id="tag-input-2"></div>
      @js
        var tagInput = new hx.TagInput('#tag-input-2', {
          classifier: function(value) {
            switch(value){
              case 'hello':
                return 'hx-positive'
              case 'goodbye':
                return 'hx-negative'
            }
          }
        })
        tagInput.add('hello', 'hx-positive')
        tagInput.add('goodbye', 'hx-negative')
        tagInput.add(['tag', 'tag2'])
  @api Tag Input
    @prototype hx.TagInput
      @constructor
        @description
        @param selector [String/HTMLElement]
        @param? classifier [Function]
          @param tag [String]
          @returns String
        @param? validator [Function]
          @param tag [String]
        @deprecated

          Use @code[hx.TagInput(selector, options)] instead.

      @constructor
        @description
        @param selector [String/HTMLElement]: A css selector that uniquely identifies the collapsible in the DOM.
        @param? options [Object]: The options to use when creating the tag input.
          @property classifier [Function]: Provides a way to apply css classes to tags.
            @param tag [String]: The tag to classify
            @returns String: The css class to give a tag.
          @property validator [Function]
            @description
              A function to prevent the user from adding certain tags.
              @html: <div id="validated-tag-input"></div>
              @js
                @description
                  new hx.TagInput('#validated-tag-input', {
                    validator: function(name) {
                      if (!isNaN(Number(name))){
                        return "please enter text";
                      }
                    };
                  });

              @codeblock
                // example: only allow non number inputs
                new hx.TagInput('#validated-tag-input', {
                  validator: function(name) {
                    if (!isNaN(Number(name))){
                      return "please enter text";
                    }
                  }
                });
            @param tag [String]: The tag that is being added
            @returns String: The error to show to the user. If no error exists, the return value should be an empty string.

      @method items
        @description: A method for setting the tags
        @param items [Array[String]]: The array of tags to set
        @param? class [String]: The CSS class to give the tag.
        @returns TagInput: This tag input for chaining

      @method items
        @description: A method for getting the tags
        @returns [Array[String]]: The current set of tags.

      @method tags
        @deprecated

          Use @code[hx.TagInput.items()] instead.

      @method add
        @param name [String]
        @param? class [String]
        @returns TagInput: This TagInput

      @method add
        @param tags [Array[String]]
        @param? class [String]
        @returns TagInput: This TagInput