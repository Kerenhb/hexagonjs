@bugfix 1.4.2
  @description
    Fixed where the code was using the @code[loadingMessage] and @code[pleaseEnterMinCharactersMessage]

@bugfix 1.8.0
  @issue 273
  @description
    Fixed an issue where object based items were being sorted incorrectly

@prototype hx.AutoComplete
  @bugfix 1.2.1
    @issue 172
    @description
      Fixed a breaking issue with the autocomplete that caused it not to autocomplete and external matchers to break.

  @bugfix 1.8.2
    @issue 343
    @description
      Fixed an issue where the filtering failed when there were no 'disabled' items in the list

  @description
    The AutoComplete class can be used to add an auto complete suggestion dropdown to any input field.

  @extends EventEmitter
  @constructor
    @description
      Add an auto complete suggestions dropdown to an input box

    @arg selector [String/HTMLElement]
      @description
        The selector of the input box to add an auto complete to.

    @arg data [Array/Function]
      @description
        The data to use as suggestions for the input field. Data can be specified as an array of items or as a function that returns an array of items.

        The data must be in one of the following formats:

        @h4[Array]

        @@codeblock json
          [
            "Bob",
            "Steve",
            ...
          ]

        By default, the data is expected as an array of string values. If object based data is passed in, an @code[inputMap] must be provided in the options:
        @@codeblock js
          data = [
            {
              name "Bob",
              age: 21
            },
            {
              name: "Steve",
              age: 25
            }
          ]
          options = {
            inputMap: function(item){
              return item.name + ', ' + item.age;
            }
          };

        A @code[renderer] and @code[filterOptions.searchValues] can also be specified to change how the text is displayed and what data is searchable, independent of the @code[inputMap] .

        @h4[Function]
        @@codeblock js
          var data = function(term, callback){
            hx.json('path/to/data.json?search='+term, function(e, r){
              callback(r.responseText)
            });
          }

        A 'Loading...' message will be shown whilst the AutoComplete waits for a response from this function.

        It can be used in conjunction with the internal matching or be used to match externally when setting the @code[matchType] to 'external':

        @@codeblock js
          var data = function(term, callback) {
            if (term.length > 0) {
              var a, county, d, name, _i, _len;
              a = [];
              for (_i = 0, _len = townAndCountyData.length; _i < _len; _i++) {
                d = townAndCountyData[_i];
                name = d.name.toLowerCase();
                county = d.county.toLowerCase();
                term = term.toLowerCase();
                if (name.indexOf(term) > -1 || county.indexOf(term) > -1) {
                  a.push(d);
                }
              }
              return callback(a);
            } else {
              return callback([]);
            }
          };
          options.matchType = 'external'

        The term passed in is the current value of the input field (for use as a search term).

        The callback is the function that should be called to pass the data back to the AutoComplete to display.

        The callback must be called for the AutoComplete to show.

    @arg? options [Object]
      @description
        The options to use when building an auto complete box

      @property matchType [String]
        @description
          The type of filtering the AutoComplete should use when filtering internally

          The internal filter uses the @code[hx.filter] functions. All the filter types can be specified as the match type (e.g. 'startsWith', 'exact' or 'fuzzy') and the default value is 'contains'

          In addition to the internal filter, external matching can be used (where the data returned from the callback is used directly and not sorted/filtered internally) by setting the match type to 'external'

      @property minLength [Number]
        @description
          The minimum length of text input before suggestions will be shown.

      @property placeholder [String]
        @description
          The placeholder text for the input.

          If the placeholder is undefiend and a min-length is specified, a placeholder of 'Min length {x} characters' is used.

      @property mustMatch [Boolean]
        @description
          Whether the final value in the input field must match a value from the suggestions.

          If set to true, the input field will be updated to the first result of the filtered data when the user changes focus. If no matches are found, the input field is cleared.

      @property showAll [Boolean]
        @description
          Determines whether all the data will be shown when no text is present and the user clicks on the input.

      @property renderer [Function]
        @description
          A function used to render the items in the dropdown.

          The default renderer sets the html to the item value and the onclick sets the input value to the same value:

          @@codeblock js
            renderer = function(elem, item){
              hx.select(elem)
                .text(item)
            };

        @arg elem [HTMLElement]
          @description
            The HTMLElement to populate

        @arg item [Object]
          @description
            The data item to populate the element with.

      @property showOtherResults [Boolean]
        @description
          Determines whether to show results under an 'other results' heading that are in the data but don't match the input text.

          Only used when not using external matching.

      @property filter [Function]
        @description
          The function to use when filtering internally. Should only be used when one of the @code[hx.filter] methods isn't suitable for filtering the data.

        @arg array [Array]
          @description
            The array from the AutoComplete cache or data source

        @arg term [String]
          @description
            The search term to use when filtering

        @returns [Array]
          @description
            The filtered data

      @property filterOptions [Object]
        @description
          The options to use when filtering internally. The available options can be found on the
          @moduleLink hx-filter
           page.
          The default @code[searchValues] option uses the passed in input map to search on.

      @property inputMap [Function]
        @description
          A function used to convert objects or nested arrays passed to the AutoComplete data into searchable strings.

          Setting the inputMap defines what data should be shown in the dropdown and what should be searchable.

          @@codeblock js
            data = [
              {
                name: 'Bob'
                age: 12
              },
              ...
            ]
            inputMap = function(item){
              return item.name + ', ' + item.age;
            };

          The above inputMap would return 'Bob, 12' which would then be searchable and display as the text in the dropdown.

          A custom renderer can also be defined to change what displays in the dropdown.

        @arg item [Any]
          @description
            The data item passed from the AutoComplete data.

        @returns [String]
          @description
            The text string to display in the input field, the dropdown and to be searchable

      @property noResultsMessage [String]
        @updated 1.4.0
          @issue 211
          @description
            The default text is now retrieved from the userFacingText module

        @description
          The text to display when no results are found. If this is not defined or set to '' then the dropdown will not be shown when there are no results.

      @property otherResultsMessage [String]
        @updated 1.4.0
          @issue 211
          @description
            The default text is now retrieved from the userFacingText module

        @description
          The text to display at the top of the other results when the @code[showOtherResults] option is true.

          The text must be set to a valid string, setting this option to undefined or '' will not prevent the heading from showing as it acts as a divider between matching and non-matching results.

      @property trimTrailingSpaces [Boolean]
        @added 0.10.0
        @description
          An option to enable whitespace trimming at the end of the input value if no results are found for that string.

      @property loadingMessage [String]
        @added 1.4.0
          @issue 211
          @description
            The default text is retrieved from the userFacingText module

        @description
          The text to display when the autocomplete is loading data

      @property pleaseEnterMinCharactersMessage [String]
        @added 1.4.0
          @issue 211
          @description
            The default text is retrieved from the userFacingText module

        @description
          The text to display when the user has not entered enough text.

          When setting this, the minimum number of characters can be substituted in using the @code['$minLength'] variable, e.g.

          @@codeblock js
            options = {
              minLength: 3,
              pleaseEnterMinCharactersMessage = 'Please enter $minLength characters'
            }
            // Evaluates to 'Please enter 3 characters'

  @method clearCache
    @description
      A method to clear the cached data in the auto complete.

      It is called internally when the user changes focus (either by clicking outside the input box or by tabbing out of the box) but can be called manually if the data needs to be cleared more frequently (i.e. as the user types)

    @returns [AutoComplete]
      @description
        This AutoComplete

  @method hide
    @deprecated 0.13.0
      @description
        Suppressing events is now possible with @code[autocomplete.suppressed(eventName, suppress)] . This is part of the @link(/docs/0.13.0/event-emitter)[Event Emitter] api.

    @removed 0.14.0
      @description
        Suppressing events is now possible with @code[autocomplete.suppressed(eventName, suppress)] . This is part of the @link(/docs/0.13.0/event-emitter)[Event Emitter] api.

    @description
      A method to hide the autocomplete menu.

    @arg? suppressEvents [Boolean]
      @description
        Whether to emit events when hiding the autocomplete.

    @returns [AutoComplete]
      @description
        This AutoComplete

  @method value
    @added 0.13.0
      @description
        Added a method for getting the value of the auto complete.

    @description
      A method for getting the value of the auto complete.

    @returns [String]
      @description
        The input value

  @method value
    @added 0.13.0
      @description
        Added a method for setting the value of the auto complete.

    @description
      A method for setting the value of the auto complete.

    @arg value [String]
      @description
        The value to set the autocomplete to.

    @returns [AutoComplete]
      @description
        This autocomplete.

  @method hide
    @added 0.13.0
    @description
      A method to hide the autocomplete menu.

    @returns [AutoComplete]
      @description
        This AutoComplete

  @event change [String]
    @description
      The event called whenever the input text is updated by the auto complete object. The data is the value of the input field.

  @event hide [String]
    @description
      The event called when the auto complete is hidden, either by changing focus or by manually calling the 'hide' method. The data is the value of the input field

  @event highlight [Object]
    @added 0.13.0
      @description
        Pipe the dropdown events through so they can be listened to directly.

    @description
      The event called when an item is set as the active item. This can only be done by the keyboard or when the user clicks on an item

    @property eventType [String]
      @description
        The type of event that caused the selection:
        @list
          @item['click' - User clicked]
          @item['arrow' - User used the arrow keys]

    @property item [String/Object]
      @description
        The item as it was passed into the select.

  @event dropdown.showstart
    @added 0.13.0
      @description
        Pipe the dropdown events through so they can be listened to directly.

    @description
      Emitted when the dropdown animation starts. No data is sent with this event.

  @event dropdown.showend
    @added 0.13.0
      @description
        Pipe the dropdown events through so they can be listened to directly.

    @description
      Emitted when the dropdown animation finishes. No data is sent with this event.

  @event dropdown.hidestart
    @added 0.13.0
      @description
        Pipe the dropdown events through so they can be listened to directly.

    @description
      Emitted when the dropdown animation starts. No data is sent with this event.

  @event dropdown.hideend
    @added 0.13.0
      @description
        Pipe the dropdown events through so they can be listened to directly.

    @description
      Emitted when the dropdown animation ends. No data is sent with this event.

  @event dropdown.change [Boolean]
    @added 0.13.0
      @description
        Pipe the dropdown events through so they can be listened to directly.

    @description
      Emitted when the dropdown is shown or hidden. The data is a boolean indicating whether or not the dropdown is hidden.

  @event hide
    @added 0.13.0
    @deprecated 0.13.0
      @description
        Use the @code[dropdown.hidestart] or @code[dropdown.hideend] event instead.

    @removed 0.14.0
      @description
        Use the @code[dropdown.hidestart] or @code[dropdown.hideend] event instead.

@function hx.autoComplete
  @added 1.0.0
    @description
      Fluid api version of AutoComplete

  @removed 1.3.0
    @issue 205
    @description
      This function did not work as it didn't pass the data to the autocomplete

  @description
    Creates a new AutoComplete set up on a detached element, wrapped in a selection

  @arg options [Object]
    @description
      See the options object for constructing AutoComplete

  @returns [Selection]
    @description
      A selection containing an element with an AutoComplete initialised on it

@function hx.autoComplete
  @added 1.3.0
    @issue 205
    @description
      New fluid version of the autocomplete that takes data as well as options.

  @description
    Creates a new AutoComplete set up on a detached element, wrapped in a selection

  @arg data [Array/Function]
    @description
      The data to use as suggestions for the input field.

      See the @code[hx.AutoComplete] prototype constructor for more information about the data.

  @arg? options [Object]
    @description
      See the @code[hx.AutoComplete] prototype constructor for more information about the options.

  @returns [Selection]
    @description
      A selection containing an element with an AutoComplete initialised on it

