@section Graphs

  @section Creating a Graph

    @p: A Graph can be created as follows.

    @codeblock js
      var graph = new hx.Graph('#my-graph');

    @p: The hx.Graph constructor expects a css selector or a HTMLElement.

  @section Creating an Axis

    @p: Before anything can be plotted on this graph, an axis must be added.

    @codeblock js
      var axis = graph.addAxis();

    @p: This will give you a default axis which has linear scales for the x and y axes.

  @section Creating a Series

    @p: Once an axis has been created, a series can be added. There are a few different series types available, but for this example a simple line series is used.

    @codeblock js
      var series = axis.addSeries('line', 'Series Name');

  @section Setting the data in a Series

    @p: The last step is to set the data that this series displays.

    @codeblock js
      // create some fake data
      var data = hx.range(100).map(function(i){return {x: i, y: Math.sin(i/20)} });

      // set the series' data
      series.setData(data);

  @section Rendering the graph

    @p: Now that the graph is set up, a call to .render() is needed to actually draw the graph.

    @codeblock js
      graph.render();

    @p: The result is this:

    @html
      <div class="my-graph"></div>

    @js
      var graph = new hx.Graph('.my-graph');
      var axis = graph.addAxis();
      var series = axis.addSeries('line', 'Series Name');
      var data = hx.range(100).map(function(i){return {x: i, y: Math.sin(i/20)} });
      series.setData(data);
      graph.render();

    @css
      .my-graph {
        height: 300px;
      }


  @section Colors

    @p: When working with graphs the colors defined in @code(js)[hx.theme.plot.colors] should be used.
